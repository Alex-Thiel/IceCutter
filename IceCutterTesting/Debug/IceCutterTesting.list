
IceCutterTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000697c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce4  08006ce4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006ce4  08006ce4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ce4  08006ce4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000070  08006d5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08006d5c  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ff1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a6  00000000  00000000  00036089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00039de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dff  00000000  00000000  0003b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017035  00000000  00000000  00051e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009516d  00000000  00000000  00068ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  000fe08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006a1c 	.word	0x08006a1c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006a1c 	.word	0x08006a1c

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cfrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0008      	movs	r0, r1
 8000230:	4661      	mov	r1, ip
 8000232:	e7ff      	b.n	8000234 <__aeabi_cfcmpeq>

08000234 <__aeabi_cfcmpeq>:
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000236:	f000 f8b7 	bl	80003a8 <__lesf2>
 800023a:	2800      	cmp	r0, #0
 800023c:	d401      	bmi.n	8000242 <__aeabi_cfcmpeq+0xe>
 800023e:	2100      	movs	r1, #0
 8000240:	42c8      	cmn	r0, r1
 8000242:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000244 <__aeabi_fcmpeq>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f843 	bl	80002d0 <__eqsf2>
 800024a:	4240      	negs	r0, r0
 800024c:	3001      	adds	r0, #1
 800024e:	bd10      	pop	{r4, pc}

08000250 <__aeabi_fcmplt>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f8a9 	bl	80003a8 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	db01      	blt.n	800025e <__aeabi_fcmplt+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmple>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f89f 	bl	80003a8 <__lesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dd01      	ble.n	8000272 <__aeabi_fcmple+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpgt>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f84f 	bl	800031c <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	dc01      	bgt.n	8000286 <__aeabi_fcmpgt+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_fcmpge>:
 800028c:	b510      	push	{r4, lr}
 800028e:	f000 f845 	bl	800031c <__gesf2>
 8000292:	2800      	cmp	r0, #0
 8000294:	da01      	bge.n	800029a <__aeabi_fcmpge+0xe>
 8000296:	2000      	movs	r0, #0
 8000298:	bd10      	pop	{r4, pc}
 800029a:	2001      	movs	r0, #1
 800029c:	bd10      	pop	{r4, pc}
 800029e:	46c0      	nop			; (mov r8, r8)

080002a0 <__aeabi_f2uiz>:
 80002a0:	219e      	movs	r1, #158	; 0x9e
 80002a2:	b510      	push	{r4, lr}
 80002a4:	05c9      	lsls	r1, r1, #23
 80002a6:	1c04      	adds	r4, r0, #0
 80002a8:	f7ff fff0 	bl	800028c <__aeabi_fcmpge>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d103      	bne.n	80002b8 <__aeabi_f2uiz+0x18>
 80002b0:	1c20      	adds	r0, r4, #0
 80002b2:	f000 fb91 	bl	80009d8 <__aeabi_f2iz>
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	219e      	movs	r1, #158	; 0x9e
 80002ba:	1c20      	adds	r0, r4, #0
 80002bc:	05c9      	lsls	r1, r1, #23
 80002be:	f000 f9dd 	bl	800067c <__aeabi_fsub>
 80002c2:	f000 fb89 	bl	80009d8 <__aeabi_f2iz>
 80002c6:	2380      	movs	r3, #128	; 0x80
 80002c8:	061b      	lsls	r3, r3, #24
 80002ca:	469c      	mov	ip, r3
 80002cc:	4460      	add	r0, ip
 80002ce:	e7f2      	b.n	80002b6 <__aeabi_f2uiz+0x16>

080002d0 <__eqsf2>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	0042      	lsls	r2, r0, #1
 80002d4:	0245      	lsls	r5, r0, #9
 80002d6:	024e      	lsls	r6, r1, #9
 80002d8:	004c      	lsls	r4, r1, #1
 80002da:	0fc3      	lsrs	r3, r0, #31
 80002dc:	0a6d      	lsrs	r5, r5, #9
 80002de:	2001      	movs	r0, #1
 80002e0:	0e12      	lsrs	r2, r2, #24
 80002e2:	0a76      	lsrs	r6, r6, #9
 80002e4:	0e24      	lsrs	r4, r4, #24
 80002e6:	0fc9      	lsrs	r1, r1, #31
 80002e8:	2aff      	cmp	r2, #255	; 0xff
 80002ea:	d006      	beq.n	80002fa <__eqsf2+0x2a>
 80002ec:	2cff      	cmp	r4, #255	; 0xff
 80002ee:	d003      	beq.n	80002f8 <__eqsf2+0x28>
 80002f0:	42a2      	cmp	r2, r4
 80002f2:	d101      	bne.n	80002f8 <__eqsf2+0x28>
 80002f4:	42b5      	cmp	r5, r6
 80002f6:	d006      	beq.n	8000306 <__eqsf2+0x36>
 80002f8:	bd70      	pop	{r4, r5, r6, pc}
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d1fc      	bne.n	80002f8 <__eqsf2+0x28>
 80002fe:	2cff      	cmp	r4, #255	; 0xff
 8000300:	d1fa      	bne.n	80002f8 <__eqsf2+0x28>
 8000302:	2e00      	cmp	r6, #0
 8000304:	d1f8      	bne.n	80002f8 <__eqsf2+0x28>
 8000306:	428b      	cmp	r3, r1
 8000308:	d006      	beq.n	8000318 <__eqsf2+0x48>
 800030a:	2001      	movs	r0, #1
 800030c:	2a00      	cmp	r2, #0
 800030e:	d1f3      	bne.n	80002f8 <__eqsf2+0x28>
 8000310:	0028      	movs	r0, r5
 8000312:	1e43      	subs	r3, r0, #1
 8000314:	4198      	sbcs	r0, r3
 8000316:	e7ef      	b.n	80002f8 <__eqsf2+0x28>
 8000318:	2000      	movs	r0, #0
 800031a:	e7ed      	b.n	80002f8 <__eqsf2+0x28>

0800031c <__gesf2>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	0042      	lsls	r2, r0, #1
 8000320:	0245      	lsls	r5, r0, #9
 8000322:	024e      	lsls	r6, r1, #9
 8000324:	004c      	lsls	r4, r1, #1
 8000326:	0fc3      	lsrs	r3, r0, #31
 8000328:	0a6d      	lsrs	r5, r5, #9
 800032a:	0e12      	lsrs	r2, r2, #24
 800032c:	0a76      	lsrs	r6, r6, #9
 800032e:	0e24      	lsrs	r4, r4, #24
 8000330:	0fc8      	lsrs	r0, r1, #31
 8000332:	2aff      	cmp	r2, #255	; 0xff
 8000334:	d01b      	beq.n	800036e <__gesf2+0x52>
 8000336:	2cff      	cmp	r4, #255	; 0xff
 8000338:	d00e      	beq.n	8000358 <__gesf2+0x3c>
 800033a:	2a00      	cmp	r2, #0
 800033c:	d11b      	bne.n	8000376 <__gesf2+0x5a>
 800033e:	2c00      	cmp	r4, #0
 8000340:	d101      	bne.n	8000346 <__gesf2+0x2a>
 8000342:	2e00      	cmp	r6, #0
 8000344:	d01c      	beq.n	8000380 <__gesf2+0x64>
 8000346:	2d00      	cmp	r5, #0
 8000348:	d00c      	beq.n	8000364 <__gesf2+0x48>
 800034a:	4283      	cmp	r3, r0
 800034c:	d01c      	beq.n	8000388 <__gesf2+0x6c>
 800034e:	2102      	movs	r1, #2
 8000350:	1e58      	subs	r0, r3, #1
 8000352:	4008      	ands	r0, r1
 8000354:	3801      	subs	r0, #1
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	2e00      	cmp	r6, #0
 800035a:	d122      	bne.n	80003a2 <__gesf2+0x86>
 800035c:	2a00      	cmp	r2, #0
 800035e:	d1f4      	bne.n	800034a <__gesf2+0x2e>
 8000360:	2d00      	cmp	r5, #0
 8000362:	d1f2      	bne.n	800034a <__gesf2+0x2e>
 8000364:	2800      	cmp	r0, #0
 8000366:	d1f6      	bne.n	8000356 <__gesf2+0x3a>
 8000368:	2001      	movs	r0, #1
 800036a:	4240      	negs	r0, r0
 800036c:	e7f3      	b.n	8000356 <__gesf2+0x3a>
 800036e:	2d00      	cmp	r5, #0
 8000370:	d117      	bne.n	80003a2 <__gesf2+0x86>
 8000372:	2cff      	cmp	r4, #255	; 0xff
 8000374:	d0f0      	beq.n	8000358 <__gesf2+0x3c>
 8000376:	2c00      	cmp	r4, #0
 8000378:	d1e7      	bne.n	800034a <__gesf2+0x2e>
 800037a:	2e00      	cmp	r6, #0
 800037c:	d1e5      	bne.n	800034a <__gesf2+0x2e>
 800037e:	e7e6      	b.n	800034e <__gesf2+0x32>
 8000380:	2000      	movs	r0, #0
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e7      	beq.n	8000356 <__gesf2+0x3a>
 8000386:	e7e2      	b.n	800034e <__gesf2+0x32>
 8000388:	42a2      	cmp	r2, r4
 800038a:	dc05      	bgt.n	8000398 <__gesf2+0x7c>
 800038c:	dbea      	blt.n	8000364 <__gesf2+0x48>
 800038e:	42b5      	cmp	r5, r6
 8000390:	d802      	bhi.n	8000398 <__gesf2+0x7c>
 8000392:	d3e7      	bcc.n	8000364 <__gesf2+0x48>
 8000394:	2000      	movs	r0, #0
 8000396:	e7de      	b.n	8000356 <__gesf2+0x3a>
 8000398:	4243      	negs	r3, r0
 800039a:	4158      	adcs	r0, r3
 800039c:	0040      	lsls	r0, r0, #1
 800039e:	3801      	subs	r0, #1
 80003a0:	e7d9      	b.n	8000356 <__gesf2+0x3a>
 80003a2:	2002      	movs	r0, #2
 80003a4:	4240      	negs	r0, r0
 80003a6:	e7d6      	b.n	8000356 <__gesf2+0x3a>

080003a8 <__lesf2>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	0042      	lsls	r2, r0, #1
 80003ac:	0245      	lsls	r5, r0, #9
 80003ae:	024e      	lsls	r6, r1, #9
 80003b0:	004c      	lsls	r4, r1, #1
 80003b2:	0fc3      	lsrs	r3, r0, #31
 80003b4:	0a6d      	lsrs	r5, r5, #9
 80003b6:	0e12      	lsrs	r2, r2, #24
 80003b8:	0a76      	lsrs	r6, r6, #9
 80003ba:	0e24      	lsrs	r4, r4, #24
 80003bc:	0fc8      	lsrs	r0, r1, #31
 80003be:	2aff      	cmp	r2, #255	; 0xff
 80003c0:	d00b      	beq.n	80003da <__lesf2+0x32>
 80003c2:	2cff      	cmp	r4, #255	; 0xff
 80003c4:	d00d      	beq.n	80003e2 <__lesf2+0x3a>
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	d11f      	bne.n	800040a <__lesf2+0x62>
 80003ca:	2c00      	cmp	r4, #0
 80003cc:	d116      	bne.n	80003fc <__lesf2+0x54>
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d114      	bne.n	80003fc <__lesf2+0x54>
 80003d2:	2000      	movs	r0, #0
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d010      	beq.n	80003fa <__lesf2+0x52>
 80003d8:	e009      	b.n	80003ee <__lesf2+0x46>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d10c      	bne.n	80003f8 <__lesf2+0x50>
 80003de:	2cff      	cmp	r4, #255	; 0xff
 80003e0:	d113      	bne.n	800040a <__lesf2+0x62>
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d108      	bne.n	80003f8 <__lesf2+0x50>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	d008      	beq.n	80003fc <__lesf2+0x54>
 80003ea:	4283      	cmp	r3, r0
 80003ec:	d012      	beq.n	8000414 <__lesf2+0x6c>
 80003ee:	2102      	movs	r1, #2
 80003f0:	1e58      	subs	r0, r3, #1
 80003f2:	4008      	ands	r0, r1
 80003f4:	3801      	subs	r0, #1
 80003f6:	e000      	b.n	80003fa <__lesf2+0x52>
 80003f8:	2002      	movs	r0, #2
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	2d00      	cmp	r5, #0
 80003fe:	d1f4      	bne.n	80003ea <__lesf2+0x42>
 8000400:	2800      	cmp	r0, #0
 8000402:	d1fa      	bne.n	80003fa <__lesf2+0x52>
 8000404:	2001      	movs	r0, #1
 8000406:	4240      	negs	r0, r0
 8000408:	e7f7      	b.n	80003fa <__lesf2+0x52>
 800040a:	2c00      	cmp	r4, #0
 800040c:	d1ed      	bne.n	80003ea <__lesf2+0x42>
 800040e:	2e00      	cmp	r6, #0
 8000410:	d1eb      	bne.n	80003ea <__lesf2+0x42>
 8000412:	e7ec      	b.n	80003ee <__lesf2+0x46>
 8000414:	42a2      	cmp	r2, r4
 8000416:	dc05      	bgt.n	8000424 <__lesf2+0x7c>
 8000418:	dbf2      	blt.n	8000400 <__lesf2+0x58>
 800041a:	42b5      	cmp	r5, r6
 800041c:	d802      	bhi.n	8000424 <__lesf2+0x7c>
 800041e:	d3ef      	bcc.n	8000400 <__lesf2+0x58>
 8000420:	2000      	movs	r0, #0
 8000422:	e7ea      	b.n	80003fa <__lesf2+0x52>
 8000424:	4243      	negs	r3, r0
 8000426:	4158      	adcs	r0, r3
 8000428:	0040      	lsls	r0, r0, #1
 800042a:	3801      	subs	r0, #1
 800042c:	e7e5      	b.n	80003fa <__lesf2+0x52>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_fmul>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	0244      	lsls	r4, r0, #9
 800043a:	0045      	lsls	r5, r0, #1
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0a64      	lsrs	r4, r4, #9
 8000440:	1c0f      	adds	r7, r1, #0
 8000442:	0e2d      	lsrs	r5, r5, #24
 8000444:	0fc6      	lsrs	r6, r0, #31
 8000446:	2d00      	cmp	r5, #0
 8000448:	d100      	bne.n	800044c <__aeabi_fmul+0x1c>
 800044a:	e08d      	b.n	8000568 <__aeabi_fmul+0x138>
 800044c:	2dff      	cmp	r5, #255	; 0xff
 800044e:	d100      	bne.n	8000452 <__aeabi_fmul+0x22>
 8000450:	e092      	b.n	8000578 <__aeabi_fmul+0x148>
 8000452:	2300      	movs	r3, #0
 8000454:	2080      	movs	r0, #128	; 0x80
 8000456:	4699      	mov	r9, r3
 8000458:	469a      	mov	sl, r3
 800045a:	00e4      	lsls	r4, r4, #3
 800045c:	04c0      	lsls	r0, r0, #19
 800045e:	4304      	orrs	r4, r0
 8000460:	3d7f      	subs	r5, #127	; 0x7f
 8000462:	0278      	lsls	r0, r7, #9
 8000464:	0a43      	lsrs	r3, r0, #9
 8000466:	4698      	mov	r8, r3
 8000468:	007b      	lsls	r3, r7, #1
 800046a:	0e1b      	lsrs	r3, r3, #24
 800046c:	0fff      	lsrs	r7, r7, #31
 800046e:	2b00      	cmp	r3, #0
 8000470:	d100      	bne.n	8000474 <__aeabi_fmul+0x44>
 8000472:	e070      	b.n	8000556 <__aeabi_fmul+0x126>
 8000474:	2bff      	cmp	r3, #255	; 0xff
 8000476:	d100      	bne.n	800047a <__aeabi_fmul+0x4a>
 8000478:	e086      	b.n	8000588 <__aeabi_fmul+0x158>
 800047a:	4642      	mov	r2, r8
 800047c:	00d0      	lsls	r0, r2, #3
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	3b7f      	subs	r3, #127	; 0x7f
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	2300      	movs	r3, #0
 8000486:	04d2      	lsls	r2, r2, #19
 8000488:	4302      	orrs	r2, r0
 800048a:	4690      	mov	r8, r2
 800048c:	469c      	mov	ip, r3
 800048e:	0031      	movs	r1, r6
 8000490:	464b      	mov	r3, r9
 8000492:	4079      	eors	r1, r7
 8000494:	1c68      	adds	r0, r5, #1
 8000496:	2b0f      	cmp	r3, #15
 8000498:	d81c      	bhi.n	80004d4 <__aeabi_fmul+0xa4>
 800049a:	4a76      	ldr	r2, [pc, #472]	; (8000674 <__aeabi_fmul+0x244>)
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	58d3      	ldr	r3, [r2, r3]
 80004a0:	469f      	mov	pc, r3
 80004a2:	0039      	movs	r1, r7
 80004a4:	4644      	mov	r4, r8
 80004a6:	46e2      	mov	sl, ip
 80004a8:	4653      	mov	r3, sl
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d00f      	beq.n	80004ce <__aeabi_fmul+0x9e>
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fmul+0x84>
 80004b2:	e0d7      	b.n	8000664 <__aeabi_fmul+0x234>
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d137      	bne.n	8000528 <__aeabi_fmul+0xf8>
 80004b8:	2000      	movs	r0, #0
 80004ba:	2400      	movs	r4, #0
 80004bc:	05c0      	lsls	r0, r0, #23
 80004be:	4320      	orrs	r0, r4
 80004c0:	07c9      	lsls	r1, r1, #31
 80004c2:	4308      	orrs	r0, r1
 80004c4:	bce0      	pop	{r5, r6, r7}
 80004c6:	46ba      	mov	sl, r7
 80004c8:	46b1      	mov	r9, r6
 80004ca:	46a8      	mov	r8, r5
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	20ff      	movs	r0, #255	; 0xff
 80004d0:	2400      	movs	r4, #0
 80004d2:	e7f3      	b.n	80004bc <__aeabi_fmul+0x8c>
 80004d4:	0c26      	lsrs	r6, r4, #16
 80004d6:	0424      	lsls	r4, r4, #16
 80004d8:	0c22      	lsrs	r2, r4, #16
 80004da:	4644      	mov	r4, r8
 80004dc:	0424      	lsls	r4, r4, #16
 80004de:	0c24      	lsrs	r4, r4, #16
 80004e0:	4643      	mov	r3, r8
 80004e2:	0027      	movs	r7, r4
 80004e4:	0c1b      	lsrs	r3, r3, #16
 80004e6:	4357      	muls	r7, r2
 80004e8:	4374      	muls	r4, r6
 80004ea:	435a      	muls	r2, r3
 80004ec:	435e      	muls	r6, r3
 80004ee:	1912      	adds	r2, r2, r4
 80004f0:	0c3b      	lsrs	r3, r7, #16
 80004f2:	189b      	adds	r3, r3, r2
 80004f4:	429c      	cmp	r4, r3
 80004f6:	d903      	bls.n	8000500 <__aeabi_fmul+0xd0>
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	0252      	lsls	r2, r2, #9
 80004fc:	4694      	mov	ip, r2
 80004fe:	4466      	add	r6, ip
 8000500:	043f      	lsls	r7, r7, #16
 8000502:	041a      	lsls	r2, r3, #16
 8000504:	0c3f      	lsrs	r7, r7, #16
 8000506:	19d2      	adds	r2, r2, r7
 8000508:	0194      	lsls	r4, r2, #6
 800050a:	1e67      	subs	r7, r4, #1
 800050c:	41bc      	sbcs	r4, r7
 800050e:	0c1b      	lsrs	r3, r3, #16
 8000510:	0e92      	lsrs	r2, r2, #26
 8000512:	199b      	adds	r3, r3, r6
 8000514:	4314      	orrs	r4, r2
 8000516:	019b      	lsls	r3, r3, #6
 8000518:	431c      	orrs	r4, r3
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	d400      	bmi.n	8000520 <__aeabi_fmul+0xf0>
 800051e:	e09b      	b.n	8000658 <__aeabi_fmul+0x228>
 8000520:	2301      	movs	r3, #1
 8000522:	0862      	lsrs	r2, r4, #1
 8000524:	401c      	ands	r4, r3
 8000526:	4314      	orrs	r4, r2
 8000528:	0002      	movs	r2, r0
 800052a:	327f      	adds	r2, #127	; 0x7f
 800052c:	2a00      	cmp	r2, #0
 800052e:	dd64      	ble.n	80005fa <__aeabi_fmul+0x1ca>
 8000530:	0763      	lsls	r3, r4, #29
 8000532:	d004      	beq.n	800053e <__aeabi_fmul+0x10e>
 8000534:	230f      	movs	r3, #15
 8000536:	4023      	ands	r3, r4
 8000538:	2b04      	cmp	r3, #4
 800053a:	d000      	beq.n	800053e <__aeabi_fmul+0x10e>
 800053c:	3404      	adds	r4, #4
 800053e:	0123      	lsls	r3, r4, #4
 8000540:	d503      	bpl.n	800054a <__aeabi_fmul+0x11a>
 8000542:	0002      	movs	r2, r0
 8000544:	4b4c      	ldr	r3, [pc, #304]	; (8000678 <__aeabi_fmul+0x248>)
 8000546:	3280      	adds	r2, #128	; 0x80
 8000548:	401c      	ands	r4, r3
 800054a:	2afe      	cmp	r2, #254	; 0xfe
 800054c:	dcbf      	bgt.n	80004ce <__aeabi_fmul+0x9e>
 800054e:	01a4      	lsls	r4, r4, #6
 8000550:	0a64      	lsrs	r4, r4, #9
 8000552:	b2d0      	uxtb	r0, r2
 8000554:	e7b2      	b.n	80004bc <__aeabi_fmul+0x8c>
 8000556:	4643      	mov	r3, r8
 8000558:	2b00      	cmp	r3, #0
 800055a:	d13d      	bne.n	80005d8 <__aeabi_fmul+0x1a8>
 800055c:	464a      	mov	r2, r9
 800055e:	3301      	adds	r3, #1
 8000560:	431a      	orrs	r2, r3
 8000562:	4691      	mov	r9, r2
 8000564:	469c      	mov	ip, r3
 8000566:	e792      	b.n	800048e <__aeabi_fmul+0x5e>
 8000568:	2c00      	cmp	r4, #0
 800056a:	d129      	bne.n	80005c0 <__aeabi_fmul+0x190>
 800056c:	2304      	movs	r3, #4
 800056e:	4699      	mov	r9, r3
 8000570:	3b03      	subs	r3, #3
 8000572:	2500      	movs	r5, #0
 8000574:	469a      	mov	sl, r3
 8000576:	e774      	b.n	8000462 <__aeabi_fmul+0x32>
 8000578:	2c00      	cmp	r4, #0
 800057a:	d11b      	bne.n	80005b4 <__aeabi_fmul+0x184>
 800057c:	2308      	movs	r3, #8
 800057e:	4699      	mov	r9, r3
 8000580:	3b06      	subs	r3, #6
 8000582:	25ff      	movs	r5, #255	; 0xff
 8000584:	469a      	mov	sl, r3
 8000586:	e76c      	b.n	8000462 <__aeabi_fmul+0x32>
 8000588:	4643      	mov	r3, r8
 800058a:	35ff      	adds	r5, #255	; 0xff
 800058c:	2b00      	cmp	r3, #0
 800058e:	d10b      	bne.n	80005a8 <__aeabi_fmul+0x178>
 8000590:	2302      	movs	r3, #2
 8000592:	464a      	mov	r2, r9
 8000594:	431a      	orrs	r2, r3
 8000596:	4691      	mov	r9, r2
 8000598:	469c      	mov	ip, r3
 800059a:	e778      	b.n	800048e <__aeabi_fmul+0x5e>
 800059c:	4653      	mov	r3, sl
 800059e:	0031      	movs	r1, r6
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fmul+0x176>
 80005a4:	e783      	b.n	80004ae <__aeabi_fmul+0x7e>
 80005a6:	e792      	b.n	80004ce <__aeabi_fmul+0x9e>
 80005a8:	2303      	movs	r3, #3
 80005aa:	464a      	mov	r2, r9
 80005ac:	431a      	orrs	r2, r3
 80005ae:	4691      	mov	r9, r2
 80005b0:	469c      	mov	ip, r3
 80005b2:	e76c      	b.n	800048e <__aeabi_fmul+0x5e>
 80005b4:	230c      	movs	r3, #12
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b09      	subs	r3, #9
 80005ba:	25ff      	movs	r5, #255	; 0xff
 80005bc:	469a      	mov	sl, r3
 80005be:	e750      	b.n	8000462 <__aeabi_fmul+0x32>
 80005c0:	0020      	movs	r0, r4
 80005c2:	f000 fab9 	bl	8000b38 <__clzsi2>
 80005c6:	2576      	movs	r5, #118	; 0x76
 80005c8:	1f43      	subs	r3, r0, #5
 80005ca:	409c      	lsls	r4, r3
 80005cc:	2300      	movs	r3, #0
 80005ce:	426d      	negs	r5, r5
 80005d0:	4699      	mov	r9, r3
 80005d2:	469a      	mov	sl, r3
 80005d4:	1a2d      	subs	r5, r5, r0
 80005d6:	e744      	b.n	8000462 <__aeabi_fmul+0x32>
 80005d8:	4640      	mov	r0, r8
 80005da:	f000 faad 	bl	8000b38 <__clzsi2>
 80005de:	4642      	mov	r2, r8
 80005e0:	1f43      	subs	r3, r0, #5
 80005e2:	409a      	lsls	r2, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	1a2d      	subs	r5, r5, r0
 80005e8:	4690      	mov	r8, r2
 80005ea:	469c      	mov	ip, r3
 80005ec:	3d76      	subs	r5, #118	; 0x76
 80005ee:	e74e      	b.n	800048e <__aeabi_fmul+0x5e>
 80005f0:	2480      	movs	r4, #128	; 0x80
 80005f2:	2100      	movs	r1, #0
 80005f4:	20ff      	movs	r0, #255	; 0xff
 80005f6:	03e4      	lsls	r4, r4, #15
 80005f8:	e760      	b.n	80004bc <__aeabi_fmul+0x8c>
 80005fa:	2301      	movs	r3, #1
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	2b1b      	cmp	r3, #27
 8000600:	dd00      	ble.n	8000604 <__aeabi_fmul+0x1d4>
 8000602:	e759      	b.n	80004b8 <__aeabi_fmul+0x88>
 8000604:	0022      	movs	r2, r4
 8000606:	309e      	adds	r0, #158	; 0x9e
 8000608:	40da      	lsrs	r2, r3
 800060a:	4084      	lsls	r4, r0
 800060c:	0013      	movs	r3, r2
 800060e:	1e62      	subs	r2, r4, #1
 8000610:	4194      	sbcs	r4, r2
 8000612:	431c      	orrs	r4, r3
 8000614:	0763      	lsls	r3, r4, #29
 8000616:	d004      	beq.n	8000622 <__aeabi_fmul+0x1f2>
 8000618:	230f      	movs	r3, #15
 800061a:	4023      	ands	r3, r4
 800061c:	2b04      	cmp	r3, #4
 800061e:	d000      	beq.n	8000622 <__aeabi_fmul+0x1f2>
 8000620:	3404      	adds	r4, #4
 8000622:	0163      	lsls	r3, r4, #5
 8000624:	d51a      	bpl.n	800065c <__aeabi_fmul+0x22c>
 8000626:	2001      	movs	r0, #1
 8000628:	2400      	movs	r4, #0
 800062a:	e747      	b.n	80004bc <__aeabi_fmul+0x8c>
 800062c:	2080      	movs	r0, #128	; 0x80
 800062e:	03c0      	lsls	r0, r0, #15
 8000630:	4204      	tst	r4, r0
 8000632:	d009      	beq.n	8000648 <__aeabi_fmul+0x218>
 8000634:	4643      	mov	r3, r8
 8000636:	4203      	tst	r3, r0
 8000638:	d106      	bne.n	8000648 <__aeabi_fmul+0x218>
 800063a:	4644      	mov	r4, r8
 800063c:	4304      	orrs	r4, r0
 800063e:	0264      	lsls	r4, r4, #9
 8000640:	0039      	movs	r1, r7
 8000642:	20ff      	movs	r0, #255	; 0xff
 8000644:	0a64      	lsrs	r4, r4, #9
 8000646:	e739      	b.n	80004bc <__aeabi_fmul+0x8c>
 8000648:	2080      	movs	r0, #128	; 0x80
 800064a:	03c0      	lsls	r0, r0, #15
 800064c:	4304      	orrs	r4, r0
 800064e:	0264      	lsls	r4, r4, #9
 8000650:	0031      	movs	r1, r6
 8000652:	20ff      	movs	r0, #255	; 0xff
 8000654:	0a64      	lsrs	r4, r4, #9
 8000656:	e731      	b.n	80004bc <__aeabi_fmul+0x8c>
 8000658:	0028      	movs	r0, r5
 800065a:	e765      	b.n	8000528 <__aeabi_fmul+0xf8>
 800065c:	01a4      	lsls	r4, r4, #6
 800065e:	2000      	movs	r0, #0
 8000660:	0a64      	lsrs	r4, r4, #9
 8000662:	e72b      	b.n	80004bc <__aeabi_fmul+0x8c>
 8000664:	2080      	movs	r0, #128	; 0x80
 8000666:	03c0      	lsls	r0, r0, #15
 8000668:	4304      	orrs	r4, r0
 800066a:	0264      	lsls	r4, r4, #9
 800066c:	20ff      	movs	r0, #255	; 0xff
 800066e:	0a64      	lsrs	r4, r4, #9
 8000670:	e724      	b.n	80004bc <__aeabi_fmul+0x8c>
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	08006b8c 	.word	0x08006b8c
 8000678:	f7ffffff 	.word	0xf7ffffff

0800067c <__aeabi_fsub>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	46ce      	mov	lr, r9
 8000680:	4647      	mov	r7, r8
 8000682:	0243      	lsls	r3, r0, #9
 8000684:	0a5b      	lsrs	r3, r3, #9
 8000686:	024e      	lsls	r6, r1, #9
 8000688:	00da      	lsls	r2, r3, #3
 800068a:	4694      	mov	ip, r2
 800068c:	0a72      	lsrs	r2, r6, #9
 800068e:	4691      	mov	r9, r2
 8000690:	0045      	lsls	r5, r0, #1
 8000692:	004a      	lsls	r2, r1, #1
 8000694:	b580      	push	{r7, lr}
 8000696:	0e2d      	lsrs	r5, r5, #24
 8000698:	001f      	movs	r7, r3
 800069a:	0fc4      	lsrs	r4, r0, #31
 800069c:	0e12      	lsrs	r2, r2, #24
 800069e:	0fc9      	lsrs	r1, r1, #31
 80006a0:	09b6      	lsrs	r6, r6, #6
 80006a2:	2aff      	cmp	r2, #255	; 0xff
 80006a4:	d05b      	beq.n	800075e <__aeabi_fsub+0xe2>
 80006a6:	2001      	movs	r0, #1
 80006a8:	4041      	eors	r1, r0
 80006aa:	428c      	cmp	r4, r1
 80006ac:	d039      	beq.n	8000722 <__aeabi_fsub+0xa6>
 80006ae:	1aa8      	subs	r0, r5, r2
 80006b0:	2800      	cmp	r0, #0
 80006b2:	dd5a      	ble.n	800076a <__aeabi_fsub+0xee>
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	d06a      	beq.n	800078e <__aeabi_fsub+0x112>
 80006b8:	2dff      	cmp	r5, #255	; 0xff
 80006ba:	d100      	bne.n	80006be <__aeabi_fsub+0x42>
 80006bc:	e0d9      	b.n	8000872 <__aeabi_fsub+0x1f6>
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	04d2      	lsls	r2, r2, #19
 80006c2:	4316      	orrs	r6, r2
 80006c4:	281b      	cmp	r0, #27
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_fsub+0x4e>
 80006c8:	e0e9      	b.n	800089e <__aeabi_fsub+0x222>
 80006ca:	2001      	movs	r0, #1
 80006cc:	4663      	mov	r3, ip
 80006ce:	1a18      	subs	r0, r3, r0
 80006d0:	0143      	lsls	r3, r0, #5
 80006d2:	d400      	bmi.n	80006d6 <__aeabi_fsub+0x5a>
 80006d4:	e0b4      	b.n	8000840 <__aeabi_fsub+0x1c4>
 80006d6:	0180      	lsls	r0, r0, #6
 80006d8:	0987      	lsrs	r7, r0, #6
 80006da:	0038      	movs	r0, r7
 80006dc:	f000 fa2c 	bl	8000b38 <__clzsi2>
 80006e0:	3805      	subs	r0, #5
 80006e2:	4087      	lsls	r7, r0
 80006e4:	4285      	cmp	r5, r0
 80006e6:	dc00      	bgt.n	80006ea <__aeabi_fsub+0x6e>
 80006e8:	e0cc      	b.n	8000884 <__aeabi_fsub+0x208>
 80006ea:	1a2d      	subs	r5, r5, r0
 80006ec:	48b5      	ldr	r0, [pc, #724]	; (80009c4 <__aeabi_fsub+0x348>)
 80006ee:	4038      	ands	r0, r7
 80006f0:	0743      	lsls	r3, r0, #29
 80006f2:	d004      	beq.n	80006fe <__aeabi_fsub+0x82>
 80006f4:	230f      	movs	r3, #15
 80006f6:	4003      	ands	r3, r0
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d000      	beq.n	80006fe <__aeabi_fsub+0x82>
 80006fc:	3004      	adds	r0, #4
 80006fe:	0143      	lsls	r3, r0, #5
 8000700:	d400      	bmi.n	8000704 <__aeabi_fsub+0x88>
 8000702:	e0a0      	b.n	8000846 <__aeabi_fsub+0x1ca>
 8000704:	1c6a      	adds	r2, r5, #1
 8000706:	2dfe      	cmp	r5, #254	; 0xfe
 8000708:	d100      	bne.n	800070c <__aeabi_fsub+0x90>
 800070a:	e08d      	b.n	8000828 <__aeabi_fsub+0x1ac>
 800070c:	0180      	lsls	r0, r0, #6
 800070e:	0a47      	lsrs	r7, r0, #9
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	05d0      	lsls	r0, r2, #23
 8000714:	4338      	orrs	r0, r7
 8000716:	07e4      	lsls	r4, r4, #31
 8000718:	4320      	orrs	r0, r4
 800071a:	bcc0      	pop	{r6, r7}
 800071c:	46b9      	mov	r9, r7
 800071e:	46b0      	mov	r8, r6
 8000720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000722:	1aa8      	subs	r0, r5, r2
 8000724:	4680      	mov	r8, r0
 8000726:	2800      	cmp	r0, #0
 8000728:	dd45      	ble.n	80007b6 <__aeabi_fsub+0x13a>
 800072a:	2a00      	cmp	r2, #0
 800072c:	d070      	beq.n	8000810 <__aeabi_fsub+0x194>
 800072e:	2dff      	cmp	r5, #255	; 0xff
 8000730:	d100      	bne.n	8000734 <__aeabi_fsub+0xb8>
 8000732:	e09e      	b.n	8000872 <__aeabi_fsub+0x1f6>
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	04db      	lsls	r3, r3, #19
 8000738:	431e      	orrs	r6, r3
 800073a:	4643      	mov	r3, r8
 800073c:	2b1b      	cmp	r3, #27
 800073e:	dc00      	bgt.n	8000742 <__aeabi_fsub+0xc6>
 8000740:	e0d2      	b.n	80008e8 <__aeabi_fsub+0x26c>
 8000742:	2001      	movs	r0, #1
 8000744:	4460      	add	r0, ip
 8000746:	0143      	lsls	r3, r0, #5
 8000748:	d57a      	bpl.n	8000840 <__aeabi_fsub+0x1c4>
 800074a:	3501      	adds	r5, #1
 800074c:	2dff      	cmp	r5, #255	; 0xff
 800074e:	d06b      	beq.n	8000828 <__aeabi_fsub+0x1ac>
 8000750:	2301      	movs	r3, #1
 8000752:	4a9d      	ldr	r2, [pc, #628]	; (80009c8 <__aeabi_fsub+0x34c>)
 8000754:	4003      	ands	r3, r0
 8000756:	0840      	lsrs	r0, r0, #1
 8000758:	4010      	ands	r0, r2
 800075a:	4318      	orrs	r0, r3
 800075c:	e7c8      	b.n	80006f0 <__aeabi_fsub+0x74>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d020      	beq.n	80007a4 <__aeabi_fsub+0x128>
 8000762:	428c      	cmp	r4, r1
 8000764:	d023      	beq.n	80007ae <__aeabi_fsub+0x132>
 8000766:	0028      	movs	r0, r5
 8000768:	38ff      	subs	r0, #255	; 0xff
 800076a:	2800      	cmp	r0, #0
 800076c:	d039      	beq.n	80007e2 <__aeabi_fsub+0x166>
 800076e:	1b57      	subs	r7, r2, r5
 8000770:	2d00      	cmp	r5, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_fsub+0xfa>
 8000774:	e09d      	b.n	80008b2 <__aeabi_fsub+0x236>
 8000776:	4663      	mov	r3, ip
 8000778:	2b00      	cmp	r3, #0
 800077a:	d100      	bne.n	800077e <__aeabi_fsub+0x102>
 800077c:	e0db      	b.n	8000936 <__aeabi_fsub+0x2ba>
 800077e:	1e7b      	subs	r3, r7, #1
 8000780:	2f01      	cmp	r7, #1
 8000782:	d100      	bne.n	8000786 <__aeabi_fsub+0x10a>
 8000784:	e10d      	b.n	80009a2 <__aeabi_fsub+0x326>
 8000786:	2fff      	cmp	r7, #255	; 0xff
 8000788:	d071      	beq.n	800086e <__aeabi_fsub+0x1f2>
 800078a:	001f      	movs	r7, r3
 800078c:	e098      	b.n	80008c0 <__aeabi_fsub+0x244>
 800078e:	2e00      	cmp	r6, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_fsub+0x118>
 8000792:	e0a7      	b.n	80008e4 <__aeabi_fsub+0x268>
 8000794:	1e42      	subs	r2, r0, #1
 8000796:	2801      	cmp	r0, #1
 8000798:	d100      	bne.n	800079c <__aeabi_fsub+0x120>
 800079a:	e0e6      	b.n	800096a <__aeabi_fsub+0x2ee>
 800079c:	28ff      	cmp	r0, #255	; 0xff
 800079e:	d068      	beq.n	8000872 <__aeabi_fsub+0x1f6>
 80007a0:	0010      	movs	r0, r2
 80007a2:	e78f      	b.n	80006c4 <__aeabi_fsub+0x48>
 80007a4:	2001      	movs	r0, #1
 80007a6:	4041      	eors	r1, r0
 80007a8:	42a1      	cmp	r1, r4
 80007aa:	d000      	beq.n	80007ae <__aeabi_fsub+0x132>
 80007ac:	e77f      	b.n	80006ae <__aeabi_fsub+0x32>
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	4240      	negs	r0, r0
 80007b2:	4680      	mov	r8, r0
 80007b4:	44a8      	add	r8, r5
 80007b6:	4640      	mov	r0, r8
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d038      	beq.n	800082e <__aeabi_fsub+0x1b2>
 80007bc:	1b51      	subs	r1, r2, r5
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fsub+0x148>
 80007c2:	e0ae      	b.n	8000922 <__aeabi_fsub+0x2a6>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d100      	bne.n	80007ca <__aeabi_fsub+0x14e>
 80007c8:	e0df      	b.n	800098a <__aeabi_fsub+0x30e>
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	4660      	mov	r0, ip
 80007ce:	04db      	lsls	r3, r3, #19
 80007d0:	4318      	orrs	r0, r3
 80007d2:	4684      	mov	ip, r0
 80007d4:	291b      	cmp	r1, #27
 80007d6:	dc00      	bgt.n	80007da <__aeabi_fsub+0x15e>
 80007d8:	e0d9      	b.n	800098e <__aeabi_fsub+0x312>
 80007da:	2001      	movs	r0, #1
 80007dc:	0015      	movs	r5, r2
 80007de:	1980      	adds	r0, r0, r6
 80007e0:	e7b1      	b.n	8000746 <__aeabi_fsub+0xca>
 80007e2:	20fe      	movs	r0, #254	; 0xfe
 80007e4:	1c6a      	adds	r2, r5, #1
 80007e6:	4210      	tst	r0, r2
 80007e8:	d171      	bne.n	80008ce <__aeabi_fsub+0x252>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fsub+0x174>
 80007ee:	e0a6      	b.n	800093e <__aeabi_fsub+0x2c2>
 80007f0:	4663      	mov	r3, ip
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fsub+0x17c>
 80007f6:	e0d9      	b.n	80009ac <__aeabi_fsub+0x330>
 80007f8:	2200      	movs	r2, #0
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fsub+0x184>
 80007fe:	e788      	b.n	8000712 <__aeabi_fsub+0x96>
 8000800:	1b98      	subs	r0, r3, r6
 8000802:	0143      	lsls	r3, r0, #5
 8000804:	d400      	bmi.n	8000808 <__aeabi_fsub+0x18c>
 8000806:	e0e1      	b.n	80009cc <__aeabi_fsub+0x350>
 8000808:	4663      	mov	r3, ip
 800080a:	000c      	movs	r4, r1
 800080c:	1af0      	subs	r0, r6, r3
 800080e:	e76f      	b.n	80006f0 <__aeabi_fsub+0x74>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d100      	bne.n	8000816 <__aeabi_fsub+0x19a>
 8000814:	e0b7      	b.n	8000986 <__aeabi_fsub+0x30a>
 8000816:	0002      	movs	r2, r0
 8000818:	3a01      	subs	r2, #1
 800081a:	2801      	cmp	r0, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fsub+0x1a4>
 800081e:	e09c      	b.n	800095a <__aeabi_fsub+0x2de>
 8000820:	28ff      	cmp	r0, #255	; 0xff
 8000822:	d026      	beq.n	8000872 <__aeabi_fsub+0x1f6>
 8000824:	4690      	mov	r8, r2
 8000826:	e788      	b.n	800073a <__aeabi_fsub+0xbe>
 8000828:	22ff      	movs	r2, #255	; 0xff
 800082a:	2700      	movs	r7, #0
 800082c:	e771      	b.n	8000712 <__aeabi_fsub+0x96>
 800082e:	20fe      	movs	r0, #254	; 0xfe
 8000830:	1c6a      	adds	r2, r5, #1
 8000832:	4210      	tst	r0, r2
 8000834:	d064      	beq.n	8000900 <__aeabi_fsub+0x284>
 8000836:	2aff      	cmp	r2, #255	; 0xff
 8000838:	d0f6      	beq.n	8000828 <__aeabi_fsub+0x1ac>
 800083a:	0015      	movs	r5, r2
 800083c:	4466      	add	r6, ip
 800083e:	0870      	lsrs	r0, r6, #1
 8000840:	0743      	lsls	r3, r0, #29
 8000842:	d000      	beq.n	8000846 <__aeabi_fsub+0x1ca>
 8000844:	e756      	b.n	80006f4 <__aeabi_fsub+0x78>
 8000846:	08c3      	lsrs	r3, r0, #3
 8000848:	2dff      	cmp	r5, #255	; 0xff
 800084a:	d012      	beq.n	8000872 <__aeabi_fsub+0x1f6>
 800084c:	025b      	lsls	r3, r3, #9
 800084e:	0a5f      	lsrs	r7, r3, #9
 8000850:	b2ea      	uxtb	r2, r5
 8000852:	e75e      	b.n	8000712 <__aeabi_fsub+0x96>
 8000854:	4662      	mov	r2, ip
 8000856:	2a00      	cmp	r2, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fsub+0x1e0>
 800085a:	e096      	b.n	800098a <__aeabi_fsub+0x30e>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d008      	beq.n	8000872 <__aeabi_fsub+0x1f6>
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	03d2      	lsls	r2, r2, #15
 8000864:	4213      	tst	r3, r2
 8000866:	d004      	beq.n	8000872 <__aeabi_fsub+0x1f6>
 8000868:	4648      	mov	r0, r9
 800086a:	4210      	tst	r0, r2
 800086c:	d101      	bne.n	8000872 <__aeabi_fsub+0x1f6>
 800086e:	000c      	movs	r4, r1
 8000870:	464b      	mov	r3, r9
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0d8      	beq.n	8000828 <__aeabi_fsub+0x1ac>
 8000876:	2780      	movs	r7, #128	; 0x80
 8000878:	03ff      	lsls	r7, r7, #15
 800087a:	431f      	orrs	r7, r3
 800087c:	027f      	lsls	r7, r7, #9
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	0a7f      	lsrs	r7, r7, #9
 8000882:	e746      	b.n	8000712 <__aeabi_fsub+0x96>
 8000884:	2320      	movs	r3, #32
 8000886:	003a      	movs	r2, r7
 8000888:	1b45      	subs	r5, r0, r5
 800088a:	0038      	movs	r0, r7
 800088c:	3501      	adds	r5, #1
 800088e:	40ea      	lsrs	r2, r5
 8000890:	1b5d      	subs	r5, r3, r5
 8000892:	40a8      	lsls	r0, r5
 8000894:	1e43      	subs	r3, r0, #1
 8000896:	4198      	sbcs	r0, r3
 8000898:	2500      	movs	r5, #0
 800089a:	4310      	orrs	r0, r2
 800089c:	e728      	b.n	80006f0 <__aeabi_fsub+0x74>
 800089e:	2320      	movs	r3, #32
 80008a0:	1a1b      	subs	r3, r3, r0
 80008a2:	0032      	movs	r2, r6
 80008a4:	409e      	lsls	r6, r3
 80008a6:	40c2      	lsrs	r2, r0
 80008a8:	0030      	movs	r0, r6
 80008aa:	1e43      	subs	r3, r0, #1
 80008ac:	4198      	sbcs	r0, r3
 80008ae:	4310      	orrs	r0, r2
 80008b0:	e70c      	b.n	80006cc <__aeabi_fsub+0x50>
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d0db      	beq.n	800086e <__aeabi_fsub+0x1f2>
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	4660      	mov	r0, ip
 80008ba:	04db      	lsls	r3, r3, #19
 80008bc:	4318      	orrs	r0, r3
 80008be:	4684      	mov	ip, r0
 80008c0:	2f1b      	cmp	r7, #27
 80008c2:	dd56      	ble.n	8000972 <__aeabi_fsub+0x2f6>
 80008c4:	2001      	movs	r0, #1
 80008c6:	000c      	movs	r4, r1
 80008c8:	0015      	movs	r5, r2
 80008ca:	1a30      	subs	r0, r6, r0
 80008cc:	e700      	b.n	80006d0 <__aeabi_fsub+0x54>
 80008ce:	4663      	mov	r3, ip
 80008d0:	1b9f      	subs	r7, r3, r6
 80008d2:	017b      	lsls	r3, r7, #5
 80008d4:	d43d      	bmi.n	8000952 <__aeabi_fsub+0x2d6>
 80008d6:	2f00      	cmp	r7, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_fsub+0x260>
 80008da:	e6fe      	b.n	80006da <__aeabi_fsub+0x5e>
 80008dc:	2400      	movs	r4, #0
 80008de:	2200      	movs	r2, #0
 80008e0:	2700      	movs	r7, #0
 80008e2:	e716      	b.n	8000712 <__aeabi_fsub+0x96>
 80008e4:	0005      	movs	r5, r0
 80008e6:	e7af      	b.n	8000848 <__aeabi_fsub+0x1cc>
 80008e8:	0032      	movs	r2, r6
 80008ea:	4643      	mov	r3, r8
 80008ec:	4641      	mov	r1, r8
 80008ee:	40da      	lsrs	r2, r3
 80008f0:	2320      	movs	r3, #32
 80008f2:	1a5b      	subs	r3, r3, r1
 80008f4:	409e      	lsls	r6, r3
 80008f6:	0030      	movs	r0, r6
 80008f8:	1e43      	subs	r3, r0, #1
 80008fa:	4198      	sbcs	r0, r3
 80008fc:	4310      	orrs	r0, r2
 80008fe:	e721      	b.n	8000744 <__aeabi_fsub+0xc8>
 8000900:	2d00      	cmp	r5, #0
 8000902:	d1a7      	bne.n	8000854 <__aeabi_fsub+0x1d8>
 8000904:	4663      	mov	r3, ip
 8000906:	2b00      	cmp	r3, #0
 8000908:	d059      	beq.n	80009be <__aeabi_fsub+0x342>
 800090a:	2200      	movs	r2, #0
 800090c:	2e00      	cmp	r6, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_fsub+0x296>
 8000910:	e6ff      	b.n	8000712 <__aeabi_fsub+0x96>
 8000912:	0030      	movs	r0, r6
 8000914:	4460      	add	r0, ip
 8000916:	0143      	lsls	r3, r0, #5
 8000918:	d592      	bpl.n	8000840 <__aeabi_fsub+0x1c4>
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <__aeabi_fsub+0x348>)
 800091c:	3501      	adds	r5, #1
 800091e:	4018      	ands	r0, r3
 8000920:	e78e      	b.n	8000840 <__aeabi_fsub+0x1c4>
 8000922:	4663      	mov	r3, ip
 8000924:	2b00      	cmp	r3, #0
 8000926:	d047      	beq.n	80009b8 <__aeabi_fsub+0x33c>
 8000928:	1e4b      	subs	r3, r1, #1
 800092a:	2901      	cmp	r1, #1
 800092c:	d015      	beq.n	800095a <__aeabi_fsub+0x2de>
 800092e:	29ff      	cmp	r1, #255	; 0xff
 8000930:	d02b      	beq.n	800098a <__aeabi_fsub+0x30e>
 8000932:	0019      	movs	r1, r3
 8000934:	e74e      	b.n	80007d4 <__aeabi_fsub+0x158>
 8000936:	000c      	movs	r4, r1
 8000938:	464b      	mov	r3, r9
 800093a:	003d      	movs	r5, r7
 800093c:	e784      	b.n	8000848 <__aeabi_fsub+0x1cc>
 800093e:	4662      	mov	r2, ip
 8000940:	2a00      	cmp	r2, #0
 8000942:	d18b      	bne.n	800085c <__aeabi_fsub+0x1e0>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d192      	bne.n	800086e <__aeabi_fsub+0x1f2>
 8000948:	2780      	movs	r7, #128	; 0x80
 800094a:	2400      	movs	r4, #0
 800094c:	22ff      	movs	r2, #255	; 0xff
 800094e:	03ff      	lsls	r7, r7, #15
 8000950:	e6df      	b.n	8000712 <__aeabi_fsub+0x96>
 8000952:	4663      	mov	r3, ip
 8000954:	000c      	movs	r4, r1
 8000956:	1af7      	subs	r7, r6, r3
 8000958:	e6bf      	b.n	80006da <__aeabi_fsub+0x5e>
 800095a:	0030      	movs	r0, r6
 800095c:	4460      	add	r0, ip
 800095e:	2501      	movs	r5, #1
 8000960:	0143      	lsls	r3, r0, #5
 8000962:	d400      	bmi.n	8000966 <__aeabi_fsub+0x2ea>
 8000964:	e76c      	b.n	8000840 <__aeabi_fsub+0x1c4>
 8000966:	2502      	movs	r5, #2
 8000968:	e6f2      	b.n	8000750 <__aeabi_fsub+0xd4>
 800096a:	4663      	mov	r3, ip
 800096c:	2501      	movs	r5, #1
 800096e:	1b98      	subs	r0, r3, r6
 8000970:	e6ae      	b.n	80006d0 <__aeabi_fsub+0x54>
 8000972:	2320      	movs	r3, #32
 8000974:	4664      	mov	r4, ip
 8000976:	4660      	mov	r0, ip
 8000978:	40fc      	lsrs	r4, r7
 800097a:	1bdf      	subs	r7, r3, r7
 800097c:	40b8      	lsls	r0, r7
 800097e:	1e43      	subs	r3, r0, #1
 8000980:	4198      	sbcs	r0, r3
 8000982:	4320      	orrs	r0, r4
 8000984:	e79f      	b.n	80008c6 <__aeabi_fsub+0x24a>
 8000986:	0005      	movs	r5, r0
 8000988:	e75e      	b.n	8000848 <__aeabi_fsub+0x1cc>
 800098a:	464b      	mov	r3, r9
 800098c:	e771      	b.n	8000872 <__aeabi_fsub+0x1f6>
 800098e:	2320      	movs	r3, #32
 8000990:	4665      	mov	r5, ip
 8000992:	4660      	mov	r0, ip
 8000994:	40cd      	lsrs	r5, r1
 8000996:	1a59      	subs	r1, r3, r1
 8000998:	4088      	lsls	r0, r1
 800099a:	1e43      	subs	r3, r0, #1
 800099c:	4198      	sbcs	r0, r3
 800099e:	4328      	orrs	r0, r5
 80009a0:	e71c      	b.n	80007dc <__aeabi_fsub+0x160>
 80009a2:	4663      	mov	r3, ip
 80009a4:	000c      	movs	r4, r1
 80009a6:	2501      	movs	r5, #1
 80009a8:	1af0      	subs	r0, r6, r3
 80009aa:	e691      	b.n	80006d0 <__aeabi_fsub+0x54>
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d095      	beq.n	80008dc <__aeabi_fsub+0x260>
 80009b0:	000c      	movs	r4, r1
 80009b2:	464f      	mov	r7, r9
 80009b4:	2200      	movs	r2, #0
 80009b6:	e6ac      	b.n	8000712 <__aeabi_fsub+0x96>
 80009b8:	464b      	mov	r3, r9
 80009ba:	000d      	movs	r5, r1
 80009bc:	e744      	b.n	8000848 <__aeabi_fsub+0x1cc>
 80009be:	464f      	mov	r7, r9
 80009c0:	2200      	movs	r2, #0
 80009c2:	e6a6      	b.n	8000712 <__aeabi_fsub+0x96>
 80009c4:	fbffffff 	.word	0xfbffffff
 80009c8:	7dffffff 	.word	0x7dffffff
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_fsub+0x356>
 80009d0:	e736      	b.n	8000840 <__aeabi_fsub+0x1c4>
 80009d2:	2400      	movs	r4, #0
 80009d4:	2700      	movs	r7, #0
 80009d6:	e69c      	b.n	8000712 <__aeabi_fsub+0x96>

080009d8 <__aeabi_f2iz>:
 80009d8:	0241      	lsls	r1, r0, #9
 80009da:	0042      	lsls	r2, r0, #1
 80009dc:	0fc3      	lsrs	r3, r0, #31
 80009de:	0a49      	lsrs	r1, r1, #9
 80009e0:	2000      	movs	r0, #0
 80009e2:	0e12      	lsrs	r2, r2, #24
 80009e4:	2a7e      	cmp	r2, #126	; 0x7e
 80009e6:	dd03      	ble.n	80009f0 <__aeabi_f2iz+0x18>
 80009e8:	2a9d      	cmp	r2, #157	; 0x9d
 80009ea:	dd02      	ble.n	80009f2 <__aeabi_f2iz+0x1a>
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <__aeabi_f2iz+0x3c>)
 80009ee:	1898      	adds	r0, r3, r2
 80009f0:	4770      	bx	lr
 80009f2:	2080      	movs	r0, #128	; 0x80
 80009f4:	0400      	lsls	r0, r0, #16
 80009f6:	4301      	orrs	r1, r0
 80009f8:	2a95      	cmp	r2, #149	; 0x95
 80009fa:	dc07      	bgt.n	8000a0c <__aeabi_f2iz+0x34>
 80009fc:	2096      	movs	r0, #150	; 0x96
 80009fe:	1a82      	subs	r2, r0, r2
 8000a00:	40d1      	lsrs	r1, r2
 8000a02:	4248      	negs	r0, r1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f3      	bne.n	80009f0 <__aeabi_f2iz+0x18>
 8000a08:	0008      	movs	r0, r1
 8000a0a:	e7f1      	b.n	80009f0 <__aeabi_f2iz+0x18>
 8000a0c:	3a96      	subs	r2, #150	; 0x96
 8000a0e:	4091      	lsls	r1, r2
 8000a10:	e7f7      	b.n	8000a02 <__aeabi_f2iz+0x2a>
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	7fffffff 	.word	0x7fffffff

08000a18 <__aeabi_i2f>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d013      	beq.n	8000a46 <__aeabi_i2f+0x2e>
 8000a1e:	17c3      	asrs	r3, r0, #31
 8000a20:	18c6      	adds	r6, r0, r3
 8000a22:	405e      	eors	r6, r3
 8000a24:	0fc4      	lsrs	r4, r0, #31
 8000a26:	0030      	movs	r0, r6
 8000a28:	f000 f886 	bl	8000b38 <__clzsi2>
 8000a2c:	239e      	movs	r3, #158	; 0x9e
 8000a2e:	0005      	movs	r5, r0
 8000a30:	1a1b      	subs	r3, r3, r0
 8000a32:	2b96      	cmp	r3, #150	; 0x96
 8000a34:	dc0f      	bgt.n	8000a56 <__aeabi_i2f+0x3e>
 8000a36:	2808      	cmp	r0, #8
 8000a38:	dd01      	ble.n	8000a3e <__aeabi_i2f+0x26>
 8000a3a:	3d08      	subs	r5, #8
 8000a3c:	40ae      	lsls	r6, r5
 8000a3e:	0276      	lsls	r6, r6, #9
 8000a40:	0a76      	lsrs	r6, r6, #9
 8000a42:	b2d8      	uxtb	r0, r3
 8000a44:	e002      	b.n	8000a4c <__aeabi_i2f+0x34>
 8000a46:	2400      	movs	r4, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	2600      	movs	r6, #0
 8000a4c:	05c0      	lsls	r0, r0, #23
 8000a4e:	4330      	orrs	r0, r6
 8000a50:	07e4      	lsls	r4, r4, #31
 8000a52:	4320      	orrs	r0, r4
 8000a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a56:	2b99      	cmp	r3, #153	; 0x99
 8000a58:	dd0c      	ble.n	8000a74 <__aeabi_i2f+0x5c>
 8000a5a:	2205      	movs	r2, #5
 8000a5c:	0031      	movs	r1, r6
 8000a5e:	1a12      	subs	r2, r2, r0
 8000a60:	40d1      	lsrs	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	0001      	movs	r1, r0
 8000a66:	0030      	movs	r0, r6
 8000a68:	311b      	adds	r1, #27
 8000a6a:	4088      	lsls	r0, r1
 8000a6c:	1e41      	subs	r1, r0, #1
 8000a6e:	4188      	sbcs	r0, r1
 8000a70:	4302      	orrs	r2, r0
 8000a72:	0016      	movs	r6, r2
 8000a74:	2d05      	cmp	r5, #5
 8000a76:	dc12      	bgt.n	8000a9e <__aeabi_i2f+0x86>
 8000a78:	0031      	movs	r1, r6
 8000a7a:	4f0d      	ldr	r7, [pc, #52]	; (8000ab0 <__aeabi_i2f+0x98>)
 8000a7c:	4039      	ands	r1, r7
 8000a7e:	0772      	lsls	r2, r6, #29
 8000a80:	d009      	beq.n	8000a96 <__aeabi_i2f+0x7e>
 8000a82:	200f      	movs	r0, #15
 8000a84:	4030      	ands	r0, r6
 8000a86:	2804      	cmp	r0, #4
 8000a88:	d005      	beq.n	8000a96 <__aeabi_i2f+0x7e>
 8000a8a:	3104      	adds	r1, #4
 8000a8c:	014a      	lsls	r2, r1, #5
 8000a8e:	d502      	bpl.n	8000a96 <__aeabi_i2f+0x7e>
 8000a90:	239f      	movs	r3, #159	; 0x9f
 8000a92:	4039      	ands	r1, r7
 8000a94:	1b5b      	subs	r3, r3, r5
 8000a96:	0189      	lsls	r1, r1, #6
 8000a98:	0a4e      	lsrs	r6, r1, #9
 8000a9a:	b2d8      	uxtb	r0, r3
 8000a9c:	e7d6      	b.n	8000a4c <__aeabi_i2f+0x34>
 8000a9e:	1f6a      	subs	r2, r5, #5
 8000aa0:	4096      	lsls	r6, r2
 8000aa2:	0031      	movs	r1, r6
 8000aa4:	4f02      	ldr	r7, [pc, #8]	; (8000ab0 <__aeabi_i2f+0x98>)
 8000aa6:	4039      	ands	r1, r7
 8000aa8:	0772      	lsls	r2, r6, #29
 8000aaa:	d0f4      	beq.n	8000a96 <__aeabi_i2f+0x7e>
 8000aac:	e7e9      	b.n	8000a82 <__aeabi_i2f+0x6a>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	fbffffff 	.word	0xfbffffff

08000ab4 <__aeabi_ui2f>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	1e05      	subs	r5, r0, #0
 8000ab8:	d00e      	beq.n	8000ad8 <__aeabi_ui2f+0x24>
 8000aba:	f000 f83d 	bl	8000b38 <__clzsi2>
 8000abe:	239e      	movs	r3, #158	; 0x9e
 8000ac0:	0004      	movs	r4, r0
 8000ac2:	1a1b      	subs	r3, r3, r0
 8000ac4:	2b96      	cmp	r3, #150	; 0x96
 8000ac6:	dc0c      	bgt.n	8000ae2 <__aeabi_ui2f+0x2e>
 8000ac8:	2808      	cmp	r0, #8
 8000aca:	dd01      	ble.n	8000ad0 <__aeabi_ui2f+0x1c>
 8000acc:	3c08      	subs	r4, #8
 8000ace:	40a5      	lsls	r5, r4
 8000ad0:	026d      	lsls	r5, r5, #9
 8000ad2:	0a6d      	lsrs	r5, r5, #9
 8000ad4:	b2d8      	uxtb	r0, r3
 8000ad6:	e001      	b.n	8000adc <__aeabi_ui2f+0x28>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	2500      	movs	r5, #0
 8000adc:	05c0      	lsls	r0, r0, #23
 8000ade:	4328      	orrs	r0, r5
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2b99      	cmp	r3, #153	; 0x99
 8000ae4:	dd09      	ble.n	8000afa <__aeabi_ui2f+0x46>
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	0029      	movs	r1, r5
 8000aea:	321b      	adds	r2, #27
 8000aec:	4091      	lsls	r1, r2
 8000aee:	1e4a      	subs	r2, r1, #1
 8000af0:	4191      	sbcs	r1, r2
 8000af2:	2205      	movs	r2, #5
 8000af4:	1a12      	subs	r2, r2, r0
 8000af6:	40d5      	lsrs	r5, r2
 8000af8:	430d      	orrs	r5, r1
 8000afa:	2c05      	cmp	r4, #5
 8000afc:	dc12      	bgt.n	8000b24 <__aeabi_ui2f+0x70>
 8000afe:	0029      	movs	r1, r5
 8000b00:	4e0c      	ldr	r6, [pc, #48]	; (8000b34 <__aeabi_ui2f+0x80>)
 8000b02:	4031      	ands	r1, r6
 8000b04:	076a      	lsls	r2, r5, #29
 8000b06:	d009      	beq.n	8000b1c <__aeabi_ui2f+0x68>
 8000b08:	200f      	movs	r0, #15
 8000b0a:	4028      	ands	r0, r5
 8000b0c:	2804      	cmp	r0, #4
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_ui2f+0x68>
 8000b10:	3104      	adds	r1, #4
 8000b12:	014a      	lsls	r2, r1, #5
 8000b14:	d502      	bpl.n	8000b1c <__aeabi_ui2f+0x68>
 8000b16:	239f      	movs	r3, #159	; 0x9f
 8000b18:	4031      	ands	r1, r6
 8000b1a:	1b1b      	subs	r3, r3, r4
 8000b1c:	0189      	lsls	r1, r1, #6
 8000b1e:	0a4d      	lsrs	r5, r1, #9
 8000b20:	b2d8      	uxtb	r0, r3
 8000b22:	e7db      	b.n	8000adc <__aeabi_ui2f+0x28>
 8000b24:	1f62      	subs	r2, r4, #5
 8000b26:	4095      	lsls	r5, r2
 8000b28:	0029      	movs	r1, r5
 8000b2a:	4e02      	ldr	r6, [pc, #8]	; (8000b34 <__aeabi_ui2f+0x80>)
 8000b2c:	4031      	ands	r1, r6
 8000b2e:	076a      	lsls	r2, r5, #29
 8000b30:	d0f4      	beq.n	8000b1c <__aeabi_ui2f+0x68>
 8000b32:	e7e9      	b.n	8000b08 <__aeabi_ui2f+0x54>
 8000b34:	fbffffff 	.word	0xfbffffff

08000b38 <__clzsi2>:
 8000b38:	211c      	movs	r1, #28
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	041b      	lsls	r3, r3, #16
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	d301      	bcc.n	8000b46 <__clzsi2+0xe>
 8000b42:	0c00      	lsrs	r0, r0, #16
 8000b44:	3910      	subs	r1, #16
 8000b46:	0a1b      	lsrs	r3, r3, #8
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d301      	bcc.n	8000b50 <__clzsi2+0x18>
 8000b4c:	0a00      	lsrs	r0, r0, #8
 8000b4e:	3908      	subs	r1, #8
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	4298      	cmp	r0, r3
 8000b54:	d301      	bcc.n	8000b5a <__clzsi2+0x22>
 8000b56:	0900      	lsrs	r0, r0, #4
 8000b58:	3904      	subs	r1, #4
 8000b5a:	a202      	add	r2, pc, #8	; (adr r2, 8000b64 <__clzsi2+0x2c>)
 8000b5c:	5c10      	ldrb	r0, [r2, r0]
 8000b5e:	1840      	adds	r0, r0, r1
 8000b60:	4770      	bx	lr
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	02020304 	.word	0x02020304
 8000b68:	01010101 	.word	0x01010101
	...

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 fffa 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f83a 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 fa26 	bl	8000fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b84:	f000 fa06 	bl	8000f94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b88:	f000 f9d0 	bl	8000f2c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000b8c:	f000 f8e2 	bl	8000d54 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000b90:	f000 f878 	bl	8000c84 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b94:	f000 f91e 	bl	8000dd4 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000b98:	f000 f978 	bl	8000e8c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //calibrate ADC on start-up for better accuracy
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <main+0x68>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 ffd4 	bl	8002b4c <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <main+0x6c>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f003 fdb7 	bl	800471c <HAL_TIM_PWM_Start>
  //current_state = POWER_ON;
  //startup_initialisation();
  HAL_GPIO_WritePin(GPIOB, RED_LED, GPIO_PIN_SET);
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <main+0x70>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	f002 fd32 	bl	8003620 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA (&hadc1, &pot_reading, 1);
 8000bbc:	490a      	ldr	r1, [pc, #40]	; (8000be8 <main+0x74>)
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <main+0x68>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f001 fb5a 	bl	800227c <HAL_ADC_Start_DMA>
	  TIM14->CCR1 = 4095;//set duty_cycle to 100%
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <main+0x78>)
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <main+0x7c>)
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
	  UART_output();
 8000bce:	f000 fabf 	bl	8001150 <UART_output>
	  TIM14->CCR1 = 0;//set duty_cycle tp 0%
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <main+0x78>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_ADC_Start_DMA (&hadc1, &pot_reading, 1);
 8000bd8:	e7f0      	b.n	8000bbc <main+0x48>
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	2000008c 	.word	0x2000008c
 8000be0:	200001ec 	.word	0x200001ec
 8000be4:	50000400 	.word	0x50000400
 8000be8:	200002d4 	.word	0x200002d4
 8000bec:	40002000 	.word	0x40002000
 8000bf0:	00000fff 	.word	0x00000fff

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b093      	sub	sp, #76	; 0x4c
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	2414      	movs	r4, #20
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2334      	movs	r3, #52	; 0x34
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f005 fa97 	bl	8006138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2310      	movs	r3, #16
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f005 fa90 	bl	8006138 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 fe99 	bl	8003954 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2202      	movs	r2, #2
 8000c26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0052      	lsls	r2, r2, #1
 8000c2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2240      	movs	r2, #64	; 0x40
 8000c3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f002 fed1 	bl	80039ec <HAL_RCC_OscConfig>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c4e:	f000 fd37 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f003 f9cc 	bl	800400c <HAL_RCC_ClockConfig>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c78:	f000 fd22 	bl	80016c0 <Error_Handler>
  }
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b013      	add	sp, #76	; 0x4c
 8000c82:	bd90      	pop	{r4, r7, pc}

08000c84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	230c      	movs	r3, #12
 8000c90:	001a      	movs	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	f005 fa50 	bl	8006138 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000c9a:	4a2c      	ldr	r2, [pc, #176]	; (8000d4c <MX_ADC1_Init+0xc8>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	05d2      	lsls	r2, r2, #23
 8000ca4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000ce4:	222c      	movs	r2, #44	; 0x2c
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000cfe:	223c      	movs	r2, #60	; 0x3c
 8000d00:	2100      	movs	r1, #0
 8000d02:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f001 f90d 	bl	8001f2c <HAL_ADC_Init>
 8000d12:	1e03      	subs	r3, r0, #0
 8000d14:	d001      	beq.n	8000d1a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d16:	f000 fcd3 	bl	80016c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <MX_ADC1_Init+0xcc>)
 8000d1e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	1d3a      	adds	r2, r7, #4
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_ADC1_Init+0xc4>)
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 fb40 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000d3c:	f000 fcc0 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b004      	add	sp, #16
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000008c 	.word	0x2000008c
 8000d4c:	40012400 	.word	0x40012400
 8000d50:	04000002 	.word	0x04000002

08000d54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <MX_I2C2_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <MX_I2C2_Init+0x7c>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000d90:	0018      	movs	r0, r3
 8000d92:	f002 fcb1 	bl	80036f8 <HAL_I2C_Init>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d9a:	f000 fc91 	bl	80016c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000da0:	2100      	movs	r1, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 fd3e 	bl	8003824 <HAL_I2CEx_ConfigAnalogFilter>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 fc88 	bl	80016c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <MX_I2C2_Init+0x74>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	0018      	movs	r0, r3
 8000db6:	f002 fd81 	bl	80038bc <HAL_I2CEx_ConfigDigitalFilter>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 fc7f 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000014c 	.word	0x2000014c
 8000dcc:	40005800 	.word	0x40005800
 8000dd0:	00303d5b 	.word	0x00303d5b

08000dd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	2310      	movs	r3, #16
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	2310      	movs	r3, #16
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f005 f9a7 	bl	8006138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	0018      	movs	r0, r3
 8000dee:	230c      	movs	r3, #12
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f005 f9a0 	bl	8006138 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000dfa:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <MX_TIM1_Init+0xb0>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e0c:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <MX_TIM1_Init+0xb4>)
 8000e0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e24:	0018      	movs	r0, r3
 8000e26:	f003 fbc1 	bl	80045ac <HAL_TIM_Base_Init>
 8000e2a:	1e03      	subs	r3, r0, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000e2e:	f000 fc47 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	2110      	movs	r1, #16
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	0152      	lsls	r2, r2, #5
 8000e3a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e3c:	187a      	adds	r2, r7, r1
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e40:	0011      	movs	r1, r2
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 fe42 	bl	8004acc <HAL_TIM_ConfigClockSource>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e4c:	f000 fc38 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e62:	1d3a      	adds	r2, r7, #4
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_TIM1_Init+0xac>)
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f004 facd 	bl	8005408 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e72:	f000 fc25 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b008      	add	sp, #32
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	200001a0 	.word	0x200001a0
 8000e84:	40012c00 	.word	0x40012c00
 8000e88:	0000ffff 	.word	0x0000ffff

08000e8c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	0018      	movs	r0, r3
 8000e96:	231c      	movs	r3, #28
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f005 f94c 	bl	8006138 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000ea2:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <MX_TIM14_Init+0x98>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4095;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <MX_TIM14_Init+0x9c>)
 8000eb6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f003 fb70 	bl	80045ac <HAL_TIM_Base_Init>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000ed0:	f000 fbf6 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f003 fbc0 	bl	800465c <HAL_TIM_PWM_Init>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000ee0:	f000 fbee 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2260      	movs	r2, #96	; 0x60
 8000ee8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f003 fce2 	bl	80048cc <HAL_TIM_PWM_ConfigChannel>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000f0c:	f000 fbd8 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <MX_TIM14_Init+0x94>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fd0a 	bl	800192c <HAL_TIM_MspPostInit>

}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b008      	add	sp, #32
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200001ec 	.word	0x200001ec
 8000f24:	40002000 	.word	0x40002000
 8000f28:	00000fff 	.word	0x00000fff

08000f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <MX_USART2_UART_Init+0x64>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f38:	22e1      	movs	r2, #225	; 0xe1
 8000f3a:	0252      	lsls	r2, r2, #9
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <MX_USART2_UART_Init+0x60>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f004 faa8 	bl	80054cc <HAL_UART_Init>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f80:	f000 fb9e 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	20000238 	.word	0x20000238
 8000f90:	40004400 	.word	0x40004400

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_DMA_Init+0x38>)
 8000f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_DMA_Init+0x38>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_DMA_Init+0x38>)
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000faa:	2201      	movs	r2, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2009      	movs	r0, #9
 8000fb8:	f001 ff4a 	bl	8002e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fbc:	2009      	movs	r0, #9
 8000fbe:	f001 ff5c 	bl	8002e7a <HAL_NVIC_EnableIRQ>

}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	240c      	movs	r4, #12
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	0018      	movs	r0, r3
 8000fdc:	2314      	movs	r3, #20
 8000fde:	001a      	movs	r2, r3
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f005 f8a9 	bl	8006138 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b55      	ldr	r3, [pc, #340]	; (800113c <MX_GPIO_Init+0x16c>)
 8000fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fea:	4b54      	ldr	r3, [pc, #336]	; (800113c <MX_GPIO_Init+0x16c>)
 8000fec:	2102      	movs	r1, #2
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff2:	4b52      	ldr	r3, [pc, #328]	; (800113c <MX_GPIO_Init+0x16c>)
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b4f      	ldr	r3, [pc, #316]	; (800113c <MX_GPIO_Init+0x16c>)
 8001000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001002:	4b4e      	ldr	r3, [pc, #312]	; (800113c <MX_GPIO_Init+0x16c>)
 8001004:	2104      	movs	r1, #4
 8001006:	430a      	orrs	r2, r1
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <MX_GPIO_Init+0x16c>)
 800100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100e:	2204      	movs	r2, #4
 8001010:	4013      	ands	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b49      	ldr	r3, [pc, #292]	; (800113c <MX_GPIO_Init+0x16c>)
 8001018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <MX_GPIO_Init+0x16c>)
 800101c:	2101      	movs	r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <MX_GPIO_Init+0x16c>)
 8001024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001026:	2201      	movs	r2, #1
 8001028:	4013      	ands	r3, r2
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_SET);
 800102e:	4944      	ldr	r1, [pc, #272]	; (8001140 <MX_GPIO_Init+0x170>)
 8001030:	4b44      	ldr	r3, [pc, #272]	; (8001144 <MX_GPIO_Init+0x174>)
 8001032:	2201      	movs	r2, #1
 8001034:	0018      	movs	r0, r3
 8001036:	f002 faf3 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	4842      	ldr	r0, [pc, #264]	; (8001148 <MX_GPIO_Init+0x178>)
 8001040:	2201      	movs	r2, #1
 8001042:	0019      	movs	r1, r3
 8001044:	f002 faec 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	0052      	lsls	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2284      	movs	r2, #132	; 0x84
 8001054:	0392      	lsls	r2, r2, #14
 8001056:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	193b      	adds	r3, r7, r4
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	193b      	adds	r3, r7, r4
 8001060:	4a38      	ldr	r2, [pc, #224]	; (8001144 <MX_GPIO_Init+0x174>)
 8001062:	0019      	movs	r1, r3
 8001064:	0010      	movs	r0, r2
 8001066:	f002 f977 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800106a:	0021      	movs	r1, r4
 800106c:	193b      	adds	r3, r7, r4
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001074:	000c      	movs	r4, r1
 8001076:	193b      	adds	r3, r7, r4
 8001078:	2211      	movs	r2, #17
 800107a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	193b      	adds	r3, r7, r4
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	2203      	movs	r2, #3
 8001086:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	193b      	adds	r3, r7, r4
 800108a:	4a2e      	ldr	r2, [pc, #184]	; (8001144 <MX_GPIO_Init+0x174>)
 800108c:	0019      	movs	r1, r3
 800108e:	0010      	movs	r0, r2
 8001090:	f002 f962 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001094:	0021      	movs	r1, r4
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	0212      	lsls	r2, r2, #8
 800109c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	000c      	movs	r4, r1
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2201      	movs	r2, #1
 80010a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2201      	movs	r2, #1
 80010aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	4a24      	ldr	r2, [pc, #144]	; (8001148 <MX_GPIO_Init+0x178>)
 80010b6:	0019      	movs	r1, r3
 80010b8:	0010      	movs	r0, r2
 80010ba:	f002 f94d 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2284      	movs	r2, #132	; 0x84
 80010c8:	0392      	lsls	r2, r2, #14
 80010ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	193a      	adds	r2, r7, r4
 80010d4:	23a0      	movs	r3, #160	; 0xa0
 80010d6:	05db      	lsls	r3, r3, #23
 80010d8:	0011      	movs	r1, r2
 80010da:	0018      	movs	r0, r3
 80010dc:	f002 f93c 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e0:	0021      	movs	r1, r4
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2201      	movs	r2, #1
 80010ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <MX_GPIO_Init+0x174>)
 80010fe:	0019      	movs	r1, r3
 8001100:	0010      	movs	r0, r2
 8001102:	f002 f929 	bl	8003358 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_GPIO_Init+0x17c>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_GPIO_Init+0x17c>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0309      	lsls	r1, r1, #12
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2005      	movs	r0, #5
 800111a:	f001 fe99 	bl	8002e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800111e:	2005      	movs	r0, #5
 8001120:	f001 feab 	bl	8002e7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2007      	movs	r0, #7
 800112a:	f001 fe91 	bl	8002e50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800112e:	2007      	movs	r0, #7
 8001130:	f001 fea3 	bl	8002e7a <HAL_NVIC_EnableIRQ>

}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b009      	add	sp, #36	; 0x24
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	00000201 	.word	0x00000201
 8001144:	50000400 	.word	0x50000400
 8001148:	50000800 	.word	0x50000800
 800114c:	40010000 	.word	0x40010000

08001150 <UART_output>:

//TODO ADD outputs from other sensors
/**
 * @brief outputs overview of all system parameters via UART interface
 */
void UART_output(){
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001152:	b097      	sub	sp, #92	; 0x5c
 8001154:	af00      	add	r7, sp, #0
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n ------------------",sizeof("\r\n ------------------"),10);
 8001156:	49f7      	ldr	r1, [pc, #988]	; (8001534 <UART_output+0x3e4>)
 8001158:	48f7      	ldr	r0, [pc, #988]	; (8001538 <UART_output+0x3e8>)
 800115a:	230a      	movs	r3, #10
 800115c:	2216      	movs	r2, #22
 800115e:	f004 fa0b 	bl	8005578 <HAL_UART_Transmit>
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Output current: ",sizeof("\r\n Output current: "),10);
 8001162:	49f6      	ldr	r1, [pc, #984]	; (800153c <UART_output+0x3ec>)
 8001164:	48f4      	ldr	r0, [pc, #976]	; (8001538 <UART_output+0x3e8>)
 8001166:	230a      	movs	r3, #10
 8001168:	2214      	movs	r2, #20
 800116a:	f004 fa05 	bl	8005578 <HAL_UART_Transmit>
    	 //float current = measure_current(WIRE_INA219);
    	 uint8_t output[7];
    	 sprintf(output,"%d.%02u", (int) out_current, (int) fabs(((out_current - (int) out_current ) * 100)));
 800116e:	4bf4      	ldr	r3, [pc, #976]	; (8001540 <UART_output+0x3f0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	1c18      	adds	r0, r3, #0
 8001174:	f7ff fc30 	bl	80009d8 <__aeabi_f2iz>
 8001178:	0005      	movs	r5, r0
 800117a:	4bf1      	ldr	r3, [pc, #964]	; (8001540 <UART_output+0x3f0>)
 800117c:	681c      	ldr	r4, [r3, #0]
 800117e:	4bf0      	ldr	r3, [pc, #960]	; (8001540 <UART_output+0x3f0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	1c18      	adds	r0, r3, #0
 8001184:	f7ff fc28 	bl	80009d8 <__aeabi_f2iz>
 8001188:	0003      	movs	r3, r0
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff fc44 	bl	8000a18 <__aeabi_i2f>
 8001190:	1c03      	adds	r3, r0, #0
 8001192:	1c19      	adds	r1, r3, #0
 8001194:	1c20      	adds	r0, r4, #0
 8001196:	f7ff fa71 	bl	800067c <__aeabi_fsub>
 800119a:	1c03      	adds	r3, r0, #0
 800119c:	49e9      	ldr	r1, [pc, #932]	; (8001544 <UART_output+0x3f4>)
 800119e:	1c18      	adds	r0, r3, #0
 80011a0:	f7ff f946 	bl	8000430 <__aeabi_fmul>
 80011a4:	1c03      	adds	r3, r0, #0
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	085b      	lsrs	r3, r3, #1
 80011aa:	1c18      	adds	r0, r3, #0
 80011ac:	f7ff fc14 	bl	80009d8 <__aeabi_f2iz>
 80011b0:	0003      	movs	r3, r0
 80011b2:	49e5      	ldr	r1, [pc, #916]	; (8001548 <UART_output+0x3f8>)
 80011b4:	2650      	movs	r6, #80	; 0x50
 80011b6:	19b8      	adds	r0, r7, r6
 80011b8:	002a      	movs	r2, r5
 80011ba:	f004 ffc5 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 80011be:	19b9      	adds	r1, r7, r6
 80011c0:	48dd      	ldr	r0, [pc, #884]	; (8001538 <UART_output+0x3e8>)
 80011c2:	230a      	movs	r3, #10
 80011c4:	2207      	movs	r2, #7
 80011c6:	f004 f9d7 	bl	8005578 <HAL_UART_Transmit>

    	 //current = measure_current(INPUT_INA219);
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Input current: ",sizeof("\r\n Input current: "),10);
 80011ca:	49e0      	ldr	r1, [pc, #896]	; (800154c <UART_output+0x3fc>)
 80011cc:	48da      	ldr	r0, [pc, #872]	; (8001538 <UART_output+0x3e8>)
 80011ce:	230a      	movs	r3, #10
 80011d0:	2213      	movs	r2, #19
 80011d2:	f004 f9d1 	bl	8005578 <HAL_UART_Transmit>
    	 sprintf(output,"%d.%02u", (int) in_current, (int) fabs(((in_current - (int) in_current ) * 100)));
 80011d6:	4bde      	ldr	r3, [pc, #888]	; (8001550 <UART_output+0x400>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1c18      	adds	r0, r3, #0
 80011dc:	f7ff fbfc 	bl	80009d8 <__aeabi_f2iz>
 80011e0:	0005      	movs	r5, r0
 80011e2:	4bdb      	ldr	r3, [pc, #876]	; (8001550 <UART_output+0x400>)
 80011e4:	681c      	ldr	r4, [r3, #0]
 80011e6:	4bda      	ldr	r3, [pc, #872]	; (8001550 <UART_output+0x400>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1c18      	adds	r0, r3, #0
 80011ec:	f7ff fbf4 	bl	80009d8 <__aeabi_f2iz>
 80011f0:	0003      	movs	r3, r0
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff fc10 	bl	8000a18 <__aeabi_i2f>
 80011f8:	1c03      	adds	r3, r0, #0
 80011fa:	1c19      	adds	r1, r3, #0
 80011fc:	1c20      	adds	r0, r4, #0
 80011fe:	f7ff fa3d 	bl	800067c <__aeabi_fsub>
 8001202:	1c03      	adds	r3, r0, #0
 8001204:	49cf      	ldr	r1, [pc, #828]	; (8001544 <UART_output+0x3f4>)
 8001206:	1c18      	adds	r0, r3, #0
 8001208:	f7ff f912 	bl	8000430 <__aeabi_fmul>
 800120c:	1c03      	adds	r3, r0, #0
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	085b      	lsrs	r3, r3, #1
 8001212:	1c18      	adds	r0, r3, #0
 8001214:	f7ff fbe0 	bl	80009d8 <__aeabi_f2iz>
 8001218:	0003      	movs	r3, r0
 800121a:	49cb      	ldr	r1, [pc, #812]	; (8001548 <UART_output+0x3f8>)
 800121c:	19b8      	adds	r0, r7, r6
 800121e:	002a      	movs	r2, r5
 8001220:	f004 ff92 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 8001224:	19b9      	adds	r1, r7, r6
 8001226:	48c4      	ldr	r0, [pc, #784]	; (8001538 <UART_output+0x3e8>)
 8001228:	230a      	movs	r3, #10
 800122a:	2207      	movs	r2, #7
 800122c:	f004 f9a4 	bl	8005578 <HAL_UART_Transmit>

    	 //gcvt(ambient_temp,6,output);
    	 //float ambient_temp = get_temp_TMP117(TMP_ADD_AMBIENT);
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Ambient temp: ",sizeof("\r\n Ambient temp: "),10);
 8001230:	49c8      	ldr	r1, [pc, #800]	; (8001554 <UART_output+0x404>)
 8001232:	48c1      	ldr	r0, [pc, #772]	; (8001538 <UART_output+0x3e8>)
 8001234:	230a      	movs	r3, #10
 8001236:	2212      	movs	r2, #18
 8001238:	f004 f99e 	bl	8005578 <HAL_UART_Transmit>
    	 sprintf(output,"%d.%02u", (int) TMP_AMBIENT, (int) fabs(((TMP_AMBIENT - (int) TMP_AMBIENT) * 100)));
 800123c:	4bc6      	ldr	r3, [pc, #792]	; (8001558 <UART_output+0x408>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	1c18      	adds	r0, r3, #0
 8001242:	f7ff fbc9 	bl	80009d8 <__aeabi_f2iz>
 8001246:	0005      	movs	r5, r0
 8001248:	4bc3      	ldr	r3, [pc, #780]	; (8001558 <UART_output+0x408>)
 800124a:	681c      	ldr	r4, [r3, #0]
 800124c:	4bc2      	ldr	r3, [pc, #776]	; (8001558 <UART_output+0x408>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	1c18      	adds	r0, r3, #0
 8001252:	f7ff fbc1 	bl	80009d8 <__aeabi_f2iz>
 8001256:	0003      	movs	r3, r0
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fbdd 	bl	8000a18 <__aeabi_i2f>
 800125e:	1c03      	adds	r3, r0, #0
 8001260:	1c19      	adds	r1, r3, #0
 8001262:	1c20      	adds	r0, r4, #0
 8001264:	f7ff fa0a 	bl	800067c <__aeabi_fsub>
 8001268:	1c03      	adds	r3, r0, #0
 800126a:	49b6      	ldr	r1, [pc, #728]	; (8001544 <UART_output+0x3f4>)
 800126c:	1c18      	adds	r0, r3, #0
 800126e:	f7ff f8df 	bl	8000430 <__aeabi_fmul>
 8001272:	1c03      	adds	r3, r0, #0
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	1c18      	adds	r0, r3, #0
 800127a:	f7ff fbad 	bl	80009d8 <__aeabi_f2iz>
 800127e:	0003      	movs	r3, r0
 8001280:	49b1      	ldr	r1, [pc, #708]	; (8001548 <UART_output+0x3f8>)
 8001282:	19b8      	adds	r0, r7, r6
 8001284:	002a      	movs	r2, r5
 8001286:	f004 ff5f 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 800128a:	19b9      	adds	r1, r7, r6
 800128c:	48aa      	ldr	r0, [pc, #680]	; (8001538 <UART_output+0x3e8>)
 800128e:	230a      	movs	r3, #10
 8001290:	2207      	movs	r2, #7
 8001292:	f004 f971 	bl	8005578 <HAL_UART_Transmit>

    	 //ambient_temp = get_temp_TMP117(TMP_ADD_INPUT);
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Input shunt temp: ",sizeof("\r\n Input shunt temp: "),10);
 8001296:	49b1      	ldr	r1, [pc, #708]	; (800155c <UART_output+0x40c>)
 8001298:	48a7      	ldr	r0, [pc, #668]	; (8001538 <UART_output+0x3e8>)
 800129a:	230a      	movs	r3, #10
 800129c:	2216      	movs	r2, #22
 800129e:	f004 f96b 	bl	8005578 <HAL_UART_Transmit>
    	 sprintf(output,"%d.%02u", (int) TMP_INPUT, (int) fabs(((TMP_INPUT- (int) TMP_INPUT) * 100)));
 80012a2:	4baf      	ldr	r3, [pc, #700]	; (8001560 <UART_output+0x410>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1c18      	adds	r0, r3, #0
 80012a8:	f7ff fb96 	bl	80009d8 <__aeabi_f2iz>
 80012ac:	0005      	movs	r5, r0
 80012ae:	4bac      	ldr	r3, [pc, #688]	; (8001560 <UART_output+0x410>)
 80012b0:	681c      	ldr	r4, [r3, #0]
 80012b2:	4bab      	ldr	r3, [pc, #684]	; (8001560 <UART_output+0x410>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1c18      	adds	r0, r3, #0
 80012b8:	f7ff fb8e 	bl	80009d8 <__aeabi_f2iz>
 80012bc:	0003      	movs	r3, r0
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fbaa 	bl	8000a18 <__aeabi_i2f>
 80012c4:	1c03      	adds	r3, r0, #0
 80012c6:	1c19      	adds	r1, r3, #0
 80012c8:	1c20      	adds	r0, r4, #0
 80012ca:	f7ff f9d7 	bl	800067c <__aeabi_fsub>
 80012ce:	1c03      	adds	r3, r0, #0
 80012d0:	499c      	ldr	r1, [pc, #624]	; (8001544 <UART_output+0x3f4>)
 80012d2:	1c18      	adds	r0, r3, #0
 80012d4:	f7ff f8ac 	bl	8000430 <__aeabi_fmul>
 80012d8:	1c03      	adds	r3, r0, #0
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	085b      	lsrs	r3, r3, #1
 80012de:	1c18      	adds	r0, r3, #0
 80012e0:	f7ff fb7a 	bl	80009d8 <__aeabi_f2iz>
 80012e4:	0003      	movs	r3, r0
 80012e6:	4998      	ldr	r1, [pc, #608]	; (8001548 <UART_output+0x3f8>)
 80012e8:	19b8      	adds	r0, r7, r6
 80012ea:	002a      	movs	r2, r5
 80012ec:	f004 ff2c 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 80012f0:	19b9      	adds	r1, r7, r6
 80012f2:	4891      	ldr	r0, [pc, #580]	; (8001538 <UART_output+0x3e8>)
 80012f4:	230a      	movs	r3, #10
 80012f6:	2207      	movs	r2, #7
 80012f8:	f004 f93e 	bl	8005578 <HAL_UART_Transmit>

    	 //ambient_temp = get_temp_TMP117(TMP_ADD_WIRE);
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Output shunt temp: ",sizeof("\r\n Output shunt temp: "),10);
 80012fc:	4999      	ldr	r1, [pc, #612]	; (8001564 <UART_output+0x414>)
 80012fe:	488e      	ldr	r0, [pc, #568]	; (8001538 <UART_output+0x3e8>)
 8001300:	230a      	movs	r3, #10
 8001302:	2217      	movs	r2, #23
 8001304:	f004 f938 	bl	8005578 <HAL_UART_Transmit>
    	 sprintf(output,"%d.%02u", (int) TMP_WIRE, (int) fabs(((TMP_WIRE - (int) TMP_WIRE) * 100)));
 8001308:	4b97      	ldr	r3, [pc, #604]	; (8001568 <UART_output+0x418>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	1c18      	adds	r0, r3, #0
 800130e:	f7ff fb63 	bl	80009d8 <__aeabi_f2iz>
 8001312:	0005      	movs	r5, r0
 8001314:	4b94      	ldr	r3, [pc, #592]	; (8001568 <UART_output+0x418>)
 8001316:	681c      	ldr	r4, [r3, #0]
 8001318:	4b93      	ldr	r3, [pc, #588]	; (8001568 <UART_output+0x418>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1c18      	adds	r0, r3, #0
 800131e:	f7ff fb5b 	bl	80009d8 <__aeabi_f2iz>
 8001322:	0003      	movs	r3, r0
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fb77 	bl	8000a18 <__aeabi_i2f>
 800132a:	1c03      	adds	r3, r0, #0
 800132c:	1c19      	adds	r1, r3, #0
 800132e:	1c20      	adds	r0, r4, #0
 8001330:	f7ff f9a4 	bl	800067c <__aeabi_fsub>
 8001334:	1c03      	adds	r3, r0, #0
 8001336:	4983      	ldr	r1, [pc, #524]	; (8001544 <UART_output+0x3f4>)
 8001338:	1c18      	adds	r0, r3, #0
 800133a:	f7ff f879 	bl	8000430 <__aeabi_fmul>
 800133e:	1c03      	adds	r3, r0, #0
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	085b      	lsrs	r3, r3, #1
 8001344:	1c18      	adds	r0, r3, #0
 8001346:	f7ff fb47 	bl	80009d8 <__aeabi_f2iz>
 800134a:	0003      	movs	r3, r0
 800134c:	497e      	ldr	r1, [pc, #504]	; (8001548 <UART_output+0x3f8>)
 800134e:	19b8      	adds	r0, r7, r6
 8001350:	002a      	movs	r2, r5
 8001352:	f004 fef9 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 8001356:	19b9      	adds	r1, r7, r6
 8001358:	4877      	ldr	r0, [pc, #476]	; (8001538 <UART_output+0x3e8>)
 800135a:	230a      	movs	r3, #10
 800135c:	2207      	movs	r2, #7
 800135e:	f004 f90b 	bl	8005578 <HAL_UART_Transmit>

    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Potentiometer reading: ",sizeof("\r\n Potentiometer reading: "),10);
 8001362:	4982      	ldr	r1, [pc, #520]	; (800156c <UART_output+0x41c>)
 8001364:	4874      	ldr	r0, [pc, #464]	; (8001538 <UART_output+0x3e8>)
 8001366:	230a      	movs	r3, #10
 8001368:	221b      	movs	r2, #27
 800136a:	f004 f905 	bl	8005578 <HAL_UART_Transmit>
    	 sprintf(output,"%d.%02u", (int) pot_reading, (int) fabs(((pot_reading - (int) pot_reading ) * 100)));
 800136e:	4b80      	ldr	r3, [pc, #512]	; (8001570 <UART_output+0x420>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	001a      	movs	r2, r3
 8001374:	4974      	ldr	r1, [pc, #464]	; (8001548 <UART_output+0x3f8>)
 8001376:	19b8      	adds	r0, r7, r6
 8001378:	2300      	movs	r3, #0
 800137a:	f004 fee5 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 800137e:	19b9      	adds	r1, r7, r6
 8001380:	486d      	ldr	r0, [pc, #436]	; (8001538 <UART_output+0x3e8>)
 8001382:	230a      	movs	r3, #10
 8001384:	2207      	movs	r2, #7
 8001386:	f004 f8f7 	bl	8005578 <HAL_UART_Transmit>

    	 //float CCR = TIM14->CCR1;
    	 //float duty_cycle = (CCR/POT_MAX_READING)*100;
    	 sprintf(output,"%d.%02u", (int) duty_cycle_global, (int) fabs(((duty_cycle_global - (int) duty_cycle_global) * 100)));
 800138a:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <UART_output+0x424>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	001a      	movs	r2, r3
 8001390:	496d      	ldr	r1, [pc, #436]	; (8001548 <UART_output+0x3f8>)
 8001392:	19b8      	adds	r0, r7, r6
 8001394:	2300      	movs	r3, #0
 8001396:	f004 fed7 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Current duty cycle: ",sizeof("\r\n Current duty cycle: "),10);
 800139a:	4977      	ldr	r1, [pc, #476]	; (8001578 <UART_output+0x428>)
 800139c:	4866      	ldr	r0, [pc, #408]	; (8001538 <UART_output+0x3e8>)
 800139e:	230a      	movs	r3, #10
 80013a0:	2218      	movs	r2, #24
 80013a2:	f004 f8e9 	bl	8005578 <HAL_UART_Transmit>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 80013a6:	19b9      	adds	r1, r7, r6
 80013a8:	4863      	ldr	r0, [pc, #396]	; (8001538 <UART_output+0x3e8>)
 80013aa:	230a      	movs	r3, #10
 80013ac:	2207      	movs	r2, #7
 80013ae:	f004 f8e3 	bl	8005578 <HAL_UART_Transmit>

    	 sprintf(output,"%d.%02u", (int) temp_setpoint, (int) fabs(((temp_setpoint - (int) temp_setpoint ) * 100)));
 80013b2:	4b72      	ldr	r3, [pc, #456]	; (800157c <UART_output+0x42c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	1c18      	adds	r0, r3, #0
 80013b8:	f7ff fb0e 	bl	80009d8 <__aeabi_f2iz>
 80013bc:	0005      	movs	r5, r0
 80013be:	4b6f      	ldr	r3, [pc, #444]	; (800157c <UART_output+0x42c>)
 80013c0:	681c      	ldr	r4, [r3, #0]
 80013c2:	4b6e      	ldr	r3, [pc, #440]	; (800157c <UART_output+0x42c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1c18      	adds	r0, r3, #0
 80013c8:	f7ff fb06 	bl	80009d8 <__aeabi_f2iz>
 80013cc:	0003      	movs	r3, r0
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff fb22 	bl	8000a18 <__aeabi_i2f>
 80013d4:	1c03      	adds	r3, r0, #0
 80013d6:	1c19      	adds	r1, r3, #0
 80013d8:	1c20      	adds	r0, r4, #0
 80013da:	f7ff f94f 	bl	800067c <__aeabi_fsub>
 80013de:	1c03      	adds	r3, r0, #0
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <UART_output+0x3f4>)
 80013e2:	1c18      	adds	r0, r3, #0
 80013e4:	f7ff f824 	bl	8000430 <__aeabi_fmul>
 80013e8:	1c03      	adds	r3, r0, #0
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	1c18      	adds	r0, r3, #0
 80013f0:	f7ff faf2 	bl	80009d8 <__aeabi_f2iz>
 80013f4:	0003      	movs	r3, r0
 80013f6:	4954      	ldr	r1, [pc, #336]	; (8001548 <UART_output+0x3f8>)
 80013f8:	19b8      	adds	r0, r7, r6
 80013fa:	002a      	movs	r2, r5
 80013fc:	f004 fea4 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Set point Temp: ",sizeof("\r\n Set point Temp: "),10);
 8001400:	495f      	ldr	r1, [pc, #380]	; (8001580 <UART_output+0x430>)
 8001402:	484d      	ldr	r0, [pc, #308]	; (8001538 <UART_output+0x3e8>)
 8001404:	230a      	movs	r3, #10
 8001406:	2214      	movs	r2, #20
 8001408:	f004 f8b6 	bl	8005578 <HAL_UART_Transmit>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 800140c:	19b9      	adds	r1, r7, r6
 800140e:	484a      	ldr	r0, [pc, #296]	; (8001538 <UART_output+0x3e8>)
 8001410:	230a      	movs	r3, #10
 8001412:	2207      	movs	r2, #7
 8001414:	f004 f8b0 	bl	8005578 <HAL_UART_Transmit>

    	 sprintf(output,"%d.%02u", (int) wire_temp_global, (int) fabs(((wire_temp_global - (int) wire_temp_global ) * 100)));
 8001418:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <UART_output+0x434>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1c18      	adds	r0, r3, #0
 800141e:	f7ff fadb 	bl	80009d8 <__aeabi_f2iz>
 8001422:	0005      	movs	r5, r0
 8001424:	4b57      	ldr	r3, [pc, #348]	; (8001584 <UART_output+0x434>)
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <UART_output+0x434>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1c18      	adds	r0, r3, #0
 800142e:	f7ff fad3 	bl	80009d8 <__aeabi_f2iz>
 8001432:	0003      	movs	r3, r0
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff faef 	bl	8000a18 <__aeabi_i2f>
 800143a:	1c03      	adds	r3, r0, #0
 800143c:	1c19      	adds	r1, r3, #0
 800143e:	1c20      	adds	r0, r4, #0
 8001440:	f7ff f91c 	bl	800067c <__aeabi_fsub>
 8001444:	1c03      	adds	r3, r0, #0
 8001446:	493f      	ldr	r1, [pc, #252]	; (8001544 <UART_output+0x3f4>)
 8001448:	1c18      	adds	r0, r3, #0
 800144a:	f7fe fff1 	bl	8000430 <__aeabi_fmul>
 800144e:	1c03      	adds	r3, r0, #0
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	085b      	lsrs	r3, r3, #1
 8001454:	1c18      	adds	r0, r3, #0
 8001456:	f7ff fabf 	bl	80009d8 <__aeabi_f2iz>
 800145a:	0003      	movs	r3, r0
 800145c:	493a      	ldr	r1, [pc, #232]	; (8001548 <UART_output+0x3f8>)
 800145e:	19b8      	adds	r0, r7, r6
 8001460:	002a      	movs	r2, r5
 8001462:	f004 fe71 	bl	8006148 <siprintf>
    	 HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Current Temp: ",sizeof("\r\n Current Temp: "),10);
 8001466:	4948      	ldr	r1, [pc, #288]	; (8001588 <UART_output+0x438>)
 8001468:	4833      	ldr	r0, [pc, #204]	; (8001538 <UART_output+0x3e8>)
 800146a:	230a      	movs	r3, #10
 800146c:	2212      	movs	r2, #18
 800146e:	f004 f883 	bl	8005578 <HAL_UART_Transmit>
    	 HAL_UART_Transmit(&huart2,output,sizeof(output),10);
 8001472:	19b9      	adds	r1, r7, r6
 8001474:	4830      	ldr	r0, [pc, #192]	; (8001538 <UART_output+0x3e8>)
 8001476:	230a      	movs	r3, #10
 8001478:	2207      	movs	r2, #7
 800147a:	f004 f87d 	bl	8005578 <HAL_UART_Transmit>

    	 char Power_on[]	= "Power On";
 800147e:	2344      	movs	r3, #68	; 0x44
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	4a42      	ldr	r2, [pc, #264]	; (800158c <UART_output+0x43c>)
 8001484:	ca03      	ldmia	r2!, {r0, r1}
 8001486:	c303      	stmia	r3!, {r0, r1}
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	701a      	strb	r2, [r3, #0]
    	 char Initialise[]	= "Initialise";
 800148c:	2338      	movs	r3, #56	; 0x38
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <UART_output+0x440>)
 8001492:	ca03      	ldmia	r2!, {r0, r1}
 8001494:	c303      	stmia	r3!, {r0, r1}
 8001496:	8811      	ldrh	r1, [r2, #0]
 8001498:	8019      	strh	r1, [r3, #0]
 800149a:	7892      	ldrb	r2, [r2, #2]
 800149c:	709a      	strb	r2, [r3, #2]
    	 char Settle[]		= "Settling State";
 800149e:	2328      	movs	r3, #40	; 0x28
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <UART_output+0x444>)
 80014a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014a6:	c313      	stmia	r3!, {r0, r1, r4}
 80014a8:	8811      	ldrh	r1, [r2, #0]
 80014aa:	8019      	strh	r1, [r3, #0]
 80014ac:	7892      	ldrb	r2, [r2, #2]
 80014ae:	709a      	strb	r2, [r3, #2]
    	 char SS[]			= "Steady-State";
 80014b0:	2318      	movs	r3, #24
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	4a38      	ldr	r2, [pc, #224]	; (8001598 <UART_output+0x448>)
 80014b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014b8:	c313      	stmia	r3!, {r0, r1, r4}
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	701a      	strb	r2, [r3, #0]
    	 char cutting[]		= "Cutting";
 80014be:	2310      	movs	r3, #16
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	4a36      	ldr	r2, [pc, #216]	; (800159c <UART_output+0x44c>)
 80014c4:	ca03      	ldmia	r2!, {r0, r1}
 80014c6:	c303      	stmia	r3!, {r0, r1}
    	 char cooldown[]	= "Cooldown";
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4a35      	ldr	r2, [pc, #212]	; (80015a0 <UART_output+0x450>)
 80014cc:	ca03      	ldmia	r2!, {r0, r1}
 80014ce:	c303      	stmia	r3!, {r0, r1}
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	701a      	strb	r2, [r3, #0]
    	 HAL_UART_Transmit_DMA(&huart2,(uint8_t *)"\r\n Current State: ",sizeof("\r\n Current State: "));
 80014d4:	4933      	ldr	r1, [pc, #204]	; (80015a4 <UART_output+0x454>)
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <UART_output+0x3e8>)
 80014d8:	2213      	movs	r2, #19
 80014da:	0018      	movs	r0, r3
 80014dc:	f004 f8e8 	bl	80056b0 <HAL_UART_Transmit_DMA>
    	 switch(current_state){
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <UART_output+0x458>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d872      	bhi.n	80015ce <UART_output+0x47e>
 80014e8:	009a      	lsls	r2, r3, #2
 80014ea:	4b30      	ldr	r3, [pc, #192]	; (80015ac <UART_output+0x45c>)
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	469f      	mov	pc, r3
    	 case POWER_ON:
    		 HAL_UART_Transmit_DMA(&huart2,(uint8_t *)Power_on,sizeof(Power_on));
 80014f2:	2344      	movs	r3, #68	; 0x44
 80014f4:	18f9      	adds	r1, r7, r3
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <UART_output+0x3e8>)
 80014f8:	2209      	movs	r2, #9
 80014fa:	0018      	movs	r0, r3
 80014fc:	f004 f8d8 	bl	80056b0 <HAL_UART_Transmit_DMA>
    		 break;
 8001500:	e065      	b.n	80015ce <UART_output+0x47e>
    	 case INITIALISE:
    		 HAL_UART_Transmit_DMA(&huart2,(uint8_t *)Initialise,sizeof(Initialise));
 8001502:	2338      	movs	r3, #56	; 0x38
 8001504:	18f9      	adds	r1, r7, r3
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <UART_output+0x3e8>)
 8001508:	220b      	movs	r2, #11
 800150a:	0018      	movs	r0, r3
 800150c:	f004 f8d0 	bl	80056b0 <HAL_UART_Transmit_DMA>
    		 break;
 8001510:	e05d      	b.n	80015ce <UART_output+0x47e>
    	 case SETTLING_STATE:
    		 HAL_UART_Transmit_DMA(&huart2,(uint8_t *)Settle,sizeof(Settle));
 8001512:	2328      	movs	r3, #40	; 0x28
 8001514:	18f9      	adds	r1, r7, r3
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <UART_output+0x3e8>)
 8001518:	220f      	movs	r2, #15
 800151a:	0018      	movs	r0, r3
 800151c:	f004 f8c8 	bl	80056b0 <HAL_UART_Transmit_DMA>
    		 break;
 8001520:	e055      	b.n	80015ce <UART_output+0x47e>
    	 case STEADY_STATE:
    		 HAL_UART_Transmit_DMA(&huart2,(uint8_t *)SS,sizeof(SS));
 8001522:	2318      	movs	r3, #24
 8001524:	18f9      	adds	r1, r7, r3
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <UART_output+0x3e8>)
 8001528:	220d      	movs	r2, #13
 800152a:	0018      	movs	r0, r3
 800152c:	f004 f8c0 	bl	80056b0 <HAL_UART_Transmit_DMA>
    		 break;
 8001530:	e04d      	b.n	80015ce <UART_output+0x47e>
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	08006a34 	.word	0x08006a34
 8001538:	20000238 	.word	0x20000238
 800153c:	08006a4c 	.word	0x08006a4c
 8001540:	200002dc 	.word	0x200002dc
 8001544:	42c80000 	.word	0x42c80000
 8001548:	08006a60 	.word	0x08006a60
 800154c:	08006a68 	.word	0x08006a68
 8001550:	200002e0 	.word	0x200002e0
 8001554:	08006a7c 	.word	0x08006a7c
 8001558:	200002ec 	.word	0x200002ec
 800155c:	08006a90 	.word	0x08006a90
 8001560:	200002e8 	.word	0x200002e8
 8001564:	08006aa8 	.word	0x08006aa8
 8001568:	200002e4 	.word	0x200002e4
 800156c:	08006ac0 	.word	0x08006ac0
 8001570:	200002d4 	.word	0x200002d4
 8001574:	200002cc 	.word	0x200002cc
 8001578:	08006adc 	.word	0x08006adc
 800157c:	200002d8 	.word	0x200002d8
 8001580:	08006af4 	.word	0x08006af4
 8001584:	200002d0 	.word	0x200002d0
 8001588:	08006b08 	.word	0x08006b08
 800158c:	08006b30 	.word	0x08006b30
 8001590:	08006b3c 	.word	0x08006b3c
 8001594:	08006b48 	.word	0x08006b48
 8001598:	08006b58 	.word	0x08006b58
 800159c:	08006b68 	.word	0x08006b68
 80015a0:	08006b70 	.word	0x08006b70
 80015a4:	08006b1c 	.word	0x08006b1c
 80015a8:	200002ce 	.word	0x200002ce
 80015ac:	08006bcc 	.word	0x08006bcc
    	 case CUTTING:
    		 HAL_UART_Transmit_DMA(&huart2,(uint8_t *)cutting,sizeof(cutting));
 80015b0:	2310      	movs	r3, #16
 80015b2:	18f9      	adds	r1, r7, r3
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <UART_output+0x488>)
 80015b6:	2208      	movs	r2, #8
 80015b8:	0018      	movs	r0, r3
 80015ba:	f004 f879 	bl	80056b0 <HAL_UART_Transmit_DMA>
    		 break;
 80015be:	e006      	b.n	80015ce <UART_output+0x47e>
    	 case COOLDOWN:
    		 HAL_UART_Transmit_DMA(&huart2,(uint8_t *)cooldown,sizeof(cooldown));
 80015c0:	1d39      	adds	r1, r7, #4
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <UART_output+0x488>)
 80015c4:	2209      	movs	r2, #9
 80015c6:	0018      	movs	r0, r3
 80015c8:	f004 f872 	bl	80056b0 <HAL_UART_Transmit_DMA>
    		 break;
 80015cc:	46c0      	nop			; (mov r8, r8)
    	 }


    	 //HAL_Delay(1000);//TODO remove this in actual application
    }
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b017      	add	sp, #92	; 0x5c
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	20000238 	.word	0x20000238

080015dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
   UART_output();
 80015e4:	f7ff fdb4 	bl	8001150 <UART_output>
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_GPIO_EXTI_Falling_Callback>:

/**
 * @brief function called when interrupt triggered on rising edge
 * @param GPIO pin on which interrupt occurred
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	0002      	movs	r2, r0
 80015f8:	1dbb      	adds	r3, r7, #6
 80015fa:	801a      	strh	r2, [r3, #0]

	switch(GPIO_Pin){
 80015fc:	1dbb      	adds	r3, r7, #6
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d011      	beq.n	8001628 <HAL_GPIO_EXTI_Falling_Callback+0x38>
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	0052      	lsls	r2, r2, #1
 8001608:	4293      	cmp	r3, r2
 800160a:	d114      	bne.n	8001636 <HAL_GPIO_EXTI_Falling_Callback+0x46>
	case PB2:

		HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n HERE",sizeof("\r\n HERE"),10);
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8001610:	230a      	movs	r3, #10
 8001612:	2208      	movs	r2, #8
 8001614:	f003 ffb0 	bl	8005578 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GREEN_LED);
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 800161e:	0019      	movs	r1, r3
 8001620:	0010      	movs	r0, r2
 8001622:	f002 f81a 	bl	800365a <HAL_GPIO_TogglePin>
		break;
 8001626:	e006      	b.n	8001636 <HAL_GPIO_EXTI_Falling_Callback+0x46>
	case PB1:
		HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n NOT",sizeof("\r\n NOT"),10);
 8001628:	4908      	ldr	r1, [pc, #32]	; (800164c <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 800162c:	230a      	movs	r3, #10
 800162e:	2207      	movs	r2, #7
 8001630:	f003 ffa2 	bl	8005578 <HAL_UART_Transmit>
		break;
 8001634:	46c0      	nop			; (mov r8, r8)
	}
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	08006b7c 	.word	0x08006b7c
 8001644:	20000238 	.word	0x20000238
 8001648:	50000800 	.word	0x50000800
 800164c:	08006b84 	.word	0x08006b84

08001650 <HAL_ADC_ConvCpltCallback>:

/**
 * Function called when buffer allocated to ADC connected to potentiometer full
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
        // Read & Update The ADC Result
    	//TIM14->CCR1 = pot_reading;
    	temp_setpoint=pot_temp();
 8001658:	f000 f80e 	bl	8001678 <pot_temp>
 800165c:	0003      	movs	r3, r0
 800165e:	0018      	movs	r0, r3
 8001660:	f7ff fa28 	bl	8000ab4 <__aeabi_ui2f>
 8001664:	1c02      	adds	r2, r0, #0
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_ADC_ConvCpltCallback+0x24>)
 8001668:	601a      	str	r2, [r3, #0]
		//temp_setpoint = pot_reading * scaling;
	}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	200002d8 	.word	0x200002d8

08001678 <pot_temp>:
  @brief	converts input from potentiometer to temperature set point
  * divides maximum pot reading = 4095 by maximum allowed temperature of heating element
  * @param
  * @retval uint8_t set point temperature
 */
uint16_t pot_temp(){
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
    	uint16_t set_temp = 0;
 800167e:	1dbb      	adds	r3, r7, #6
 8001680:	2200      	movs	r2, #0
 8001682:	801a      	strh	r2, [r3, #0]
    	float scaling = MAX_ALLOWED_TEMP/POT_MAX_READING;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <pot_temp+0x40>)
 8001686:	603b      	str	r3, [r7, #0]

    	set_temp = scaling*pot_reading;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <pot_temp+0x44>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff fa11 	bl	8000ab4 <__aeabi_ui2f>
 8001692:	1c03      	adds	r3, r0, #0
 8001694:	6839      	ldr	r1, [r7, #0]
 8001696:	1c18      	adds	r0, r3, #0
 8001698:	f7fe feca 	bl	8000430 <__aeabi_fmul>
 800169c:	1c03      	adds	r3, r0, #0
 800169e:	1dbc      	adds	r4, r7, #6
 80016a0:	1c18      	adds	r0, r3, #0
 80016a2:	f7fe fdfd 	bl	80002a0 <__aeabi_f2uiz>
 80016a6:	0003      	movs	r3, r0
 80016a8:	8023      	strh	r3, [r4, #0]
    	return set_temp;
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	881b      	ldrh	r3, [r3, #0]

    }
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b003      	add	sp, #12
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	3eb4cb4d 	.word	0x3eb4cb4d
 80016bc:	200002d4 	.word	0x200002d4

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x44>)
 80016d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_MspInit+0x44>)
 80016d8:	2101      	movs	r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x44>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2201      	movs	r2, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x44>)
 80016ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_MspInit+0x44>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0549      	lsls	r1, r1, #21
 80016f4:	430a      	orrs	r2, r1
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_MspInit+0x44>)
 80016fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	4013      	ands	r3, r2
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b091      	sub	sp, #68	; 0x44
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	232c      	movs	r3, #44	; 0x2c
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	0018      	movs	r0, r3
 8001722:	2314      	movs	r3, #20
 8001724:	001a      	movs	r2, r3
 8001726:	2100      	movs	r1, #0
 8001728:	f004 fd06 	bl	8006138 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	2414      	movs	r4, #20
 800172e:	193b      	adds	r3, r7, r4
 8001730:	0018      	movs	r0, r3
 8001732:	2318      	movs	r3, #24
 8001734:	001a      	movs	r2, r3
 8001736:	2100      	movs	r1, #0
 8001738:	f004 fcfe 	bl	8006138 <memset>
  if(hadc->Instance==ADC1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a35      	ldr	r2, [pc, #212]	; (8001818 <HAL_ADC_MspInit+0x104>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d164      	bne.n	8001810 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001746:	193b      	adds	r3, r7, r4
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	01d2      	lsls	r2, r2, #7
 800174c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800174e:	193b      	adds	r3, r7, r4
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001754:	193b      	adds	r3, r7, r4
 8001756:	0018      	movs	r0, r3
 8001758:	f002 fe02 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001760:	f7ff ffae 	bl	80016c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_ADC_MspInit+0x108>)
 8001766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_ADC_MspInit+0x108>)
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	0349      	lsls	r1, r1, #13
 800176e:	430a      	orrs	r2, r1
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_ADC_MspInit+0x108>)
 8001774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	035b      	lsls	r3, r3, #13
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_ADC_MspInit+0x108>)
 8001782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_ADC_MspInit+0x108>)
 8001786:	2101      	movs	r1, #1
 8001788:	430a      	orrs	r2, r1
 800178a:	635a      	str	r2, [r3, #52]	; 0x34
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_ADC_MspInit+0x108>)
 800178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001798:	212c      	movs	r1, #44	; 0x2c
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2202      	movs	r2, #2
 800179e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	2203      	movs	r2, #3
 80017a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	187a      	adds	r2, r7, r1
 80017ae:	23a0      	movs	r3, #160	; 0xa0
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f001 fdcf 	bl	8003358 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <HAL_ADC_MspInit+0x110>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017c2:	2205      	movs	r2, #5
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	0052      	lsls	r2, r2, #1
 80017de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	00d2      	lsls	r2, r2, #3
 80017e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017ea:	2220      	movs	r2, #32
 80017ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f001 fb5c 	bl	8002eb4 <HAL_DMA_Init>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001800:	f7ff ff5e 	bl	80016c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 8001808:	651a      	str	r2, [r3, #80]	; 0x50
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_ADC_MspInit+0x10c>)
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b011      	add	sp, #68	; 0x44
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	40012400 	.word	0x40012400
 800181c:	40021000 	.word	0x40021000
 8001820:	200000f0 	.word	0x200000f0
 8001824:	40020008 	.word	0x40020008

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b08b      	sub	sp, #44	; 0x2c
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	2414      	movs	r4, #20
 8001832:	193b      	adds	r3, r7, r4
 8001834:	0018      	movs	r0, r3
 8001836:	2314      	movs	r3, #20
 8001838:	001a      	movs	r2, r3
 800183a:	2100      	movs	r1, #0
 800183c:	f004 fc7c 	bl	8006138 <memset>
  if(hi2c->Instance==I2C2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <HAL_I2C_MspInit+0x90>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d131      	bne.n	80018ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_I2C_MspInit+0x94>)
 800184c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_I2C_MspInit+0x94>)
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_I2C_MspInit+0x94>)
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	2201      	movs	r2, #1
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001862:	193b      	adds	r3, r7, r4
 8001864:	22c0      	movs	r2, #192	; 0xc0
 8001866:	0152      	lsls	r2, r2, #5
 8001868:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	0021      	movs	r1, r4
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2212      	movs	r2, #18
 8001870:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2206      	movs	r2, #6
 8001882:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	187a      	adds	r2, r7, r1
 8001886:	23a0      	movs	r3, #160	; 0xa0
 8001888:	05db      	lsls	r3, r3, #23
 800188a:	0011      	movs	r1, r2
 800188c:	0018      	movs	r0, r3
 800188e:	f001 fd63 	bl	8003358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_I2C_MspInit+0x94>)
 8001894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_I2C_MspInit+0x94>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	03c9      	lsls	r1, r1, #15
 800189c:	430a      	orrs	r2, r1
 800189e:	63da      	str	r2, [r3, #60]	; 0x3c
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_I2C_MspInit+0x94>)
 80018a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	03db      	lsls	r3, r3, #15
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b00b      	add	sp, #44	; 0x2c
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40005800 	.word	0x40005800
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_TIM_Base_MspInit+0x60>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10e      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_TIM_Base_MspInit+0x64>)
 80018d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_TIM_Base_MspInit+0x64>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0109      	lsls	r1, r1, #4
 80018dc:	430a      	orrs	r2, r1
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_TIM_Base_MspInit+0x64>)
 80018e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80018ee:	e012      	b.n	8001916 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <HAL_TIM_Base_MspInit+0x68>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10d      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_TIM_Base_MspInit+0x64>)
 80018fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_TIM_Base_MspInit+0x64>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0209      	lsls	r1, r1, #8
 8001904:	430a      	orrs	r2, r1
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_TIM_Base_MspInit+0x64>)
 800190a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b004      	add	sp, #16
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	40012c00 	.word	0x40012c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40002000 	.word	0x40002000

0800192c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	240c      	movs	r4, #12
 8001936:	193b      	adds	r3, r7, r4
 8001938:	0018      	movs	r0, r3
 800193a:	2314      	movs	r3, #20
 800193c:	001a      	movs	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	f004 fbfa 	bl	8006138 <memset>
  if(htim->Instance==TIM14)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_TIM_MspPostInit+0x70>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d122      	bne.n	8001994 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_TIM_MspPostInit+0x74>)
 8001950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_TIM_MspPostInit+0x74>)
 8001954:	2101      	movs	r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_TIM_MspPostInit+0x74>)
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	2201      	movs	r2, #1
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001966:	0021      	movs	r1, r4
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2210      	movs	r2, #16
 800196c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2202      	movs	r2, #2
 8001972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2204      	movs	r2, #4
 8001984:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	187a      	adds	r2, r7, r1
 8001988:	23a0      	movs	r3, #160	; 0xa0
 800198a:	05db      	lsls	r3, r3, #23
 800198c:	0011      	movs	r1, r2
 800198e:	0018      	movs	r0, r3
 8001990:	f001 fce2 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b009      	add	sp, #36	; 0x24
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	40002000 	.word	0x40002000
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b08b      	sub	sp, #44	; 0x2c
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	2414      	movs	r4, #20
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	0018      	movs	r0, r3
 80019b2:	2314      	movs	r3, #20
 80019b4:	001a      	movs	r2, r3
 80019b6:	2100      	movs	r1, #0
 80019b8:	f004 fbbe 	bl	8006138 <memset>
  if(huart->Instance==USART2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_UART_MspInit+0x8c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d130      	bne.n	8001a28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_UART_MspInit+0x90>)
 80019c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_UART_MspInit+0x90>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0289      	lsls	r1, r1, #10
 80019d0:	430a      	orrs	r2, r1
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_UART_MspInit+0x90>)
 80019d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_UART_MspInit+0x90>)
 80019e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_UART_MspInit+0x90>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	430a      	orrs	r2, r1
 80019ec:	635a      	str	r2, [r3, #52]	; 0x34
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_UART_MspInit+0x90>)
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	2201      	movs	r2, #1
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fa:	0021      	movs	r1, r4
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2202      	movs	r2, #2
 8001a06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2201      	movs	r2, #1
 8001a18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	187a      	adds	r2, r7, r1
 8001a1c:	23a0      	movs	r3, #160	; 0xa0
 8001a1e:	05db      	lsls	r3, r3, #23
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f001 fc98 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b00b      	add	sp, #44	; 0x2c
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	40004400 	.word	0x40004400
 8001a34:	40021000 	.word	0x40021000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f8f2 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f001 fe10 	bl	8003690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f001 fe06 	bl	8003690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <DMA1_Channel1_IRQHandler+0x14>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f001 fb1e 	bl	80030d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	200000f0 	.word	0x200000f0

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	18d3      	adds	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f004 fb06 	bl	80060e4 <__errno>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	18d2      	adds	r2, r2, r3
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b006      	add	sp, #24
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20002000 	.word	0x20002000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	200002f0 	.word	0x200002f0
 8001b0c:	20000308 	.word	0x20000308

08001b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b20:	f7ff fff6 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	; (8001b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <LoopForever+0xe>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	; (8001b68 <LoopForever+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b4a:	f004 fad1 	bl	80060f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b4e:	f7ff f811 	bl	8000b74 <main>

08001b52 <LoopForever>:

LoopForever:
  b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   r0, =_estack
 8001b54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b60:	08006cec 	.word	0x08006cec
  ldr r2, =_sbss
 8001b64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b68:	20000308 	.word	0x20000308

08001b6c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_Init+0x3c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Init+0x3c>)
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	0049      	lsls	r1, r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f000 f810 	bl	8001bb0 <HAL_InitTick>
 8001b90:	1e03      	subs	r3, r0, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e001      	b.n	8001ba0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fd96 	bl	80016cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781b      	ldrb	r3, [r3, #0]
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40022000 	.word	0x40022000

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb8:	230f      	movs	r3, #15
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_InitTick+0x88>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d02b      	beq.n	8001c20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_InitTick+0x8c>)
 8001bca:	681c      	ldr	r4, [r3, #0]
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_InitTick+0x88>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	23fa      	movs	r3, #250	; 0xfa
 8001bd4:	0098      	lsls	r0, r3, #2
 8001bd6:	f7fe fa9d 	bl	8000114 <__udivsi3>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	0019      	movs	r1, r3
 8001bde:	0020      	movs	r0, r4
 8001be0:	f7fe fa98 	bl	8000114 <__udivsi3>
 8001be4:	0003      	movs	r3, r0
 8001be6:	0018      	movs	r0, r3
 8001be8:	f001 f957 	bl	8002e9a <HAL_SYSTICK_Config>
 8001bec:	1e03      	subs	r3, r0, #0
 8001bee:	d112      	bne.n	8001c16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d80a      	bhi.n	8001c0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f001 f926 	bl	8002e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_InitTick+0x90>)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e00d      	b.n	8001c28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e008      	b.n	8001c28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c16:	230f      	movs	r3, #15
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e003      	b.n	8001c28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c20:	230f      	movs	r3, #15
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c28:	230f      	movs	r3, #15
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b005      	add	sp, #20
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_IncTick+0x1c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x20>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	18d2      	adds	r2, r2, r3
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_IncTick+0x20>)
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	20000008 	.word	0x20000008
 8001c64:	200002f4 	.word	0x200002f4

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_GetTick+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	200002f4 	.word	0x200002f4

08001c7c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	fe3fffff 	.word	0xfe3fffff

08001ca4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	23e0      	movs	r3, #224	; 0xe0
 8001cb2:	045b      	lsls	r3, r3, #17
 8001cb4:	4013      	ands	r3, r2
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	2104      	movs	r1, #4
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	2107      	movs	r1, #7
 8001cd6:	4091      	lsls	r1, r2
 8001cd8:	000a      	movs	r2, r1
 8001cda:	43d2      	mvns	r2, r2
 8001cdc:	401a      	ands	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4099      	lsls	r1, r3
 8001ce8:	000b      	movs	r3, r1
 8001cea:	431a      	orrs	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b004      	add	sp, #16
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	2104      	movs	r1, #4
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	2107      	movs	r1, #7
 8001d0e:	4091      	lsls	r1, r2
 8001d10:	000a      	movs	r2, r1
 8001d12:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2104      	movs	r1, #4
 8001d18:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001d1a:	40da      	lsrs	r2, r3
 8001d1c:	0013      	movs	r3, r2
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4013      	ands	r3, r2
 8001d38:	d101      	bne.n	8001d3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	211f      	movs	r1, #31
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	210f      	movs	r1, #15
 8001d60:	4091      	lsls	r1, r2
 8001d62:	000a      	movs	r2, r1
 8001d64:	43d2      	mvns	r2, r2
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	4019      	ands	r1, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	201f      	movs	r0, #31
 8001d74:	4003      	ands	r3, r0
 8001d76:	4099      	lsls	r1, r3
 8001d78:	000b      	movs	r3, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d80:	46c0      	nop			; (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b004      	add	sp, #16
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	035b      	lsls	r3, r3, #13
 8001d9a:	0b5b      	lsrs	r3, r3, #13
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}

08001daa <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	0352      	lsls	r2, r2, #13
 8001dbc:	0b52      	lsrs	r2, r2, #13
 8001dbe:	43d2      	mvns	r2, r2
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	0212      	lsls	r2, r2, #8
 8001de4:	43d2      	mvns	r2, r2
 8001de6:	401a      	ands	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	400b      	ands	r3, r1
 8001df0:	4904      	ldr	r1, [pc, #16]	; (8001e04 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001df2:	400b      	ands	r3, r1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b004      	add	sp, #16
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	07ffff00 	.word	0x07ffff00

08001e08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <LL_ADC_EnableInternalRegulator+0x24>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	0552      	lsls	r2, r2, #21
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	6fffffe8 	.word	0x6fffffe8

08001e30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	055b      	lsls	r3, r3, #21
 8001e40:	401a      	ands	r2, r3
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	055b      	lsls	r3, r3, #21
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <LL_ADC_Enable+0x20>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	2201      	movs	r2, #1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e70:	46c0      	nop			; (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	7fffffe8 	.word	0x7fffffe8

08001e7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <LL_ADC_Disable+0x20>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	7fffffe8 	.word	0x7fffffe8

08001ea0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <LL_ADC_IsEnabled+0x18>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <LL_ADC_IsEnabled+0x1a>
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_IsDisableOngoing+0x18>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_IsDisableOngoing+0x1a>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <LL_ADC_REG_StartConversion+0x20>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	7fffffe8 	.word	0x7fffffe8

08001f08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2204      	movs	r2, #4
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d101      	bne.n	8001f20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b002      	add	sp, #8
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f34:	231f      	movs	r3, #31
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e17f      	b.n	8002252 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff fbd9 	bl	8001714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2254      	movs	r2, #84	; 0x54
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7ff ff5b 	bl	8001e30 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7ff ff40 	bl	8001e08 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f88:	4bb4      	ldr	r3, [pc, #720]	; (800225c <HAL_ADC_Init+0x330>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	49b4      	ldr	r1, [pc, #720]	; (8002260 <HAL_ADC_Init+0x334>)
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7fe f8c0 	bl	8000114 <__udivsi3>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3301      	adds	r3, #1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f9c:	e002      	b.n	8001fa4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f9      	bne.n	8001f9e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff ff3e 	bl	8001e30 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb4:	1e03      	subs	r3, r0, #0
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fd0:	231f      	movs	r3, #31
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff ff93 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	2210      	movs	r2, #16
 8001fec:	4013      	ands	r3, r2
 8001fee:	d000      	beq.n	8001ff2 <HAL_ADC_Init+0xc6>
 8001ff0:	e122      	b.n	8002238 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d000      	beq.n	8001ffa <HAL_ADC_Init+0xce>
 8001ff8:	e11e      	b.n	8002238 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	4a99      	ldr	r2, [pc, #612]	; (8002264 <HAL_ADC_Init+0x338>)
 8002000:	4013      	ands	r3, r2
 8002002:	2202      	movs	r2, #2
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0018      	movs	r0, r3
 8002010:	f7ff ff46 	bl	8001ea0 <LL_ADC_IsEnabled>
 8002014:	1e03      	subs	r3, r0, #0
 8002016:	d000      	beq.n	800201a <HAL_ADC_Init+0xee>
 8002018:	e0ad      	b.n	8002176 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7e1b      	ldrb	r3, [r3, #24]
 8002022:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002024:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7e5b      	ldrb	r3, [r3, #25]
 800202a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800202c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7e9b      	ldrb	r3, [r3, #26]
 8002032:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002034:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_ADC_Init+0x118>
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	015b      	lsls	r3, r3, #5
 8002042:	e000      	b.n	8002046 <HAL_ADC_Init+0x11a>
 8002044:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002046:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800204c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da04      	bge.n	8002060 <HAL_ADC_Init+0x134>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	e001      	b.n	8002064 <HAL_ADC_Init+0x138>
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002064:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	5c5b      	ldrb	r3, [r3, r1]
 800206c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800206e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d115      	bne.n	80020ac <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7e9b      	ldrb	r3, [r3, #26]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	0252      	lsls	r2, r2, #9
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	e00b      	b.n	80020ac <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	2220      	movs	r2, #32
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2201      	movs	r2, #1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b8:	23e0      	movs	r3, #224	; 0xe0
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80020c2:	4313      	orrs	r3, r2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_ADC_Init+0x33c>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	0f9b      	lsrs	r3, r3, #30
 80020e6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020ec:	4313      	orrs	r3, r2
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	223c      	movs	r2, #60	; 0x3c
 80020f8:	5c9b      	ldrb	r3, [r3, r2]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d111      	bne.n	8002122 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0f9b      	lsrs	r3, r3, #30
 8002104:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800210a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002110:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002116:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	2201      	movs	r2, #1
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4a50      	ldr	r2, [pc, #320]	; (800226c <HAL_ADC_Init+0x340>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	430a      	orrs	r2, r1
 8002136:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	061b      	lsls	r3, r3, #24
 8002140:	429a      	cmp	r2, r3
 8002142:	d018      	beq.n	8002176 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	05db      	lsls	r3, r3, #23
 800214c:	429a      	cmp	r2, r3
 800214e:	d012      	beq.n	8002176 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	061b      	lsls	r3, r3, #24
 8002158:	429a      	cmp	r2, r3
 800215a:	d00c      	beq.n	8002176 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800215c:	4b44      	ldr	r3, [pc, #272]	; (8002270 <HAL_ADC_Init+0x344>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a44      	ldr	r2, [pc, #272]	; (8002274 <HAL_ADC_Init+0x348>)
 8002162:	4013      	ands	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	23f0      	movs	r3, #240	; 0xf0
 800216c:	039b      	lsls	r3, r3, #14
 800216e:	401a      	ands	r2, r3
 8002170:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <HAL_ADC_Init+0x344>)
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	001a      	movs	r2, r3
 8002180:	2100      	movs	r1, #0
 8002182:	f7ff fd9c 	bl	8001cbe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	493a      	ldr	r1, [pc, #232]	; (8002278 <HAL_ADC_Init+0x34c>)
 8002190:	001a      	movs	r2, r3
 8002192:	f7ff fd94 	bl	8001cbe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2110      	movs	r1, #16
 80021aa:	4249      	negs	r1, r1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
 80021b0:	e018      	b.n	80021e4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	039b      	lsls	r3, r3, #14
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d112      	bne.n	80021e4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	221c      	movs	r2, #28
 80021ce:	4013      	ands	r3, r2
 80021d0:	2210      	movs	r2, #16
 80021d2:	4252      	negs	r2, r2
 80021d4:	409a      	lsls	r2, r3
 80021d6:	0011      	movs	r1, r2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2100      	movs	r1, #0
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff fd84 	bl	8001cf8 <LL_ADC_GetSamplingTimeCommonChannels>
 80021f0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d10b      	bne.n	8002212 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	2203      	movs	r2, #3
 8002206:	4393      	bics	r3, r2
 8002208:	2201      	movs	r2, #1
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002210:	e01c      	b.n	800224c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	2212      	movs	r2, #18
 8002218:	4393      	bics	r3, r2
 800221a:	2210      	movs	r2, #16
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	2201      	movs	r2, #1
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800222e:	231f      	movs	r3, #31
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002236:	e009      	b.n	800224c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	2210      	movs	r2, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002244:	231f      	movs	r3, #31
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781b      	ldrb	r3, [r3, #0]
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b008      	add	sp, #32
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	20000000 	.word	0x20000000
 8002260:	00030d40 	.word	0x00030d40
 8002264:	fffffefd 	.word	0xfffffefd
 8002268:	fffe0201 	.word	0xfffe0201
 800226c:	1ffffc02 	.word	0x1ffffc02
 8002270:	40012708 	.word	0x40012708
 8002274:	ffc3ffff 	.word	0xffc3ffff
 8002278:	07ffff04 	.word	0x07ffff04

0800227c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff fe3b 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d16c      	bne.n	8002370 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2254      	movs	r2, #84	; 0x54
 800229a:	5c9b      	ldrb	r3, [r3, r2]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_Start_DMA+0x28>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e06c      	b.n	800237e <HAL_ADC_Start_DMA+0x102>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2254      	movs	r2, #84	; 0x54
 80022a8:	2101      	movs	r1, #1
 80022aa:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4013      	ands	r3, r2
 80022b6:	d113      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7ff fdef 	bl	8001ea0 <LL_ADC_IsEnabled>
 80022c2:	1e03      	subs	r3, r0, #0
 80022c4:	d004      	beq.n	80022d0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff fdd6 	bl	8001e7c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2101      	movs	r1, #1
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022e0:	2517      	movs	r5, #23
 80022e2:	197c      	adds	r4, r7, r5
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fa3e 	bl	8002768 <ADC_Enable>
 80022ec:	0003      	movs	r3, r0
 80022ee:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022f0:	002c      	movs	r4, r5
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d13e      	bne.n	8002378 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	4a22      	ldr	r2, [pc, #136]	; (8002388 <HAL_ADC_Start_DMA+0x10c>)
 8002300:	4013      	ands	r3, r2
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	0052      	lsls	r2, r2, #1
 8002306:	431a      	orrs	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002316:	4a1d      	ldr	r2, [pc, #116]	; (800238c <HAL_ADC_Start_DMA+0x110>)
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231e:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <HAL_ADC_Start_DMA+0x114>)
 8002320:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <HAL_ADC_Start_DMA+0x118>)
 8002328:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	221c      	movs	r2, #28
 8002330:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2254      	movs	r2, #84	; 0x54
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2110      	movs	r1, #16
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3340      	adds	r3, #64	; 0x40
 8002354:	0019      	movs	r1, r3
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	193c      	adds	r4, r7, r4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f000 fe34 	bl	8002fc8 <HAL_DMA_Start_IT>
 8002360:	0003      	movs	r3, r0
 8002362:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff fdbb 	bl	8001ee4 <LL_ADC_REG_StartConversion>
 800236e:	e003      	b.n	8002378 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002370:	2317      	movs	r3, #23
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2202      	movs	r2, #2
 8002376:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002378:	2317      	movs	r3, #23
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	781b      	ldrb	r3, [r3, #0]
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b006      	add	sp, #24
 8002384:	bdb0      	pop	{r4, r5, r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	fffff0fe 	.word	0xfffff0fe
 800238c:	08002931 	.word	0x08002931
 8002390:	080029f9 	.word	0x080029f9
 8002394:	08002a17 	.word	0x08002a17

08002398 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c2:	2317      	movs	r3, #23
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2254      	movs	r2, #84	; 0x54
 80023d2:	5c9b      	ldrb	r3, [r3, r2]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x24>
 80023d8:	2302      	movs	r3, #2
 80023da:	e1c0      	b.n	800275e <HAL_ADC_ConfigChannel+0x3a6>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2254      	movs	r2, #84	; 0x54
 80023e0:	2101      	movs	r1, #1
 80023e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff fd8d 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d000      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x3c>
 80023f2:	e1a3      	b.n	800273c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d100      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x46>
 80023fc:	e143      	b.n	8002686 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	429a      	cmp	r2, r3
 8002408:	d004      	beq.n	8002414 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800240e:	4ac1      	ldr	r2, [pc, #772]	; (8002714 <HAL_ADC_ConfigChannel+0x35c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d108      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0019      	movs	r1, r3
 800241e:	0010      	movs	r0, r2
 8002420:	f7ff fcb2 	bl	8001d88 <LL_ADC_REG_SetSequencerChAdd>
 8002424:	e0c9      	b.n	80025ba <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	211f      	movs	r1, #31
 8002430:	400b      	ands	r3, r1
 8002432:	210f      	movs	r1, #15
 8002434:	4099      	lsls	r1, r3
 8002436:	000b      	movs	r3, r1
 8002438:	43db      	mvns	r3, r3
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	035b      	lsls	r3, r3, #13
 8002444:	0b5b      	lsrs	r3, r3, #13
 8002446:	d105      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x9c>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	221f      	movs	r2, #31
 8002450:	4013      	ands	r3, r2
 8002452:	e098      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	d000      	beq.n	8002460 <HAL_ADC_ConfigChannel+0xa8>
 800245e:	e091      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1cc>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2202      	movs	r2, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d000      	beq.n	800246c <HAL_ADC_ConfigChannel+0xb4>
 800246a:	e089      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1c8>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2204      	movs	r2, #4
 8002472:	4013      	ands	r3, r2
 8002474:	d000      	beq.n	8002478 <HAL_ADC_ConfigChannel+0xc0>
 8002476:	e081      	b.n	800257c <HAL_ADC_ConfigChannel+0x1c4>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2208      	movs	r2, #8
 800247e:	4013      	ands	r3, r2
 8002480:	d000      	beq.n	8002484 <HAL_ADC_ConfigChannel+0xcc>
 8002482:	e079      	b.n	8002578 <HAL_ADC_ConfigChannel+0x1c0>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2210      	movs	r2, #16
 800248a:	4013      	ands	r3, r2
 800248c:	d000      	beq.n	8002490 <HAL_ADC_ConfigChannel+0xd8>
 800248e:	e071      	b.n	8002574 <HAL_ADC_ConfigChannel+0x1bc>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2220      	movs	r2, #32
 8002496:	4013      	ands	r3, r2
 8002498:	d000      	beq.n	800249c <HAL_ADC_ConfigChannel+0xe4>
 800249a:	e069      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1b8>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2240      	movs	r2, #64	; 0x40
 80024a2:	4013      	ands	r3, r2
 80024a4:	d000      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0xf0>
 80024a6:	e061      	b.n	800256c <HAL_ADC_ConfigChannel+0x1b4>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	4013      	ands	r3, r2
 80024b0:	d000      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0xfc>
 80024b2:	e059      	b.n	8002568 <HAL_ADC_ConfigChannel+0x1b0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	d151      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1ac>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	d149      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1a8>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4013      	ands	r3, r2
 80024d6:	d141      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1a4>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	4013      	ands	r3, r2
 80024e2:	d139      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1a0>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	015b      	lsls	r3, r3, #5
 80024ec:	4013      	ands	r3, r2
 80024ee:	d131      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x19c>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	019b      	lsls	r3, r3, #6
 80024f8:	4013      	ands	r3, r2
 80024fa:	d129      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x198>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	01db      	lsls	r3, r3, #7
 8002504:	4013      	ands	r3, r2
 8002506:	d121      	bne.n	800254c <HAL_ADC_ConfigChannel+0x194>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4013      	ands	r3, r2
 8002512:	d119      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x190>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	025b      	lsls	r3, r3, #9
 800251c:	4013      	ands	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x18c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	d109      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x188>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	02db      	lsls	r3, r3, #11
 8002534:	4013      	ands	r3, r2
 8002536:	d001      	beq.n	800253c <HAL_ADC_ConfigChannel+0x184>
 8002538:	2312      	movs	r3, #18
 800253a:	e024      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 800253c:	2300      	movs	r3, #0
 800253e:	e022      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002540:	2311      	movs	r3, #17
 8002542:	e020      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002544:	2310      	movs	r3, #16
 8002546:	e01e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002548:	230f      	movs	r3, #15
 800254a:	e01c      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 800254c:	230e      	movs	r3, #14
 800254e:	e01a      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002550:	230d      	movs	r3, #13
 8002552:	e018      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002554:	230c      	movs	r3, #12
 8002556:	e016      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002558:	230b      	movs	r3, #11
 800255a:	e014      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 800255c:	230a      	movs	r3, #10
 800255e:	e012      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002560:	2309      	movs	r3, #9
 8002562:	e010      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002564:	2308      	movs	r3, #8
 8002566:	e00e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002568:	2307      	movs	r3, #7
 800256a:	e00c      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 800256c:	2306      	movs	r3, #6
 800256e:	e00a      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	2305      	movs	r3, #5
 8002572:	e008      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002574:	2304      	movs	r3, #4
 8002576:	e006      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002578:	2303      	movs	r3, #3
 800257a:	e004      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 800257c:	2302      	movs	r3, #2
 800257e:	e002      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1ce>
 8002584:	2300      	movs	r3, #0
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	6852      	ldr	r2, [r2, #4]
 800258a:	201f      	movs	r0, #31
 800258c:	4002      	ands	r2, r0
 800258e:	4093      	lsls	r3, r2
 8002590:	000a      	movs	r2, r1
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d808      	bhi.n	80025ba <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	001a      	movs	r2, r3
 80025b6:	f7ff fbc7 	bl	8001d48 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	001a      	movs	r2, r3
 80025c8:	f7ff fc02 	bl	8001dd0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db00      	blt.n	80025d6 <HAL_ADC_ConfigChannel+0x21e>
 80025d4:	e0bc      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d6:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_ADC_ConfigChannel+0x360>)
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff fb63 	bl	8001ca4 <LL_ADC_GetCommonPathInternalCh>
 80025de:	0003      	movs	r3, r0
 80025e0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_ADC_ConfigChannel+0x364>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d122      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025f4:	d11d      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0412      	lsls	r2, r2, #16
 80025fc:	4313      	orrs	r3, r2
 80025fe:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_ADC_ConfigChannel+0x360>)
 8002600:	0019      	movs	r1, r3
 8002602:	0010      	movs	r0, r2
 8002604:	f7ff fb3a 	bl	8001c7c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002608:	4b45      	ldr	r3, [pc, #276]	; (8002720 <HAL_ADC_ConfigChannel+0x368>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4945      	ldr	r1, [pc, #276]	; (8002724 <HAL_ADC_ConfigChannel+0x36c>)
 800260e:	0018      	movs	r0, r3
 8002610:	f7fd fd80 	bl	8000114 <__udivsi3>
 8002614:	0003      	movs	r3, r0
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	0013      	movs	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	189b      	adds	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002622:	e002      	b.n	800262a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3b01      	subs	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f9      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002630:	e08e      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3c      	ldr	r2, [pc, #240]	; (8002728 <HAL_ADC_ConfigChannel+0x370>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d10e      	bne.n	800265a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	045b      	lsls	r3, r3, #17
 8002642:	4013      	ands	r3, r2
 8002644:	d109      	bne.n	800265a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	0452      	lsls	r2, r2, #17
 800264c:	4313      	orrs	r3, r2
 800264e:	4a32      	ldr	r2, [pc, #200]	; (8002718 <HAL_ADC_ConfigChannel+0x360>)
 8002650:	0019      	movs	r1, r3
 8002652:	0010      	movs	r0, r2
 8002654:	f7ff fb12 	bl	8001c7c <LL_ADC_SetCommonPathInternalCh>
 8002658:	e07a      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a33      	ldr	r2, [pc, #204]	; (800272c <HAL_ADC_ConfigChannel+0x374>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d000      	beq.n	8002666 <HAL_ADC_ConfigChannel+0x2ae>
 8002664:	e074      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	03db      	lsls	r3, r3, #15
 800266c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800266e:	d000      	beq.n	8002672 <HAL_ADC_ConfigChannel+0x2ba>
 8002670:	e06e      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	03d2      	lsls	r2, r2, #15
 8002678:	4313      	orrs	r3, r2
 800267a:	4a27      	ldr	r2, [pc, #156]	; (8002718 <HAL_ADC_ConfigChannel+0x360>)
 800267c:	0019      	movs	r1, r3
 800267e:	0010      	movs	r0, r2
 8002680:	f7ff fafc 	bl	8001c7c <LL_ADC_SetCommonPathInternalCh>
 8002684:	e064      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	429a      	cmp	r2, r3
 8002690:	d004      	beq.n	800269c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002696:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_ADC_ConfigChannel+0x35c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d107      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0019      	movs	r1, r3
 80026a6:	0010      	movs	r0, r2
 80026a8:	f7ff fb7f 	bl	8001daa <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da4d      	bge.n	8002750 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_ADC_ConfigChannel+0x360>)
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7ff faf4 	bl	8001ca4 <LL_ADC_GetCommonPathInternalCh>
 80026bc:	0003      	movs	r3, r0
 80026be:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a15      	ldr	r2, [pc, #84]	; (800271c <HAL_ADC_ConfigChannel+0x364>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_ADC_ConfigChannel+0x378>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_ADC_ConfigChannel+0x360>)
 80026d2:	0019      	movs	r1, r3
 80026d4:	0010      	movs	r0, r2
 80026d6:	f7ff fad1 	bl	8001c7c <LL_ADC_SetCommonPathInternalCh>
 80026da:	e039      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <HAL_ADC_ConfigChannel+0x370>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d108      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_ADC_ConfigChannel+0x37c>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_ADC_ConfigChannel+0x360>)
 80026ee:	0019      	movs	r1, r3
 80026f0:	0010      	movs	r0, r2
 80026f2:	f7ff fac3 	bl	8001c7c <LL_ADC_SetCommonPathInternalCh>
 80026f6:	e02b      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_ADC_ConfigChannel+0x374>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d126      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <HAL_ADC_ConfigChannel+0x380>)
 8002706:	4013      	ands	r3, r2
 8002708:	4a03      	ldr	r2, [pc, #12]	; (8002718 <HAL_ADC_ConfigChannel+0x360>)
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f7ff fab5 	bl	8001c7c <LL_ADC_SetCommonPathInternalCh>
 8002712:	e01d      	b.n	8002750 <HAL_ADC_ConfigChannel+0x398>
 8002714:	80000004 	.word	0x80000004
 8002718:	40012708 	.word	0x40012708
 800271c:	b0001000 	.word	0xb0001000
 8002720:	20000000 	.word	0x20000000
 8002724:	00030d40 	.word	0x00030d40
 8002728:	b8004000 	.word	0xb8004000
 800272c:	b4002000 	.word	0xb4002000
 8002730:	ff7fffff 	.word	0xff7fffff
 8002734:	feffffff 	.word	0xfeffffff
 8002738:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	2220      	movs	r2, #32
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002748:	2317      	movs	r3, #23
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2254      	movs	r2, #84	; 0x54
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002758:	2317      	movs	r3, #23
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	781b      	ldrb	r3, [r3, #0]
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b006      	add	sp, #24
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)

08002768 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0018      	movs	r0, r3
 800277a:	f7ff fb91 	bl	8001ea0 <LL_ADC_IsEnabled>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d000      	beq.n	8002784 <ADC_Enable+0x1c>
 8002782:	e069      	b.n	8002858 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4a36      	ldr	r2, [pc, #216]	; (8002864 <ADC_Enable+0xfc>)
 800278c:	4013      	ands	r3, r2
 800278e:	d00d      	beq.n	80027ac <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	2210      	movs	r2, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	2201      	movs	r2, #1
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e056      	b.n	800285a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff fb51 	bl	8001e58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80027b6:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <ADC_Enable+0x100>)
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff fa73 	bl	8001ca4 <LL_ADC_GetCommonPathInternalCh>
 80027be:	0002      	movs	r2, r0
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	4013      	ands	r3, r2
 80027c6:	d00f      	beq.n	80027e8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <ADC_Enable+0x104>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4928      	ldr	r1, [pc, #160]	; (8002870 <ADC_Enable+0x108>)
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fd fca0 	bl	8000114 <__udivsi3>
 80027d4:	0003      	movs	r3, r0
 80027d6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80027d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027da:	e002      	b.n	80027e2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7e5b      	ldrb	r3, [r3, #25]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d033      	beq.n	8002858 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80027f0:	f7ff fa3a 	bl	8001c68 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027f8:	e027      	b.n	800284a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0018      	movs	r0, r3
 8002800:	f7ff fb4e 	bl	8001ea0 <LL_ADC_IsEnabled>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d104      	bne.n	8002812 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff fb23 	bl	8001e58 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002812:	f7ff fa29 	bl	8001c68 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d914      	bls.n	800284a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	2b01      	cmp	r3, #1
 800282c:	d00d      	beq.n	800284a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	2210      	movs	r2, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	2201      	movs	r2, #1
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e007      	b.n	800285a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4013      	ands	r3, r2
 8002854:	2b01      	cmp	r3, #1
 8002856:	d1d0      	bne.n	80027fa <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b004      	add	sp, #16
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	80000017 	.word	0x80000017
 8002868:	40012708 	.word	0x40012708
 800286c:	20000000 	.word	0x20000000
 8002870:	00030d40 	.word	0x00030d40

08002874 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0018      	movs	r0, r3
 8002882:	f7ff fb1e 	bl	8001ec2 <LL_ADC_IsDisableOngoing>
 8002886:	0003      	movs	r3, r0
 8002888:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff fb06 	bl	8001ea0 <LL_ADC_IsEnabled>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d046      	beq.n	8002926 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d143      	bne.n	8002926 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2205      	movs	r2, #5
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10d      	bne.n	80028c8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7ff fae3 	bl	8001e7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2203      	movs	r2, #3
 80028bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028be:	f7ff f9d3 	bl	8001c68 <HAL_GetTick>
 80028c2:	0003      	movs	r3, r0
 80028c4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028c6:	e028      	b.n	800291a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	2210      	movs	r2, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2201      	movs	r2, #1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e021      	b.n	8002928 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028e4:	f7ff f9c0 	bl	8001c68 <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d913      	bls.n	800291a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00d      	beq.n	800291a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	2210      	movs	r2, #16
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2201      	movs	r2, #1
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e006      	b.n	8002928 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2201      	movs	r2, #1
 8002922:	4013      	ands	r3, r2
 8002924:	d1de      	bne.n	80028e4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b004      	add	sp, #16
 800292e:	bd80      	pop	{r7, pc}

08002930 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	2250      	movs	r2, #80	; 0x50
 8002944:	4013      	ands	r3, r2
 8002946:	d141      	bne.n	80029cc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff f9e3 	bl	8001d26 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d02e      	beq.n	80029c2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	7e9b      	ldrb	r3, [r3, #26]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d12a      	bne.n	80029c2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2208      	movs	r2, #8
 8002974:	4013      	ands	r3, r2
 8002976:	2b08      	cmp	r3, #8
 8002978:	d123      	bne.n	80029c2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0018      	movs	r0, r3
 8002980:	f7ff fac2 	bl	8001f08 <LL_ADC_REG_IsConversionOngoing>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d110      	bne.n	80029aa <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	210c      	movs	r1, #12
 8002994:	438a      	bics	r2, r1
 8002996:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <ADC_DMAConvCplt+0xc4>)
 800299e:	4013      	ands	r3, r2
 80029a0:	2201      	movs	r2, #1
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	659a      	str	r2, [r3, #88]	; 0x58
 80029a8:	e00b      	b.n	80029c2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	2220      	movs	r2, #32
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	2201      	movs	r2, #1
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7fe fe43 	bl	8001650 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ca:	e00f      	b.n	80029ec <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	2210      	movs	r2, #16
 80029d2:	4013      	ands	r3, r2
 80029d4:	d004      	beq.n	80029e0 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fce5 	bl	80023a8 <HAL_ADC_ErrorCallback>
}
 80029de:	e005      	b.n	80029ec <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	0010      	movs	r0, r2
 80029ea:	4798      	blx	r3
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b004      	add	sp, #16
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	fffffefe 	.word	0xfffffefe

080029f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff fcc5 	bl	8002398 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b004      	add	sp, #16
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	2240      	movs	r2, #64	; 0x40
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2204      	movs	r2, #4
 8002a36:	431a      	orrs	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7ff fcb2 	bl	80023a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b004      	add	sp, #16
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <LL_ADC_SetCalibrationFactor>:
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	22b4      	movs	r2, #180	; 0xb4
 8002a5a:	589b      	ldr	r3, [r3, r2]
 8002a5c:	227f      	movs	r2, #127	; 0x7f
 8002a5e:	4393      	bics	r3, r2
 8002a60:	001a      	movs	r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	21b4      	movs	r1, #180	; 0xb4
 8002a6a:	505a      	str	r2, [r3, r1]
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <LL_ADC_GetCalibrationFactor>:
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	22b4      	movs	r2, #180	; 0xb4
 8002a80:	589b      	ldr	r3, [r3, r2]
 8002a82:	227f      	movs	r2, #127	; 0x7f
 8002a84:	4013      	ands	r3, r2
}
 8002a86:	0018      	movs	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b002      	add	sp, #8
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <LL_ADC_Enable>:
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <LL_ADC_Enable+0x20>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	7fffffe8 	.word	0x7fffffe8

08002ab4 <LL_ADC_Disable>:
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <LL_ADC_Disable+0x20>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	7fffffe8 	.word	0x7fffffe8

08002ad8 <LL_ADC_IsEnabled>:
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <LL_ADC_IsEnabled+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_ADC_IsEnabled+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b002      	add	sp, #8
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <LL_ADC_StartCalibration>:
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <LL_ADC_StartCalibration+0x24>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	0612      	lsls	r2, r2, #24
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	609a      	str	r2, [r3, #8]
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	7fffffe8 	.word	0x7fffffe8

08002b24 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	0fdb      	lsrs	r3, r3, #31
 8002b32:	07da      	lsls	r2, r3, #31
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	061b      	lsls	r3, r3, #24
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d101      	bne.n	8002b40 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2254      	movs	r2, #84	; 0x54
 8002b60:	5c9b      	ldrb	r3, [r3, r2]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_ADCEx_Calibration_Start+0x1e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0ba      	b.n	8002ce0 <HAL_ADCEx_Calibration_Start+0x194>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2254      	movs	r2, #84	; 0x54
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b72:	2317      	movs	r3, #23
 8002b74:	18fc      	adds	r4, r7, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff fe7b 	bl	8002874 <ADC_Disable>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7ff ffa6 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d000      	beq.n	8002b92 <HAL_ADCEx_Calibration_Start+0x46>
 8002b90:	e099      	b.n	8002cc6 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a50      	ldr	r2, [pc, #320]	; (8002cec <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	494d      	ldr	r1, [pc, #308]	; (8002cf0 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e02d      	b.n	8002c20 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ff97 	bl	8002afc <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bce:	e014      	b.n	8002bfa <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a46      	ldr	r2, [pc, #280]	; (8002cf4 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d90d      	bls.n	8002bfa <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	2212      	movs	r2, #18
 8002be4:	4393      	bics	r3, r2
 8002be6:	2210      	movs	r2, #16
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2254      	movs	r2, #84	; 0x54
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e072      	b.n	8002ce0 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff ff90 	bl	8002b24 <LL_ADC_IsCalibrationOnGoing>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d1e3      	bne.n	8002bd0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7ff ff31 	bl	8002a74 <LL_ADC_GetCalibrationFactor>
 8002c12:	0002      	movs	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b07      	cmp	r3, #7
 8002c24:	d9ce      	bls.n	8002bc4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002c26:	69f9      	ldr	r1, [r7, #28]
 8002c28:	69b8      	ldr	r0, [r7, #24]
 8002c2a:	f7fd fa73 	bl	8000114 <__udivsi3>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff ff2a 	bl	8002a90 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	0011      	movs	r1, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff ff01 	bl	8002a4c <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7ff ff30 	bl	8002ab4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c54:	f7ff f808 	bl	8001c68 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c5c:	e01b      	b.n	8002c96 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c5e:	f7ff f803 	bl	8001c68 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d914      	bls.n	8002c96 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff ff31 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d00d      	beq.n	8002c96 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	2210      	movs	r2, #16
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e024      	b.n	8002ce0 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7ff ff1c 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002ca0:	1e03      	subs	r3, r0, #0
 8002ca2:	d1dc      	bne.n	8002c5e <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4393      	bics	r3, r2
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc4:	e005      	b.n	8002cd2 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	2210      	movs	r2, #16
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2254      	movs	r2, #84	; 0x54
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002cda:	2317      	movs	r3, #23
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	781b      	ldrb	r3, [r3, #0]
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b009      	add	sp, #36	; 0x24
 8002ce6:	bd90      	pop	{r4, r7, pc}
 8002ce8:	fffffefd 	.word	0xfffffefd
 8002cec:	00008003 	.word	0x00008003
 8002cf0:	ffff7ffc 	.word	0xffff7ffc
 8002cf4:	0002f1ff 	.word	0x0002f1ff

08002cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	0002      	movs	r2, r0
 8002d00:	1dfb      	adds	r3, r7, #7
 8002d02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b7f      	cmp	r3, #127	; 0x7f
 8002d0a:	d809      	bhi.n	8002d20 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0c:	1dfb      	adds	r3, r7, #7
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	001a      	movs	r2, r3
 8002d12:	231f      	movs	r3, #31
 8002d14:	401a      	ands	r2, r3
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_EnableIRQ+0x30>)
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4091      	lsls	r1, r2
 8002d1c:	000a      	movs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	0002      	movs	r2, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	1dfb      	adds	r3, r7, #7
 8002d38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	1dfb      	adds	r3, r7, #7
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002d40:	d828      	bhi.n	8002d94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d42:	4a2f      	ldr	r2, [pc, #188]	; (8002e00 <__NVIC_SetPriority+0xd4>)
 8002d44:	1dfb      	adds	r3, r7, #7
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	33c0      	adds	r3, #192	; 0xc0
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	589b      	ldr	r3, [r3, r2]
 8002d52:	1dfa      	adds	r2, r7, #7
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	0011      	movs	r1, r2
 8002d58:	2203      	movs	r2, #3
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	00d2      	lsls	r2, r2, #3
 8002d5e:	21ff      	movs	r1, #255	; 0xff
 8002d60:	4091      	lsls	r1, r2
 8002d62:	000a      	movs	r2, r1
 8002d64:	43d2      	mvns	r2, r2
 8002d66:	401a      	ands	r2, r3
 8002d68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	401a      	ands	r2, r3
 8002d72:	1dfb      	adds	r3, r7, #7
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	0018      	movs	r0, r3
 8002d78:	2303      	movs	r3, #3
 8002d7a:	4003      	ands	r3, r0
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d80:	481f      	ldr	r0, [pc, #124]	; (8002e00 <__NVIC_SetPriority+0xd4>)
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	33c0      	adds	r3, #192	; 0xc0
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d92:	e031      	b.n	8002df8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d94:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <__NVIC_SetPriority+0xd8>)
 8002d96:	1dfb      	adds	r3, r7, #7
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	400b      	ands	r3, r1
 8002da0:	3b08      	subs	r3, #8
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3306      	adds	r3, #6
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	18d3      	adds	r3, r2, r3
 8002daa:	3304      	adds	r3, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1dfa      	adds	r2, r7, #7
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	0011      	movs	r1, r2
 8002db4:	2203      	movs	r2, #3
 8002db6:	400a      	ands	r2, r1
 8002db8:	00d2      	lsls	r2, r2, #3
 8002dba:	21ff      	movs	r1, #255	; 0xff
 8002dbc:	4091      	lsls	r1, r2
 8002dbe:	000a      	movs	r2, r1
 8002dc0:	43d2      	mvns	r2, r2
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	019b      	lsls	r3, r3, #6
 8002dca:	22ff      	movs	r2, #255	; 0xff
 8002dcc:	401a      	ands	r2, r3
 8002dce:	1dfb      	adds	r3, r7, #7
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	4003      	ands	r3, r0
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ddc:	4809      	ldr	r0, [pc, #36]	; (8002e04 <__NVIC_SetPriority+0xd8>)
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	001c      	movs	r4, r3
 8002de4:	230f      	movs	r3, #15
 8002de6:	4023      	ands	r3, r4
 8002de8:	3b08      	subs	r3, #8
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	430a      	orrs	r2, r1
 8002dee:	3306      	adds	r3, #6
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	18c3      	adds	r3, r0, r3
 8002df4:	3304      	adds	r3, #4
 8002df6:	601a      	str	r2, [r3, #0]
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bd90      	pop	{r4, r7, pc}
 8002e00:	e000e100 	.word	0xe000e100
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	1e5a      	subs	r2, r3, #1
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	045b      	lsls	r3, r3, #17
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d301      	bcc.n	8002e20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e010      	b.n	8002e42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <SysTick_Config+0x44>)
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	3a01      	subs	r2, #1
 8002e26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e28:	2301      	movs	r3, #1
 8002e2a:	425b      	negs	r3, r3
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7ff ff7c 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <SysTick_Config+0x44>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <SysTick_Config+0x44>)
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b002      	add	sp, #8
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	e000e010 	.word	0xe000e010

08002e50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	1c02      	adds	r2, r0, #0
 8002e60:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	0011      	movs	r1, r2
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff ff5d 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	0002      	movs	r2, r0
 8002e82:	1dfb      	adds	r3, r7, #7
 8002e84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff ff33 	bl	8002cf8 <__NVIC_EnableIRQ>
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7ff ffaf 	bl	8002e08 <SysTick_Config>
 8002eaa:	0003      	movs	r3, r0
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e077      	b.n	8002fb6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3d      	ldr	r2, [pc, #244]	; (8002fc0 <HAL_DMA_Init+0x10c>)
 8002ecc:	4694      	mov	ip, r2
 8002ece:	4463      	add	r3, ip
 8002ed0:	2114      	movs	r1, #20
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7fd f91e 	bl	8000114 <__udivsi3>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	009a      	lsls	r2, r3, #2
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2225      	movs	r2, #37	; 0x25
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4934      	ldr	r1, [pc, #208]	; (8002fc4 <HAL_DMA_Init+0x110>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6819      	ldr	r1, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 f9c1 	bl	80032b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	01db      	lsls	r3, r3, #7
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d102      	bne.n	8002f48 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	213f      	movs	r1, #63	; 0x3f
 8002f52:	400a      	ands	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f5e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d011      	beq.n	8002f8c <HAL_DMA_Init+0xd8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d80d      	bhi.n	8002f8c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 f9cc 	bl	8003310 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	e008      	b.n	8002f9e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2225      	movs	r2, #37	; 0x25
 8002fa8:	2101      	movs	r1, #1
 8002faa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	bffdfff8 	.word	0xbffdfff8
 8002fc4:	ffff800f 	.word	0xffff800f

08002fc8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2317      	movs	r3, #23
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2224      	movs	r2, #36	; 0x24
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_DMA_Start_IT+0x24>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e06f      	b.n	80030cc <HAL_DMA_Start_IT+0x104>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2225      	movs	r2, #37	; 0x25
 8002ff8:	5c9b      	ldrb	r3, [r3, r2]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d157      	bne.n	80030b0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2225      	movs	r2, #37	; 0x25
 8003004:	2102      	movs	r1, #2
 8003006:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	438a      	bics	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f907 	bl	8003238 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	210e      	movs	r1, #14
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e00f      	b.n	8003064 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2104      	movs	r1, #4
 8003050:	438a      	bics	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	210a      	movs	r1, #10
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	025b      	lsls	r3, r3, #9
 800306e:	4013      	ands	r3, r2
 8003070:	d008      	beq.n	8003084 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0049      	lsls	r1, r1, #1
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0049      	lsls	r1, r1, #1
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e00a      	b.n	80030c6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2224      	movs	r2, #36	; 0x24
 80030ba:	2100      	movs	r1, #0
 80030bc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80030be:	2317      	movs	r3, #23
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80030c6:	2317      	movs	r3, #23
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	781b      	ldrb	r3, [r3, #0]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80030dc:	4b55      	ldr	r3, [pc, #340]	; (8003234 <HAL_DMA_IRQHandler+0x160>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	221c      	movs	r2, #28
 80030f0:	4013      	ands	r3, r2
 80030f2:	2204      	movs	r2, #4
 80030f4:	409a      	lsls	r2, r3
 80030f6:	0013      	movs	r3, r2
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	d027      	beq.n	800314e <HAL_DMA_IRQHandler+0x7a>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2204      	movs	r2, #4
 8003102:	4013      	ands	r3, r2
 8003104:	d023      	beq.n	800314e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2220      	movs	r2, #32
 800310e:	4013      	ands	r3, r2
 8003110:	d107      	bne.n	8003122 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2104      	movs	r1, #4
 800311e:	438a      	bics	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003122:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_DMA_IRQHandler+0x160>)
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	221c      	movs	r2, #28
 800312c:	4013      	ands	r3, r2
 800312e:	2204      	movs	r2, #4
 8003130:	409a      	lsls	r2, r3
 8003132:	4b40      	ldr	r3, [pc, #256]	; (8003234 <HAL_DMA_IRQHandler+0x160>)
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	2b00      	cmp	r3, #0
 800313e:	d100      	bne.n	8003142 <HAL_DMA_IRQHandler+0x6e>
 8003140:	e073      	b.n	800322a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	0010      	movs	r0, r2
 800314a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800314c:	e06d      	b.n	800322a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	221c      	movs	r2, #28
 8003154:	4013      	ands	r3, r2
 8003156:	2202      	movs	r2, #2
 8003158:	409a      	lsls	r2, r3
 800315a:	0013      	movs	r3, r2
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	d02e      	beq.n	80031c0 <HAL_DMA_IRQHandler+0xec>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d02a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2220      	movs	r2, #32
 8003172:	4013      	ands	r3, r2
 8003174:	d10b      	bne.n	800318e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	210a      	movs	r1, #10
 8003182:	438a      	bics	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2225      	movs	r2, #37	; 0x25
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800318e:	4b29      	ldr	r3, [pc, #164]	; (8003234 <HAL_DMA_IRQHandler+0x160>)
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	221c      	movs	r2, #28
 8003198:	4013      	ands	r3, r2
 800319a:	2202      	movs	r2, #2
 800319c:	409a      	lsls	r2, r3
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_DMA_IRQHandler+0x160>)
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	2100      	movs	r1, #0
 80031aa:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d03a      	beq.n	800322a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	0010      	movs	r0, r2
 80031bc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80031be:	e034      	b.n	800322a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	221c      	movs	r2, #28
 80031c6:	4013      	ands	r3, r2
 80031c8:	2208      	movs	r2, #8
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	d02b      	beq.n	800322c <HAL_DMA_IRQHandler+0x158>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2208      	movs	r2, #8
 80031d8:	4013      	ands	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	210e      	movs	r1, #14
 80031e8:	438a      	bics	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_DMA_IRQHandler+0x160>)
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	221c      	movs	r2, #28
 80031f6:	4013      	ands	r3, r2
 80031f8:	2201      	movs	r2, #1
 80031fa:	409a      	lsls	r2, r3
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_DMA_IRQHandler+0x160>)
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2225      	movs	r2, #37	; 0x25
 800320c:	2101      	movs	r1, #1
 800320e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	2100      	movs	r1, #0
 8003216:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	0010      	movs	r0, r2
 8003228:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46c0      	nop			; (mov r8, r8)
}
 800322e:	46bd      	mov	sp, r7
 8003230:	b004      	add	sp, #16
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40020000 	.word	0x40020000

08003238 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800324e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003260:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <DMA_SetConfig+0x7c>)
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	221c      	movs	r2, #28
 800326c:	4013      	ands	r3, r2
 800326e:	2201      	movs	r2, #1
 8003270:	409a      	lsls	r2, r3
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <DMA_SetConfig+0x7c>)
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b10      	cmp	r3, #16
 8003286:	d108      	bne.n	800329a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003298:	e007      	b.n	80032aa <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	60da      	str	r2, [r3, #12]
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	40020000 	.word	0x40020000

080032b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	4a10      	ldr	r2, [pc, #64]	; (8003308 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80032c8:	4694      	mov	ip, r2
 80032ca:	4463      	add	r3, ip
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	001a      	movs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	001a      	movs	r2, r3
 80032da:	23ff      	movs	r3, #255	; 0xff
 80032dc:	4013      	ands	r3, r2
 80032de:	3b08      	subs	r3, #8
 80032e0:	2114      	movs	r1, #20
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7fc ff16 	bl	8000114 <__udivsi3>
 80032e8:	0003      	movs	r3, r0
 80032ea:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a07      	ldr	r2, [pc, #28]	; (800330c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80032f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	221f      	movs	r2, #31
 80032f6:	4013      	ands	r3, r2
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	10008200 	.word	0x10008200
 800330c:	40020880 	.word	0x40020880

08003310 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	223f      	movs	r2, #63	; 0x3f
 800331e:	4013      	ands	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003326:	4694      	mov	ip, r2
 8003328:	4463      	add	r3, ip
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	001a      	movs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a07      	ldr	r2, [pc, #28]	; (8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003336:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3b01      	subs	r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	4013      	ands	r3, r2
 8003340:	2201      	movs	r2, #1
 8003342:	409a      	lsls	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b004      	add	sp, #16
 800334e:	bd80      	pop	{r7, pc}
 8003350:	1000823f 	.word	0x1000823f
 8003354:	40020940 	.word	0x40020940

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003366:	e147      	b.n	80035f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2101      	movs	r1, #1
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4091      	lsls	r1, r2
 8003372:	000a      	movs	r2, r1
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d100      	bne.n	8003380 <HAL_GPIO_Init+0x28>
 800337e:	e138      	b.n	80035f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2203      	movs	r2, #3
 8003386:	4013      	ands	r3, r2
 8003388:	2b01      	cmp	r3, #1
 800338a:	d005      	beq.n	8003398 <HAL_GPIO_Init+0x40>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2203      	movs	r2, #3
 8003392:	4013      	ands	r3, r2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d130      	bne.n	80033fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	409a      	lsls	r2, r3
 80033a6:	0013      	movs	r3, r2
 80033a8:	43da      	mvns	r2, r3
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	409a      	lsls	r2, r3
 80033ba:	0013      	movs	r3, r2
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ce:	2201      	movs	r2, #1
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
 80033d4:	0013      	movs	r3, r2
 80033d6:	43da      	mvns	r2, r3
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	2201      	movs	r2, #1
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	409a      	lsls	r2, r3
 80033ec:	0013      	movs	r3, r2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	4013      	ands	r3, r2
 8003402:	2b03      	cmp	r3, #3
 8003404:	d017      	beq.n	8003436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	409a      	lsls	r2, r3
 8003414:	0013      	movs	r3, r2
 8003416:	43da      	mvns	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	0013      	movs	r3, r2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2203      	movs	r2, #3
 800343c:	4013      	ands	r3, r2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d123      	bne.n	800348a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	08da      	lsrs	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3208      	adds	r2, #8
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	58d3      	ldr	r3, [r2, r3]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2207      	movs	r2, #7
 8003454:	4013      	ands	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	409a      	lsls	r2, r3
 800345c:	0013      	movs	r3, r2
 800345e:	43da      	mvns	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2107      	movs	r1, #7
 800346e:	400b      	ands	r3, r1
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	409a      	lsls	r2, r3
 8003474:	0013      	movs	r3, r2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	0092      	lsls	r2, r2, #2
 8003486:	6939      	ldr	r1, [r7, #16]
 8003488:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2203      	movs	r2, #3
 8003496:	409a      	lsls	r2, r3
 8003498:	0013      	movs	r3, r2
 800349a:	43da      	mvns	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2203      	movs	r2, #3
 80034a8:	401a      	ands	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	0013      	movs	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	23c0      	movs	r3, #192	; 0xc0
 80034c4:	029b      	lsls	r3, r3, #10
 80034c6:	4013      	ands	r3, r2
 80034c8:	d100      	bne.n	80034cc <HAL_GPIO_Init+0x174>
 80034ca:	e092      	b.n	80035f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80034cc:	4a50      	ldr	r2, [pc, #320]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3318      	adds	r3, #24
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	589b      	ldr	r3, [r3, r2]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2203      	movs	r2, #3
 80034de:	4013      	ands	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	220f      	movs	r2, #15
 80034e4:	409a      	lsls	r2, r3
 80034e6:	0013      	movs	r3, r2
 80034e8:	43da      	mvns	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	23a0      	movs	r3, #160	; 0xa0
 80034f4:	05db      	lsls	r3, r3, #23
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0x1ca>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a45      	ldr	r2, [pc, #276]	; (8003614 <HAL_GPIO_Init+0x2bc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00d      	beq.n	800351e <HAL_GPIO_Init+0x1c6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a44      	ldr	r2, [pc, #272]	; (8003618 <HAL_GPIO_Init+0x2c0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <HAL_GPIO_Init+0x1c2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a43      	ldr	r2, [pc, #268]	; (800361c <HAL_GPIO_Init+0x2c4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_GPIO_Init+0x1be>
 8003512:	2303      	movs	r3, #3
 8003514:	e006      	b.n	8003524 <HAL_GPIO_Init+0x1cc>
 8003516:	2305      	movs	r3, #5
 8003518:	e004      	b.n	8003524 <HAL_GPIO_Init+0x1cc>
 800351a:	2302      	movs	r3, #2
 800351c:	e002      	b.n	8003524 <HAL_GPIO_Init+0x1cc>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x1cc>
 8003522:	2300      	movs	r3, #0
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	2103      	movs	r1, #3
 8003528:	400a      	ands	r2, r1
 800352a:	00d2      	lsls	r2, r2, #3
 800352c:	4093      	lsls	r3, r2
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003534:	4936      	ldr	r1, [pc, #216]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3318      	adds	r3, #24
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003542:	4b33      	ldr	r3, [pc, #204]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43da      	mvns	r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	035b      	lsls	r3, r3, #13
 800355a:	4013      	ands	r3, r2
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	43da      	mvns	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	039b      	lsls	r3, r3, #14
 8003584:	4013      	ands	r3, r2
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003590:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003596:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 8003598:	2384      	movs	r3, #132	; 0x84
 800359a:	58d3      	ldr	r3, [r2, r3]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	43da      	mvns	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	029b      	lsls	r3, r3, #10
 80035b0:	4013      	ands	r3, r2
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035bc:	4914      	ldr	r1, [pc, #80]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 80035be:	2284      	movs	r2, #132	; 0x84
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	58d3      	ldr	r3, [r2, r3]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	025b      	lsls	r3, r3, #9
 80035de:	4013      	ands	r3, r2
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ea:	4909      	ldr	r1, [pc, #36]	; (8003610 <HAL_GPIO_Init+0x2b8>)
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3301      	adds	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	40da      	lsrs	r2, r3
 8003600:	1e13      	subs	r3, r2, #0
 8003602:	d000      	beq.n	8003606 <HAL_GPIO_Init+0x2ae>
 8003604:	e6b0      	b.n	8003368 <HAL_GPIO_Init+0x10>
  }
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b006      	add	sp, #24
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021800 	.word	0x40021800
 8003614:	50000400 	.word	0x50000400
 8003618:	50000800 	.word	0x50000800
 800361c:	50000c00 	.word	0x50000c00

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	0008      	movs	r0, r1
 800362a:	0011      	movs	r1, r2
 800362c:	1cbb      	adds	r3, r7, #2
 800362e:	1c02      	adds	r2, r0, #0
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	1c7b      	adds	r3, r7, #1
 8003634:	1c0a      	adds	r2, r1, #0
 8003636:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003638:	1c7b      	adds	r3, r7, #1
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d004      	beq.n	800364a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003640:	1cbb      	adds	r3, r7, #2
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800364a:	1cbb      	adds	r3, r7, #2
 800364c:	881a      	ldrh	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b002      	add	sp, #8
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	000a      	movs	r2, r1
 8003664:	1cbb      	adds	r3, r7, #2
 8003666:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800366e:	1cbb      	adds	r3, r7, #2
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	041a      	lsls	r2, r3, #16
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43db      	mvns	r3, r3
 800367c:	1cb9      	adds	r1, r7, #2
 800367e:	8809      	ldrh	r1, [r1, #0]
 8003680:	400b      	ands	r3, r1
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	619a      	str	r2, [r3, #24]
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	0002      	movs	r2, r0
 8003698:	1dbb      	adds	r3, r7, #6
 800369a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	1dba      	adds	r2, r7, #6
 80036a2:	8812      	ldrh	r2, [r2, #0]
 80036a4:	4013      	ands	r3, r2
 80036a6:	d008      	beq.n	80036ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80036a8:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80036aa:	1dba      	adds	r2, r7, #6
 80036ac:	8812      	ldrh	r2, [r2, #0]
 80036ae:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80036b0:	1dbb      	adds	r3, r7, #6
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f815 	bl	80036e4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	1dba      	adds	r2, r7, #6
 80036c0:	8812      	ldrh	r2, [r2, #0]
 80036c2:	4013      	ands	r3, r2
 80036c4:	d008      	beq.n	80036d8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80036c8:	1dba      	adds	r2, r7, #6
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7fd ff8c 	bl	80015f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021800 	.word	0x40021800

080036e4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	0002      	movs	r2, r0
 80036ec:	1dbb      	adds	r3, r7, #6
 80036ee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e082      	b.n	8003810 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2241      	movs	r2, #65	; 0x41
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2240      	movs	r2, #64	; 0x40
 800371a:	2100      	movs	r1, #0
 800371c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0018      	movs	r0, r3
 8003722:	f7fe f881 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2241      	movs	r2, #65	; 0x41
 800372a:	2124      	movs	r1, #36	; 0x24
 800372c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	438a      	bics	r2, r1
 800373c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4934      	ldr	r1, [pc, #208]	; (8003818 <HAL_I2C_Init+0x120>)
 8003748:	400a      	ands	r2, r1
 800374a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4931      	ldr	r1, [pc, #196]	; (800381c <HAL_I2C_Init+0x124>)
 8003758:	400a      	ands	r2, r1
 800375a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d108      	bne.n	8003776 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	0209      	lsls	r1, r1, #8
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	e007      	b.n	8003786 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2184      	movs	r1, #132	; 0x84
 8003780:	0209      	lsls	r1, r1, #8
 8003782:	430a      	orrs	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d104      	bne.n	8003798 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	491f      	ldr	r1, [pc, #124]	; (8003820 <HAL_I2C_Init+0x128>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	491a      	ldr	r1, [pc, #104]	; (800381c <HAL_I2C_Init+0x124>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69d9      	ldr	r1, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2241      	movs	r2, #65	; 0x41
 80037fc:	2120      	movs	r1, #32
 80037fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2242      	movs	r2, #66	; 0x42
 800380a:	2100      	movs	r1, #0
 800380c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}
 8003818:	f0ffffff 	.word	0xf0ffffff
 800381c:	ffff7fff 	.word	0xffff7fff
 8003820:	02008000 	.word	0x02008000

08003824 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2241      	movs	r2, #65	; 0x41
 8003832:	5c9b      	ldrb	r3, [r3, r2]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b20      	cmp	r3, #32
 8003838:	d138      	bne.n	80038ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2240      	movs	r2, #64	; 0x40
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003844:	2302      	movs	r3, #2
 8003846:	e032      	b.n	80038ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2241      	movs	r2, #65	; 0x41
 8003854:	2124      	movs	r1, #36	; 0x24
 8003856:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2101      	movs	r1, #1
 8003864:	438a      	bics	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4911      	ldr	r1, [pc, #68]	; (80038b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003874:	400a      	ands	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6819      	ldr	r1, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2241      	movs	r2, #65	; 0x41
 800389c:	2120      	movs	r1, #32
 800389e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b002      	add	sp, #8
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	ffffefff 	.word	0xffffefff

080038bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2241      	movs	r2, #65	; 0x41
 80038ca:	5c9b      	ldrb	r3, [r3, r2]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d139      	bne.n	8003946 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2240      	movs	r2, #64	; 0x40
 80038d6:	5c9b      	ldrb	r3, [r3, r2]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038dc:	2302      	movs	r3, #2
 80038de:	e033      	b.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	2101      	movs	r1, #1
 80038e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2241      	movs	r2, #65	; 0x41
 80038ec:	2124      	movs	r1, #36	; 0x24
 80038ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a11      	ldr	r2, [pc, #68]	; (8003950 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2241      	movs	r2, #65	; 0x41
 8003936:	2120      	movs	r1, #32
 8003938:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2240      	movs	r2, #64	; 0x40
 800393e:	2100      	movs	r1, #0
 8003940:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b004      	add	sp, #16
 800394e:	bd80      	pop	{r7, pc}
 8003950:	fffff0ff 	.word	0xfffff0ff

08003954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003962:	4013      	ands	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d11f      	bne.n	80039b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003978:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	0013      	movs	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	189b      	adds	r3, r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4912      	ldr	r1, [pc, #72]	; (80039d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003986:	0018      	movs	r0, r3
 8003988:	f7fc fbc4 	bl	8000114 <__udivsi3>
 800398c:	0003      	movs	r3, r0
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003992:	e008      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3b01      	subs	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e001      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e009      	b.n	80039ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	401a      	ands	r2, r3
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d0ed      	beq.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	40007000 	.word	0x40007000
 80039c8:	fffff9ff 	.word	0xfffff9ff
 80039cc:	20000000 	.word	0x20000000
 80039d0:	000f4240 	.word	0x000f4240

080039d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	23e0      	movs	r3, #224	; 0xe0
 80039de:	01db      	lsls	r3, r3, #7
 80039e0:	4013      	ands	r3, r2
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000

080039ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e2f3      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCC_OscConfig+0x1e>
 8003a08:	e07c      	b.n	8003b04 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0a:	4bc3      	ldr	r3, [pc, #780]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2238      	movs	r2, #56	; 0x38
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a14:	4bc0      	ldr	r3, [pc, #768]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d102      	bne.n	8003a2a <HAL_RCC_OscConfig+0x3e>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d002      	beq.n	8003a30 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	4bb9      	ldr	r3, [pc, #740]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	029b      	lsls	r3, r3, #10
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d062      	beq.n	8003b02 <HAL_RCC_OscConfig+0x116>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d15e      	bne.n	8003b02 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e2ce      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	025b      	lsls	r3, r3, #9
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x78>
 8003a54:	4bb0      	ldr	r3, [pc, #704]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4baf      	ldr	r3, [pc, #700]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	0249      	lsls	r1, r1, #9
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e020      	b.n	8003aa6 <HAL_RCC_OscConfig+0xba>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	23a0      	movs	r3, #160	; 0xa0
 8003a6a:	02db      	lsls	r3, r3, #11
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10e      	bne.n	8003a8e <HAL_RCC_OscConfig+0xa2>
 8003a70:	4ba9      	ldr	r3, [pc, #676]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4ba8      	ldr	r3, [pc, #672]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	02c9      	lsls	r1, r1, #11
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	4ba6      	ldr	r3, [pc, #664]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4ba5      	ldr	r3, [pc, #660]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0249      	lsls	r1, r1, #9
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e00b      	b.n	8003aa6 <HAL_RCC_OscConfig+0xba>
 8003a8e:	4ba2      	ldr	r3, [pc, #648]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4ba1      	ldr	r3, [pc, #644]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	49a1      	ldr	r1, [pc, #644]	; (8003d1c <HAL_RCC_OscConfig+0x330>)
 8003a96:	400a      	ands	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	4b9f      	ldr	r3, [pc, #636]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b9e      	ldr	r3, [pc, #632]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	499f      	ldr	r1, [pc, #636]	; (8003d20 <HAL_RCC_OscConfig+0x334>)
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d014      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fe f8db 	bl	8001c68 <HAL_GetTick>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fe f8d6 	bl	8001c68 <HAL_GetTick>
 8003abc:	0002      	movs	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e28d      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aca:	4b93      	ldr	r3, [pc, #588]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	029b      	lsls	r3, r3, #10
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xcc>
 8003ad6:	e015      	b.n	8003b04 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fe f8c6 	bl	8001c68 <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae2:	f7fe f8c1 	bl	8001c68 <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b64      	cmp	r3, #100	; 0x64
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e278      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af4:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	029b      	lsls	r3, r3, #10
 8003afc:	4013      	ands	r3, r2
 8003afe:	d1f0      	bne.n	8003ae2 <HAL_RCC_OscConfig+0xf6>
 8003b00:	e000      	b.n	8003b04 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d100      	bne.n	8003b10 <HAL_RCC_OscConfig+0x124>
 8003b0e:	e099      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b10:	4b81      	ldr	r3, [pc, #516]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2238      	movs	r2, #56	; 0x38
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b1a:	4b7f      	ldr	r3, [pc, #508]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	4013      	ands	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d102      	bne.n	8003b30 <HAL_RCC_OscConfig+0x144>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d002      	beq.n	8003b36 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d135      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b36:	4b78      	ldr	r3, [pc, #480]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d005      	beq.n	8003b4e <HAL_RCC_OscConfig+0x162>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e24b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4e:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a74      	ldr	r2, [pc, #464]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	021a      	lsls	r2, r3, #8
 8003b5e:	4b6e      	ldr	r3, [pc, #440]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d112      	bne.n	8003b90 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b6a:	4b6b      	ldr	r3, [pc, #428]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6e      	ldr	r2, [pc, #440]	; (8003d28 <HAL_RCC_OscConfig+0x33c>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	0019      	movs	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b7e:	4b66      	ldr	r3, [pc, #408]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	0adb      	lsrs	r3, r3, #11
 8003b84:	2207      	movs	r2, #7
 8003b86:	4013      	ands	r3, r2
 8003b88:	4a68      	ldr	r2, [pc, #416]	; (8003d2c <HAL_RCC_OscConfig+0x340>)
 8003b8a:	40da      	lsrs	r2, r3
 8003b8c:	4b68      	ldr	r3, [pc, #416]	; (8003d30 <HAL_RCC_OscConfig+0x344>)
 8003b8e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b90:	4b68      	ldr	r3, [pc, #416]	; (8003d34 <HAL_RCC_OscConfig+0x348>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0018      	movs	r0, r3
 8003b96:	f7fe f80b 	bl	8001bb0 <HAL_InitTick>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d051      	beq.n	8003c42 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e221      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d030      	beq.n	8003c0c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5e      	ldr	r2, [pc, #376]	; (8003d28 <HAL_RCC_OscConfig+0x33c>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bbe:	4b56      	ldr	r3, [pc, #344]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0049      	lsls	r1, r1, #1
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fe f84c 	bl	8001c68 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fe f847 	bl	8001c68 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1fe      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf4:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a4a      	ldr	r2, [pc, #296]	; (8003d24 <HAL_RCC_OscConfig+0x338>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	021a      	lsls	r2, r3, #8
 8003c04:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	e01b      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c0c:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c12:	4949      	ldr	r1, [pc, #292]	; (8003d38 <HAL_RCC_OscConfig+0x34c>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe f826 	bl	8001c68 <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe f821 	bl	8001c68 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1d8      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c34:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x236>
 8003c40:	e000      	b.n	8003c44 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d047      	beq.n	8003cde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c4e:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2238      	movs	r2, #56	; 0x38
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b18      	cmp	r3, #24
 8003c58:	d10a      	bne.n	8003c70 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5e:	2202      	movs	r2, #2
 8003c60:	4013      	ands	r3, r2
 8003c62:	d03c      	beq.n	8003cde <HAL_RCC_OscConfig+0x2f2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d138      	bne.n	8003cde <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e1ba      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d019      	beq.n	8003cac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	2101      	movs	r1, #1
 8003c80:	430a      	orrs	r2, r1
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd fff0 	bl	8001c68 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fd ffeb 	bl	8001c68 <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e1a2      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d0f1      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2a2>
 8003caa:	e018      	b.n	8003cde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003cac:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	438a      	bics	r2, r1
 8003cb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd ffd6 	bl	8001c68 <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fd ffd1 	bl	8001c68 <HAL_GetTick>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e188      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd8:	2202      	movs	r2, #2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d1f1      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d100      	bne.n	8003cea <HAL_RCC_OscConfig+0x2fe>
 8003ce8:	e0c6      	b.n	8003e78 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cea:	231f      	movs	r3, #31
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2238      	movs	r2, #56	; 0x38
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d11e      	bne.n	8003d3c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2202      	movs	r2, #2
 8003d04:	4013      	ands	r3, r2
 8003d06:	d100      	bne.n	8003d0a <HAL_RCC_OscConfig+0x31e>
 8003d08:	e0b6      	b.n	8003e78 <HAL_RCC_OscConfig+0x48c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d000      	beq.n	8003d14 <HAL_RCC_OscConfig+0x328>
 8003d12:	e0b1      	b.n	8003e78 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e166      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	fffeffff 	.word	0xfffeffff
 8003d20:	fffbffff 	.word	0xfffbffff
 8003d24:	ffff80ff 	.word	0xffff80ff
 8003d28:	ffffc7ff 	.word	0xffffc7ff
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	20000000 	.word	0x20000000
 8003d34:	20000004 	.word	0x20000004
 8003d38:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d3c:	4bac      	ldr	r3, [pc, #688]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	055b      	lsls	r3, r3, #21
 8003d44:	4013      	ands	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_OscConfig+0x360>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x362>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d011      	beq.n	8003d76 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4ba7      	ldr	r3, [pc, #668]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d56:	4ba6      	ldr	r3, [pc, #664]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0549      	lsls	r1, r1, #21
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d60:	4ba3      	ldr	r3, [pc, #652]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	055b      	lsls	r3, r3, #21
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d6e:	231f      	movs	r3, #31
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d76:	4b9f      	ldr	r3, [pc, #636]	; (8003ff4 <HAL_RCC_OscConfig+0x608>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d11a      	bne.n	8003db8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d82:	4b9c      	ldr	r3, [pc, #624]	; (8003ff4 <HAL_RCC_OscConfig+0x608>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b9b      	ldr	r3, [pc, #620]	; (8003ff4 <HAL_RCC_OscConfig+0x608>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	0049      	lsls	r1, r1, #1
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d90:	f7fd ff6a 	bl	8001c68 <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fd ff65 	bl	8001c68 <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e11c      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dac:	4b91      	ldr	r3, [pc, #580]	; (8003ff4 <HAL_RCC_OscConfig+0x608>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4013      	ands	r3, r2
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x3e2>
 8003dc0:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dcc:	e01c      	b.n	8003e08 <HAL_RCC_OscConfig+0x41c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x404>
 8003dd6:	4b86      	ldr	r3, [pc, #536]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dda:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003ddc:	2104      	movs	r1, #4
 8003dde:	430a      	orrs	r2, r1
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003de2:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003de4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003de6:	4b82      	ldr	r3, [pc, #520]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	430a      	orrs	r2, r1
 8003dec:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x41c>
 8003df0:	4b7f      	ldr	r3, [pc, #508]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003df4:	4b7e      	ldr	r3, [pc, #504]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	438a      	bics	r2, r1
 8003dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dfc:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e00:	4b7b      	ldr	r3, [pc, #492]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e02:	2104      	movs	r1, #4
 8003e04:	438a      	bics	r2, r1
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d014      	beq.n	8003e3a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fd ff2a 	bl	8001c68 <HAL_GetTick>
 8003e14:	0003      	movs	r3, r0
 8003e16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e18:	e009      	b.n	8003e2e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fd ff25 	bl	8001c68 <HAL_GetTick>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	4a74      	ldr	r2, [pc, #464]	; (8003ff8 <HAL_RCC_OscConfig+0x60c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0db      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	4b70      	ldr	r3, [pc, #448]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	2202      	movs	r2, #2
 8003e34:	4013      	ands	r3, r2
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x42e>
 8003e38:	e013      	b.n	8003e62 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fd ff15 	bl	8001c68 <HAL_GetTick>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e42:	e009      	b.n	8003e58 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd ff10 	bl	8001c68 <HAL_GetTick>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	4a6a      	ldr	r2, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x60c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0c6      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e62:	231f      	movs	r3, #31
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	4b5f      	ldr	r3, [pc, #380]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e72:	4962      	ldr	r1, [pc, #392]	; (8003ffc <HAL_RCC_OscConfig+0x610>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d100      	bne.n	8003e82 <HAL_RCC_OscConfig+0x496>
 8003e80:	e0b0      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e82:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2238      	movs	r2, #56	; 0x38
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d100      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4a4>
 8003e8e:	e078      	b.n	8003f82 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d153      	bne.n	8003f40 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e98:	4b55      	ldr	r3, [pc, #340]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b54      	ldr	r3, [pc, #336]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003e9e:	4958      	ldr	r1, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x614>)
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fee0 	bl	8001c68 <HAL_GetTick>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fd fedb 	bl	8001c68 <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e092      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec0:	4b4b      	ldr	r3, [pc, #300]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	049b      	lsls	r3, r3, #18
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ecc:	4b48      	ldr	r3, [pc, #288]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a4c      	ldr	r2, [pc, #304]	; (8004004 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1a      	ldr	r2, [r3, #32]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efa:	4b3d      	ldr	r3, [pc, #244]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	0449      	lsls	r1, r1, #17
 8003f04:	430a      	orrs	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f08:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	0549      	lsls	r1, r1, #21
 8003f12:	430a      	orrs	r2, r1
 8003f14:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd fea7 	bl	8001c68 <HAL_GetTick>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fd fea2 	bl	8001c68 <HAL_GetTick>
 8003f24:	0002      	movs	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e059      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	049b      	lsls	r3, r3, #18
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x534>
 8003f3e:	e051      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f46:	492e      	ldr	r1, [pc, #184]	; (8004000 <HAL_RCC_OscConfig+0x614>)
 8003f48:	400a      	ands	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fe8c 	bl	8001c68 <HAL_GetTick>
 8003f50:	0003      	movs	r3, r0
 8003f52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fd fe87 	bl	8001c68 <HAL_GetTick>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e03e      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f68:	4b21      	ldr	r3, [pc, #132]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	049b      	lsls	r3, r3, #18
 8003f70:	4013      	ands	r3, r2
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003f74:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f7a:	4923      	ldr	r1, [pc, #140]	; (8004008 <HAL_RCC_OscConfig+0x61c>)
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	e030      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e02b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <HAL_RCC_OscConfig+0x604>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2203      	movs	r2, #3
 8003f98:	401a      	ands	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d11e      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2270      	movs	r2, #112	; 0x70
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d117      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	23fe      	movs	r3, #254	; 0xfe
 8003fb4:	01db      	lsls	r3, r3, #7
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d10e      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	23f8      	movs	r3, #248	; 0xf8
 8003fc6:	039b      	lsls	r3, r3, #14
 8003fc8:	401a      	ands	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	0f5b      	lsrs	r3, r3, #29
 8003fd6:	075a      	lsls	r2, r3, #29
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b008      	add	sp, #32
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	00001388 	.word	0x00001388
 8003ffc:	efffffff 	.word	0xefffffff
 8004000:	feffffff 	.word	0xfeffffff
 8004004:	1fc1808c 	.word	0x1fc1808c
 8004008:	effefffc 	.word	0xeffefffc

0800400c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0e9      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b76      	ldr	r3, [pc, #472]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2207      	movs	r2, #7
 8004026:	4013      	ands	r3, r2
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d91e      	bls.n	800406c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b73      	ldr	r3, [pc, #460]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2207      	movs	r2, #7
 8004034:	4393      	bics	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	4b70      	ldr	r3, [pc, #448]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004040:	f7fd fe12 	bl	8001c68 <HAL_GetTick>
 8004044:	0003      	movs	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004048:	e009      	b.n	800405e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404a:	f7fd fe0d 	bl	8001c68 <HAL_GetTick>
 800404e:	0002      	movs	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	4a6a      	ldr	r2, [pc, #424]	; (8004200 <HAL_RCC_ClockConfig+0x1f4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0ca      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2207      	movs	r2, #7
 8004064:	4013      	ands	r3, r2
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d1ee      	bne.n	800404a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2202      	movs	r2, #2
 8004072:	4013      	ands	r3, r2
 8004074:	d015      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2204      	movs	r2, #4
 800407c:	4013      	ands	r3, r2
 800407e:	d006      	beq.n	800408e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004080:	4b60      	ldr	r3, [pc, #384]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	4b5f      	ldr	r3, [pc, #380]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 8004086:	21e0      	movs	r1, #224	; 0xe0
 8004088:	01c9      	lsls	r1, r1, #7
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408e:	4b5d      	ldr	r3, [pc, #372]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4a5d      	ldr	r2, [pc, #372]	; (8004208 <HAL_RCC_ClockConfig+0x1fc>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	4b59      	ldr	r3, [pc, #356]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2201      	movs	r2, #1
 80040a8:	4013      	ands	r3, r2
 80040aa:	d057      	beq.n	800415c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b4:	4b53      	ldr	r3, [pc, #332]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	029b      	lsls	r3, r3, #10
 80040bc:	4013      	ands	r3, r2
 80040be:	d12b      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e097      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040cc:	4b4d      	ldr	r3, [pc, #308]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	049b      	lsls	r3, r3, #18
 80040d4:	4013      	ands	r3, r2
 80040d6:	d11f      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e08b      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e4:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4013      	ands	r3, r2
 80040ee:	d113      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e07f      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d106      	bne.n	800410a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040fc:	4b41      	ldr	r3, [pc, #260]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	2202      	movs	r2, #2
 8004102:	4013      	ands	r3, r2
 8004104:	d108      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e074      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	2202      	movs	r2, #2
 8004110:	4013      	ands	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e06d      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004118:	4b3a      	ldr	r3, [pc, #232]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2207      	movs	r2, #7
 800411e:	4393      	bics	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4b37      	ldr	r3, [pc, #220]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412c:	f7fd fd9c 	bl	8001c68 <HAL_GetTick>
 8004130:	0003      	movs	r3, r0
 8004132:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004134:	e009      	b.n	800414a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004136:	f7fd fd97 	bl	8001c68 <HAL_GetTick>
 800413a:	0002      	movs	r2, r0
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <HAL_RCC_ClockConfig+0x1f4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e054      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2238      	movs	r2, #56	; 0x38
 8004150:	401a      	ands	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	429a      	cmp	r2, r3
 800415a:	d1ec      	bne.n	8004136 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2207      	movs	r2, #7
 8004162:	4013      	ands	r3, r2
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d21e      	bcs.n	80041a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2207      	movs	r2, #7
 8004170:	4393      	bics	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800417c:	f7fd fd74 	bl	8001c68 <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004184:	e009      	b.n	800419a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f7fd fd6f 	bl	8001c68 <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_RCC_ClockConfig+0x1f4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e02c      	b.n	80041f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2207      	movs	r2, #7
 80041a0:	4013      	ands	r3, r2
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d1ee      	bne.n	8004186 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2204      	movs	r2, #4
 80041ae:	4013      	ands	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <HAL_RCC_ClockConfig+0x200>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80041c2:	430a      	orrs	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80041c6:	f000 f829 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041ca:	0001      	movs	r1, r0
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_RCC_ClockConfig+0x1f8>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	220f      	movs	r2, #15
 80041d4:	401a      	ands	r2, r3
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <HAL_RCC_ClockConfig+0x204>)
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	58d3      	ldr	r3, [r2, r3]
 80041dc:	221f      	movs	r2, #31
 80041de:	4013      	ands	r3, r2
 80041e0:	000a      	movs	r2, r1
 80041e2:	40da      	lsrs	r2, r3
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x208>)
 80041e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x20c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7fd fcdf 	bl	8001bb0 <HAL_InitTick>
 80041f2:	0003      	movs	r3, r0
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40022000 	.word	0x40022000
 8004200:	00001388 	.word	0x00001388
 8004204:	40021000 	.word	0x40021000
 8004208:	fffff0ff 	.word	0xfffff0ff
 800420c:	ffff8fff 	.word	0xffff8fff
 8004210:	08006be4 	.word	0x08006be4
 8004214:	20000000 	.word	0x20000000
 8004218:	20000004 	.word	0x20000004

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004222:	4b3c      	ldr	r3, [pc, #240]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2238      	movs	r2, #56	; 0x38
 8004228:	4013      	ands	r3, r2
 800422a:	d10f      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800422c:	4b39      	ldr	r3, [pc, #228]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0adb      	lsrs	r3, r3, #11
 8004232:	2207      	movs	r2, #7
 8004234:	4013      	ands	r3, r2
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	0013      	movs	r3, r2
 800423c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800423e:	6839      	ldr	r1, [r7, #0]
 8004240:	4835      	ldr	r0, [pc, #212]	; (8004318 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004242:	f7fb ff67 	bl	8000114 <__udivsi3>
 8004246:	0003      	movs	r3, r0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	e05d      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800424c:	4b31      	ldr	r3, [pc, #196]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2238      	movs	r2, #56	; 0x38
 8004252:	4013      	ands	r3, r2
 8004254:	2b08      	cmp	r3, #8
 8004256:	d102      	bne.n	800425e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004258:	4b30      	ldr	r3, [pc, #192]	; (800431c <HAL_RCC_GetSysClockFreq+0x100>)
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	e054      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425e:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2238      	movs	r2, #56	; 0x38
 8004264:	4013      	ands	r3, r2
 8004266:	2b10      	cmp	r3, #16
 8004268:	d138      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800426a:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2203      	movs	r2, #3
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004274:	4b27      	ldr	r3, [pc, #156]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	2207      	movs	r2, #7
 800427c:	4013      	ands	r3, r2
 800427e:	3301      	adds	r3, #1
 8004280:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d10d      	bne.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	4824      	ldr	r0, [pc, #144]	; (800431c <HAL_RCC_GetSysClockFreq+0x100>)
 800428c:	f7fb ff42 	bl	8000114 <__udivsi3>
 8004290:	0003      	movs	r3, r0
 8004292:	0019      	movs	r1, r3
 8004294:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	227f      	movs	r2, #127	; 0x7f
 800429c:	4013      	ands	r3, r2
 800429e:	434b      	muls	r3, r1
 80042a0:	617b      	str	r3, [r7, #20]
        break;
 80042a2:	e00d      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	481c      	ldr	r0, [pc, #112]	; (8004318 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042a8:	f7fb ff34 	bl	8000114 <__udivsi3>
 80042ac:	0003      	movs	r3, r0
 80042ae:	0019      	movs	r1, r3
 80042b0:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	227f      	movs	r2, #127	; 0x7f
 80042b8:	4013      	ands	r3, r2
 80042ba:	434b      	muls	r3, r1
 80042bc:	617b      	str	r3, [r7, #20]
        break;
 80042be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0f5b      	lsrs	r3, r3, #29
 80042c6:	2207      	movs	r2, #7
 80042c8:	4013      	ands	r3, r2
 80042ca:	3301      	adds	r3, #1
 80042cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	6978      	ldr	r0, [r7, #20]
 80042d2:	f7fb ff1f 	bl	8000114 <__udivsi3>
 80042d6:	0003      	movs	r3, r0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e015      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2238      	movs	r2, #56	; 0x38
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d103      	bne.n	80042f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e00b      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2238      	movs	r2, #56	; 0x38
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b18      	cmp	r3, #24
 80042fa:	d103      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80042fc:	23fa      	movs	r3, #250	; 0xfa
 80042fe:	01db      	lsls	r3, r3, #7
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e001      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004308:	693b      	ldr	r3, [r7, #16]
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b006      	add	sp, #24
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	40021000 	.word	0x40021000
 8004318:	00f42400 	.word	0x00f42400
 800431c:	007a1200 	.word	0x007a1200

08004320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004324:	4b02      	ldr	r3, [pc, #8]	; (8004330 <HAL_RCC_GetHCLKFreq+0x10>)
 8004326:	681b      	ldr	r3, [r3, #0]
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	20000000 	.word	0x20000000

08004334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004334:	b5b0      	push	{r4, r5, r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004338:	f7ff fff2 	bl	8004320 <HAL_RCC_GetHCLKFreq>
 800433c:	0004      	movs	r4, r0
 800433e:	f7ff fb49 	bl	80039d4 <LL_RCC_GetAPB1Prescaler>
 8004342:	0003      	movs	r3, r0
 8004344:	0b1a      	lsrs	r2, r3, #12
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004348:	0092      	lsls	r2, r2, #2
 800434a:	58d3      	ldr	r3, [r2, r3]
 800434c:	221f      	movs	r2, #31
 800434e:	4013      	ands	r3, r2
 8004350:	40dc      	lsrs	r4, r3
 8004352:	0023      	movs	r3, r4
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	bdb0      	pop	{r4, r5, r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	08006c24 	.word	0x08006c24

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004368:	2313      	movs	r3, #19
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004370:	2312      	movs	r3, #18
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	4013      	ands	r3, r2
 8004382:	d100      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004384:	e0a3      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2011      	movs	r0, #17
 8004388:	183b      	adds	r3, r7, r0
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438e:	4b7f      	ldr	r3, [pc, #508]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	055b      	lsls	r3, r3, #21
 8004396:	4013      	ands	r3, r2
 8004398:	d110      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439a:	4b7c      	ldr	r3, [pc, #496]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800439c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439e:	4b7b      	ldr	r3, [pc, #492]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043a0:	2180      	movs	r1, #128	; 0x80
 80043a2:	0549      	lsls	r1, r1, #21
 80043a4:	430a      	orrs	r2, r1
 80043a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80043a8:	4b78      	ldr	r3, [pc, #480]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	055b      	lsls	r3, r3, #21
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b6:	183b      	adds	r3, r7, r0
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043bc:	4b74      	ldr	r3, [pc, #464]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b73      	ldr	r3, [pc, #460]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	0049      	lsls	r1, r1, #1
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ca:	f7fd fc4d 	bl	8001c68 <HAL_GetTick>
 80043ce:	0003      	movs	r3, r0
 80043d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043d2:	e00b      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d4:	f7fd fc48 	bl	8001c68 <HAL_GetTick>
 80043d8:	0002      	movs	r2, r0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d904      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80043e2:	2313      	movs	r3, #19
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	2203      	movs	r2, #3
 80043e8:	701a      	strb	r2, [r3, #0]
        break;
 80043ea:	e005      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043ec:	4b68      	ldr	r3, [pc, #416]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4013      	ands	r3, r2
 80043f6:	d0ed      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80043f8:	2313      	movs	r3, #19
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d154      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004402:	4b62      	ldr	r3, [pc, #392]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004406:	23c0      	movs	r3, #192	; 0xc0
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4013      	ands	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d019      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	429a      	cmp	r2, r3
 800441c:	d014      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800441e:	4b5b      	ldr	r3, [pc, #364]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004422:	4a5c      	ldr	r2, [pc, #368]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004424:	4013      	ands	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004428:	4b58      	ldr	r3, [pc, #352]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800442a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800442c:	4b57      	ldr	r3, [pc, #348]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	0249      	lsls	r1, r1, #9
 8004432:	430a      	orrs	r2, r1
 8004434:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004436:	4b55      	ldr	r3, [pc, #340]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004438:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800443a:	4b54      	ldr	r3, [pc, #336]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800443c:	4956      	ldr	r1, [pc, #344]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800443e:	400a      	ands	r2, r1
 8004440:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004442:	4b52      	ldr	r3, [pc, #328]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2201      	movs	r2, #1
 800444c:	4013      	ands	r3, r2
 800444e:	d016      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd fc0a 	bl	8001c68 <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004458:	e00c      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7fd fc05 	bl	8001c68 <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	4a4d      	ldr	r2, [pc, #308]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d904      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800446a:	2313      	movs	r3, #19
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	2203      	movs	r2, #3
 8004470:	701a      	strb	r2, [r3, #0]
            break;
 8004472:	e004      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004474:	4b45      	ldr	r3, [pc, #276]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	2202      	movs	r2, #2
 800447a:	4013      	ands	r3, r2
 800447c:	d0ed      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800447e:	2313      	movs	r3, #19
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004488:	4b40      	ldr	r3, [pc, #256]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	4a41      	ldr	r2, [pc, #260]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004498:	430a      	orrs	r2, r1
 800449a:	65da      	str	r2, [r3, #92]	; 0x5c
 800449c:	e00c      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800449e:	2312      	movs	r3, #18
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2213      	movs	r2, #19
 80044a4:	18ba      	adds	r2, r7, r2
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e005      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	2312      	movs	r3, #18
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2213      	movs	r2, #19
 80044b2:	18ba      	adds	r2, r7, r2
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044b8:	2311      	movs	r3, #17
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d105      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c2:	4b32      	ldr	r3, [pc, #200]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80044c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80044c8:	4935      	ldr	r1, [pc, #212]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044ca:	400a      	ands	r2, r1
 80044cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2201      	movs	r2, #1
 80044d4:	4013      	ands	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044d8:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	2203      	movs	r2, #3
 80044de:	4393      	bics	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4b29      	ldr	r3, [pc, #164]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80044e8:	430a      	orrs	r2, r1
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2220      	movs	r2, #32
 80044f2:	4013      	ands	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	4a2a      	ldr	r2, [pc, #168]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	0019      	movs	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004506:	430a      	orrs	r2, r1
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4013      	ands	r3, r2
 8004514:	d015      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004516:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	0899      	lsrs	r1, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	4b1a      	ldr	r3, [pc, #104]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004524:	430a      	orrs	r2, r1
 8004526:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	05db      	lsls	r3, r3, #23
 8004530:	429a      	cmp	r2, r3
 8004532:	d106      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004534:	4b15      	ldr	r3, [pc, #84]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4b14      	ldr	r3, [pc, #80]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800453a:	2180      	movs	r1, #128	; 0x80
 800453c:	0249      	lsls	r1, r1, #9
 800453e:	430a      	orrs	r2, r1
 8004540:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4013      	ands	r3, r2
 800454c:	d016      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800454e:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004554:	4013      	ands	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800455e:	430a      	orrs	r2, r1
 8004560:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	01db      	lsls	r3, r3, #7
 800456a:	429a      	cmp	r2, r3
 800456c:	d106      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	0249      	lsls	r1, r1, #9
 8004578:	430a      	orrs	r2, r1
 800457a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800457c:	2312      	movs	r3, #18
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	781b      	ldrb	r3, [r3, #0]
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b006      	add	sp, #24
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	40021000 	.word	0x40021000
 8004590:	40007000 	.word	0x40007000
 8004594:	fffffcff 	.word	0xfffffcff
 8004598:	fffeffff 	.word	0xfffeffff
 800459c:	00001388 	.word	0x00001388
 80045a0:	efffffff 	.word	0xefffffff
 80045a4:	ffffcfff 	.word	0xffffcfff
 80045a8:	ffff3fff 	.word	0xffff3fff

080045ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e04a      	b.n	8004654 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	223d      	movs	r2, #61	; 0x3d
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	223c      	movs	r2, #60	; 0x3c
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7fd f973 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	223d      	movs	r2, #61	; 0x3d
 80045de:	2102      	movs	r1, #2
 80045e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	0019      	movs	r1, r3
 80045ec:	0010      	movs	r0, r2
 80045ee:	f000 fb43 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2248      	movs	r2, #72	; 0x48
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223e      	movs	r2, #62	; 0x3e
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	223f      	movs	r2, #63	; 0x3f
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2240      	movs	r2, #64	; 0x40
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2241      	movs	r2, #65	; 0x41
 8004616:	2101      	movs	r1, #1
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2242      	movs	r2, #66	; 0x42
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2243      	movs	r2, #67	; 0x43
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2244      	movs	r2, #68	; 0x44
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2245      	movs	r2, #69	; 0x45
 8004636:	2101      	movs	r1, #1
 8004638:	5499      	strb	r1, [r3, r2]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2246      	movs	r2, #70	; 0x46
 800463e:	2101      	movs	r1, #1
 8004640:	5499      	strb	r1, [r3, r2]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2247      	movs	r2, #71	; 0x47
 8004646:	2101      	movs	r1, #1
 8004648:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	223d      	movs	r2, #61	; 0x3d
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e04a      	b.n	8004704 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	223d      	movs	r2, #61	; 0x3d
 8004672:	5c9b      	ldrb	r3, [r3, r2]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	223c      	movs	r2, #60	; 0x3c
 800467e:	2100      	movs	r1, #0
 8004680:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 f841 	bl	800470c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	223d      	movs	r2, #61	; 0x3d
 800468e:	2102      	movs	r1, #2
 8004690:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	0019      	movs	r1, r3
 800469c:	0010      	movs	r0, r2
 800469e:	f000 faeb 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2248      	movs	r2, #72	; 0x48
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	223e      	movs	r2, #62	; 0x3e
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	223f      	movs	r2, #63	; 0x3f
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2240      	movs	r2, #64	; 0x40
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2241      	movs	r2, #65	; 0x41
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2242      	movs	r2, #66	; 0x42
 80046ce:	2101      	movs	r1, #1
 80046d0:	5499      	strb	r1, [r3, r2]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2243      	movs	r2, #67	; 0x43
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2244      	movs	r2, #68	; 0x44
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2245      	movs	r2, #69	; 0x45
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2246      	movs	r2, #70	; 0x46
 80046ee:	2101      	movs	r1, #1
 80046f0:	5499      	strb	r1, [r3, r2]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2247      	movs	r2, #71	; 0x47
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	223d      	movs	r2, #61	; 0x3d
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	0018      	movs	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b002      	add	sp, #8
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d108      	bne.n	800473e <HAL_TIM_PWM_Start+0x22>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	223e      	movs	r2, #62	; 0x3e
 8004730:	5c9b      	ldrb	r3, [r3, r2]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	1e5a      	subs	r2, r3, #1
 8004738:	4193      	sbcs	r3, r2
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e037      	b.n	80047ae <HAL_TIM_PWM_Start+0x92>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b04      	cmp	r3, #4
 8004742:	d108      	bne.n	8004756 <HAL_TIM_PWM_Start+0x3a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	223f      	movs	r2, #63	; 0x3f
 8004748:	5c9b      	ldrb	r3, [r3, r2]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	1e5a      	subs	r2, r3, #1
 8004750:	4193      	sbcs	r3, r2
 8004752:	b2db      	uxtb	r3, r3
 8004754:	e02b      	b.n	80047ae <HAL_TIM_PWM_Start+0x92>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b08      	cmp	r3, #8
 800475a:	d108      	bne.n	800476e <HAL_TIM_PWM_Start+0x52>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2240      	movs	r2, #64	; 0x40
 8004760:	5c9b      	ldrb	r3, [r3, r2]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	4193      	sbcs	r3, r2
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e01f      	b.n	80047ae <HAL_TIM_PWM_Start+0x92>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d108      	bne.n	8004786 <HAL_TIM_PWM_Start+0x6a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2241      	movs	r2, #65	; 0x41
 8004778:	5c9b      	ldrb	r3, [r3, r2]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	4193      	sbcs	r3, r2
 8004782:	b2db      	uxtb	r3, r3
 8004784:	e013      	b.n	80047ae <HAL_TIM_PWM_Start+0x92>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b10      	cmp	r3, #16
 800478a:	d108      	bne.n	800479e <HAL_TIM_PWM_Start+0x82>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2242      	movs	r2, #66	; 0x42
 8004790:	5c9b      	ldrb	r3, [r3, r2]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	1e5a      	subs	r2, r3, #1
 8004798:	4193      	sbcs	r3, r2
 800479a:	b2db      	uxtb	r3, r3
 800479c:	e007      	b.n	80047ae <HAL_TIM_PWM_Start+0x92>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2243      	movs	r2, #67	; 0x43
 80047a2:	5c9b      	ldrb	r3, [r3, r2]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	1e5a      	subs	r2, r3, #1
 80047aa:	4193      	sbcs	r3, r2
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e07b      	b.n	80048ae <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_PWM_Start+0xaa>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	223e      	movs	r2, #62	; 0x3e
 80047c0:	2102      	movs	r1, #2
 80047c2:	5499      	strb	r1, [r3, r2]
 80047c4:	e023      	b.n	800480e <HAL_TIM_PWM_Start+0xf2>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_PWM_Start+0xba>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	223f      	movs	r2, #63	; 0x3f
 80047d0:	2102      	movs	r1, #2
 80047d2:	5499      	strb	r1, [r3, r2]
 80047d4:	e01b      	b.n	800480e <HAL_TIM_PWM_Start+0xf2>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0xca>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	2102      	movs	r1, #2
 80047e2:	5499      	strb	r1, [r3, r2]
 80047e4:	e013      	b.n	800480e <HAL_TIM_PWM_Start+0xf2>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0xda>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2241      	movs	r2, #65	; 0x41
 80047f0:	2102      	movs	r1, #2
 80047f2:	5499      	strb	r1, [r3, r2]
 80047f4:	e00b      	b.n	800480e <HAL_TIM_PWM_Start+0xf2>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0xea>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2242      	movs	r2, #66	; 0x42
 8004800:	2102      	movs	r1, #2
 8004802:	5499      	strb	r1, [r3, r2]
 8004804:	e003      	b.n	800480e <HAL_TIM_PWM_Start+0xf2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2243      	movs	r2, #67	; 0x43
 800480a:	2102      	movs	r1, #2
 800480c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	2201      	movs	r2, #1
 8004816:	0018      	movs	r0, r3
 8004818:	f000 fdd2 	bl	80053c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a25      	ldr	r2, [pc, #148]	; (80048b8 <HAL_TIM_PWM_Start+0x19c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_TIM_PWM_Start+0x11e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a24      	ldr	r2, [pc, #144]	; (80048bc <HAL_TIM_PWM_Start+0x1a0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIM_PWM_Start+0x11e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <HAL_TIM_PWM_Start+0x1a4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_TIM_PWM_Start+0x122>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_TIM_PWM_Start+0x124>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2180      	movs	r1, #128	; 0x80
 8004850:	0209      	lsls	r1, r1, #8
 8004852:	430a      	orrs	r2, r1
 8004854:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_TIM_PWM_Start+0x19c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_TIM_PWM_Start+0x14e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <HAL_TIM_PWM_Start+0x1a8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d116      	bne.n	8004898 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <HAL_TIM_PWM_Start+0x1ac>)
 8004872:	4013      	ands	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b06      	cmp	r3, #6
 800487a:	d016      	beq.n	80048aa <HAL_TIM_PWM_Start+0x18e>
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	025b      	lsls	r3, r3, #9
 8004882:	429a      	cmp	r2, r3
 8004884:	d011      	beq.n	80048aa <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2101      	movs	r1, #1
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	e008      	b.n	80048aa <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2101      	movs	r1, #1
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e000      	b.n	80048ac <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b004      	add	sp, #16
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800
 80048c4:	40000400 	.word	0x40000400
 80048c8:	00010007 	.word	0x00010007

080048cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d8:	2317      	movs	r3, #23
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	223c      	movs	r2, #60	; 0x3c
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0e5      	b.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	223c      	movs	r2, #60	; 0x3c
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b14      	cmp	r3, #20
 80048fa:	d900      	bls.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80048fc:	e0d1      	b.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	009a      	lsls	r2, r3, #2
 8004902:	4b70      	ldr	r3, [pc, #448]	; (8004ac4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004904:	18d3      	adds	r3, r2, r3
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0011      	movs	r1, r2
 8004912:	0018      	movs	r0, r3
 8004914:	f000 fa1c 	bl	8004d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2108      	movs	r1, #8
 8004924:	430a      	orrs	r2, r1
 8004926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2104      	movs	r1, #4
 8004934:	438a      	bics	r2, r1
 8004936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6999      	ldr	r1, [r3, #24]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	619a      	str	r2, [r3, #24]
      break;
 800494a:	e0af      	b.n	8004aac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	0011      	movs	r1, r2
 8004954:	0018      	movs	r0, r3
 8004956:	f000 fa7b 	bl	8004e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	0109      	lsls	r1, r1, #4
 8004968:	430a      	orrs	r2, r1
 800496a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4954      	ldr	r1, [pc, #336]	; (8004ac8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004978:	400a      	ands	r2, r1
 800497a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6999      	ldr	r1, [r3, #24]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	021a      	lsls	r2, r3, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	619a      	str	r2, [r3, #24]
      break;
 8004990:	e08c      	b.n	8004aac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0011      	movs	r1, r2
 800499a:	0018      	movs	r0, r3
 800499c:	f000 fad6 	bl	8004f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2108      	movs	r1, #8
 80049ac:	430a      	orrs	r2, r1
 80049ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2104      	movs	r1, #4
 80049bc:	438a      	bics	r2, r1
 80049be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69d9      	ldr	r1, [r3, #28]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	61da      	str	r2, [r3, #28]
      break;
 80049d2:	e06b      	b.n	8004aac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	0011      	movs	r1, r2
 80049dc:	0018      	movs	r0, r3
 80049de:	f000 fb37 	bl	8005050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	0109      	lsls	r1, r1, #4
 80049f0:	430a      	orrs	r2, r1
 80049f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69da      	ldr	r2, [r3, #28]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4932      	ldr	r1, [pc, #200]	; (8004ac8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69d9      	ldr	r1, [r3, #28]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	61da      	str	r2, [r3, #28]
      break;
 8004a18:	e048      	b.n	8004aac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	0011      	movs	r1, r2
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 fb78 	bl	8005118 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2108      	movs	r1, #8
 8004a34:	430a      	orrs	r2, r1
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2104      	movs	r1, #4
 8004a44:	438a      	bics	r2, r1
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a5a:	e027      	b.n	8004aac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	0011      	movs	r1, r2
 8004a64:	0018      	movs	r0, r3
 8004a66:	f000 fbb1 	bl	80051cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	0109      	lsls	r1, r1, #4
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4910      	ldr	r1, [pc, #64]	; (8004ac8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004a88:	400a      	ands	r2, r1
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	021a      	lsls	r2, r3, #8
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aa0:	e004      	b.n	8004aac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004aa2:	2317      	movs	r3, #23
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
      break;
 8004aaa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	223c      	movs	r2, #60	; 0x3c
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

  return status;
 8004ab4:	2317      	movs	r3, #23
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b006      	add	sp, #24
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	08006c44 	.word	0x08006c44
 8004ac8:	fffffbff 	.word	0xfffffbff

08004acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	223c      	movs	r2, #60	; 0x3c
 8004ae2:	5c9b      	ldrb	r3, [r3, r2]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIM_ConfigClockSource+0x20>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e0bc      	b.n	8004c66 <HAL_TIM_ConfigClockSource+0x19a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	223c      	movs	r2, #60	; 0x3c
 8004af0:	2101      	movs	r1, #1
 8004af2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	223d      	movs	r2, #61	; 0x3d
 8004af8:	2102      	movs	r1, #2
 8004afa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a5a      	ldr	r2, [pc, #360]	; (8004c70 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4a59      	ldr	r2, [pc, #356]	; (8004c74 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	0192      	lsls	r2, r2, #6
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d040      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0xde>
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	0192      	lsls	r2, r2, #6
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d900      	bls.n	8004b32 <HAL_TIM_ConfigClockSource+0x66>
 8004b30:	e088      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	0152      	lsls	r2, r2, #5
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d100      	bne.n	8004b3c <HAL_TIM_ConfigClockSource+0x70>
 8004b3a:	e088      	b.n	8004c4e <HAL_TIM_ConfigClockSource+0x182>
 8004b3c:	2280      	movs	r2, #128	; 0x80
 8004b3e:	0152      	lsls	r2, r2, #5
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d900      	bls.n	8004b46 <HAL_TIM_ConfigClockSource+0x7a>
 8004b44:	e07e      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b46:	2b70      	cmp	r3, #112	; 0x70
 8004b48:	d018      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0xb0>
 8004b4a:	d900      	bls.n	8004b4e <HAL_TIM_ConfigClockSource+0x82>
 8004b4c:	e07a      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b4e:	2b60      	cmp	r3, #96	; 0x60
 8004b50:	d04f      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x126>
 8004b52:	d900      	bls.n	8004b56 <HAL_TIM_ConfigClockSource+0x8a>
 8004b54:	e076      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b56:	2b50      	cmp	r3, #80	; 0x50
 8004b58:	d03b      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x106>
 8004b5a:	d900      	bls.n	8004b5e <HAL_TIM_ConfigClockSource+0x92>
 8004b5c:	e072      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	d057      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x146>
 8004b62:	d900      	bls.n	8004b66 <HAL_TIM_ConfigClockSource+0x9a>
 8004b64:	e06e      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b66:	2b30      	cmp	r3, #48	; 0x30
 8004b68:	d063      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x166>
 8004b6a:	d86b      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d060      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x166>
 8004b70:	d868      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d05d      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x166>
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d05b      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x166>
 8004b7a:	e063      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6899      	ldr	r1, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f000 fbf8 	bl	8005380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2277      	movs	r2, #119	; 0x77
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
      break;
 8004ba8:	e052      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6899      	ldr	r1, [r3, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f000 fbe1 	bl	8005380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2180      	movs	r1, #128	; 0x80
 8004bca:	01c9      	lsls	r1, r1, #7
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]
      break;
 8004bd0:	e03e      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	001a      	movs	r2, r3
 8004be0:	f000 fb52 	bl	8005288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2150      	movs	r1, #80	; 0x50
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 fbac 	bl	8005348 <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e02e      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	001a      	movs	r2, r3
 8004c00:	f000 fb70 	bl	80052e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2160      	movs	r1, #96	; 0x60
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 fb9c 	bl	8005348 <TIM_ITRx_SetConfig>
      break;
 8004c10:	e01e      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	001a      	movs	r2, r3
 8004c20:	f000 fb32 	bl	8005288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f000 fb8c 	bl	8005348 <TIM_ITRx_SetConfig>
      break;
 8004c30:	e00e      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	0010      	movs	r0, r2
 8004c3e:	f000 fb83 	bl	8005348 <TIM_ITRx_SetConfig>
      break;
 8004c42:	e005      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004c44:	230f      	movs	r3, #15
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
      break;
 8004c4c:	e000      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004c4e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	223d      	movs	r2, #61	; 0x3d
 8004c54:	2101      	movs	r1, #1
 8004c56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	223c      	movs	r2, #60	; 0x3c
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	5499      	strb	r1, [r3, r2]

  return status;
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	781b      	ldrb	r3, [r3, #0]
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b004      	add	sp, #16
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	ffceff88 	.word	0xffceff88
 8004c74:	ffff00ff 	.word	0xffff00ff

08004c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <TIM_Base_SetConfig+0xc0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_Base_SetConfig+0x20>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <TIM_Base_SetConfig+0xc4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d108      	bne.n	8004caa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2270      	movs	r2, #112	; 0x70
 8004c9c:	4393      	bics	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <TIM_Base_SetConfig+0xc0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_Base_SetConfig+0x5a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a21      	ldr	r2, [pc, #132]	; (8004d3c <TIM_Base_SetConfig+0xc4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_Base_SetConfig+0x5a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <TIM_Base_SetConfig+0xc8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_Base_SetConfig+0x5a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <TIM_Base_SetConfig+0xcc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_Base_SetConfig+0x5a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <TIM_Base_SetConfig+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <TIM_Base_SetConfig+0xd4>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2280      	movs	r2, #128	; 0x80
 8004ce8:	4393      	bics	r3, r2
 8004cea:	001a      	movs	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <TIM_Base_SetConfig+0xc0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <TIM_Base_SetConfig+0xaa>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a0b      	ldr	r2, [pc, #44]	; (8004d44 <TIM_Base_SetConfig+0xcc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_Base_SetConfig+0xaa>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a0a      	ldr	r2, [pc, #40]	; (8004d48 <TIM_Base_SetConfig+0xd0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d103      	bne.n	8004d2a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	615a      	str	r2, [r3, #20]
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40002000 	.word	0x40002000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800
 8004d4c:	fffffcff 	.word	0xfffffcff

08004d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	4393      	bics	r3, r2
 8004d62:	001a      	movs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a2e      	ldr	r2, [pc, #184]	; (8004e38 <TIM_OC1_SetConfig+0xe8>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2203      	movs	r2, #3
 8004d86:	4393      	bics	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2202      	movs	r2, #2
 8004d98:	4393      	bics	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a24      	ldr	r2, [pc, #144]	; (8004e3c <TIM_OC1_SetConfig+0xec>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_OC1_SetConfig+0x6e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a23      	ldr	r2, [pc, #140]	; (8004e40 <TIM_OC1_SetConfig+0xf0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_OC1_SetConfig+0x6e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <TIM_OC1_SetConfig+0xf4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10c      	bne.n	8004dd8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	4393      	bics	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <TIM_OC1_SetConfig+0xec>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_OC1_SetConfig+0xa0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <TIM_OC1_SetConfig+0xf0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_OC1_SetConfig+0xa0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a16      	ldr	r2, [pc, #88]	; (8004e44 <TIM_OC1_SetConfig+0xf4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d111      	bne.n	8004e14 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <TIM_OC1_SetConfig+0xf8>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <TIM_OC1_SetConfig+0xfc>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b006      	add	sp, #24
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	fffeff8f 	.word	0xfffeff8f
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800
 8004e48:	fffffeff 	.word	0xfffffeff
 8004e4c:	fffffdff 	.word	0xfffffdff

08004e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	2210      	movs	r2, #16
 8004e60:	4393      	bics	r3, r2
 8004e62:	001a      	movs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a2c      	ldr	r2, [pc, #176]	; (8004f30 <TIM_OC2_SetConfig+0xe0>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <TIM_OC2_SetConfig+0xe4>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	4393      	bics	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a22      	ldr	r2, [pc, #136]	; (8004f38 <TIM_OC2_SetConfig+0xe8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d10d      	bne.n	8004ece <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2280      	movs	r2, #128	; 0x80
 8004eb6:	4393      	bics	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2240      	movs	r2, #64	; 0x40
 8004eca:	4393      	bics	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <TIM_OC2_SetConfig+0xe8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <TIM_OC2_SetConfig+0x96>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <TIM_OC2_SetConfig+0xec>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_OC2_SetConfig+0x96>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <TIM_OC2_SetConfig+0xf0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d113      	bne.n	8004f0e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <TIM_OC2_SetConfig+0xf4>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <TIM_OC2_SetConfig+0xf8>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b006      	add	sp, #24
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	feff8fff 	.word	0xfeff8fff
 8004f34:	fffffcff 	.word	0xfffffcff
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40014400 	.word	0x40014400
 8004f40:	40014800 	.word	0x40014800
 8004f44:	fffffbff 	.word	0xfffffbff
 8004f48:	fffff7ff 	.word	0xfffff7ff

08004f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a33      	ldr	r2, [pc, #204]	; (8005028 <TIM_OC3_SetConfig+0xdc>)
 8004f5c:	401a      	ands	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a2d      	ldr	r2, [pc, #180]	; (800502c <TIM_OC3_SetConfig+0xe0>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2203      	movs	r2, #3
 8004f80:	4393      	bics	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4a27      	ldr	r2, [pc, #156]	; (8005030 <TIM_OC3_SetConfig+0xe4>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a23      	ldr	r2, [pc, #140]	; (8005034 <TIM_OC3_SetConfig+0xe8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10d      	bne.n	8004fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <TIM_OC3_SetConfig+0xec>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	; (800503c <TIM_OC3_SetConfig+0xf0>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <TIM_OC3_SetConfig+0xe8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_OC3_SetConfig+0x92>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <TIM_OC3_SetConfig+0xf4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_OC3_SetConfig+0x92>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1a      	ldr	r2, [pc, #104]	; (8005044 <TIM_OC3_SetConfig+0xf8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d113      	bne.n	8005006 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4a19      	ldr	r2, [pc, #100]	; (8005048 <TIM_OC3_SetConfig+0xfc>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <TIM_OC3_SetConfig+0x100>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b006      	add	sp, #24
 8005026:	bd80      	pop	{r7, pc}
 8005028:	fffffeff 	.word	0xfffffeff
 800502c:	fffeff8f 	.word	0xfffeff8f
 8005030:	fffffdff 	.word	0xfffffdff
 8005034:	40012c00 	.word	0x40012c00
 8005038:	fffff7ff 	.word	0xfffff7ff
 800503c:	fffffbff 	.word	0xfffffbff
 8005040:	40014400 	.word	0x40014400
 8005044:	40014800 	.word	0x40014800
 8005048:	ffffefff 	.word	0xffffefff
 800504c:	ffffdfff 	.word	0xffffdfff

08005050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	4a26      	ldr	r2, [pc, #152]	; (80050f8 <TIM_OC4_SetConfig+0xa8>)
 8005060:	401a      	ands	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a20      	ldr	r2, [pc, #128]	; (80050fc <TIM_OC4_SetConfig+0xac>)
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <TIM_OC4_SetConfig+0xb0>)
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <TIM_OC4_SetConfig+0xb4>)
 8005098:	4013      	ands	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	031b      	lsls	r3, r3, #12
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <TIM_OC4_SetConfig+0xb8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_OC4_SetConfig+0x70>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a16      	ldr	r2, [pc, #88]	; (800510c <TIM_OC4_SetConfig+0xbc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_OC4_SetConfig+0x70>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a15      	ldr	r2, [pc, #84]	; (8005110 <TIM_OC4_SetConfig+0xc0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d109      	bne.n	80050d4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4a14      	ldr	r2, [pc, #80]	; (8005114 <TIM_OC4_SetConfig+0xc4>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	019b      	lsls	r3, r3, #6
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b006      	add	sp, #24
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	ffffefff 	.word	0xffffefff
 80050fc:	feff8fff 	.word	0xfeff8fff
 8005100:	fffffcff 	.word	0xfffffcff
 8005104:	ffffdfff 	.word	0xffffdfff
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800
 8005114:	ffffbfff 	.word	0xffffbfff

08005118 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <TIM_OC5_SetConfig+0x9c>)
 8005128:	401a      	ands	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <TIM_OC5_SetConfig+0xa0>)
 8005144:	4013      	ands	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4a19      	ldr	r2, [pc, #100]	; (80051bc <TIM_OC5_SetConfig+0xa4>)
 8005156:	4013      	ands	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <TIM_OC5_SetConfig+0xa8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_OC5_SetConfig+0x66>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <TIM_OC5_SetConfig+0xac>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_OC5_SetConfig+0x66>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a13      	ldr	r2, [pc, #76]	; (80051c8 <TIM_OC5_SetConfig+0xb0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d109      	bne.n	8005192 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4a0c      	ldr	r2, [pc, #48]	; (80051b4 <TIM_OC5_SetConfig+0x9c>)
 8005182:	4013      	ands	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b006      	add	sp, #24
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	fffeffff 	.word	0xfffeffff
 80051b8:	fffeff8f 	.word	0xfffeff8f
 80051bc:	fffdffff 	.word	0xfffdffff
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800

080051cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a24      	ldr	r2, [pc, #144]	; (800526c <TIM_OC6_SetConfig+0xa0>)
 80051dc:	401a      	ands	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <TIM_OC6_SetConfig+0xa4>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <TIM_OC6_SetConfig+0xa8>)
 800520c:	4013      	ands	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	051b      	lsls	r3, r3, #20
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a16      	ldr	r2, [pc, #88]	; (8005278 <TIM_OC6_SetConfig+0xac>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_OC6_SetConfig+0x68>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <TIM_OC6_SetConfig+0xb0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC6_SetConfig+0x68>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a14      	ldr	r2, [pc, #80]	; (8005280 <TIM_OC6_SetConfig+0xb4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d109      	bne.n	8005248 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4a13      	ldr	r2, [pc, #76]	; (8005284 <TIM_OC6_SetConfig+0xb8>)
 8005238:	4013      	ands	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	029b      	lsls	r3, r3, #10
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	46bd      	mov	sp, r7
 8005266:	b006      	add	sp, #24
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	ffefffff 	.word	0xffefffff
 8005270:	feff8fff 	.word	0xfeff8fff
 8005274:	ffdfffff 	.word	0xffdfffff
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40014400 	.word	0x40014400
 8005280:	40014800 	.word	0x40014800
 8005284:	fffbffff 	.word	0xfffbffff

08005288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	2201      	movs	r2, #1
 80052a0:	4393      	bics	r3, r2
 80052a2:	001a      	movs	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	22f0      	movs	r2, #240	; 0xf0
 80052b2:	4393      	bics	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	220a      	movs	r2, #10
 80052c4:	4393      	bics	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	46c0      	nop			; (mov r8, r8)
 80052de:	46bd      	mov	sp, r7
 80052e0:	b006      	add	sp, #24
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	2210      	movs	r2, #16
 80052f6:	4393      	bics	r3, r2
 80052f8:	001a      	movs	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <TIM_TI2_ConfigInputStage+0x60>)
 800530e:	4013      	ands	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	031b      	lsls	r3, r3, #12
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	22a0      	movs	r2, #160	; 0xa0
 8005320:	4393      	bics	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	46bd      	mov	sp, r7
 800533e:	b006      	add	sp, #24
 8005340:	bd80      	pop	{r7, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	ffff0fff 	.word	0xffff0fff

08005348 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a08      	ldr	r2, [pc, #32]	; (800537c <TIM_ITRx_SetConfig+0x34>)
 800535c:	4013      	ands	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	2207      	movs	r2, #7
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	609a      	str	r2, [r3, #8]
}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	46bd      	mov	sp, r7
 8005376:	b004      	add	sp, #16
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	ffcfff8f 	.word	0xffcfff8f

08005380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <TIM_ETR_SetConfig+0x3c>)
 8005398:	4013      	ands	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	021a      	lsls	r2, r3, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	609a      	str	r2, [r3, #8]
}
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b006      	add	sp, #24
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	ffff00ff 	.word	0xffff00ff

080053c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	221f      	movs	r2, #31
 80053d0:	4013      	ands	r3, r2
 80053d2:	2201      	movs	r2, #1
 80053d4:	409a      	lsls	r2, r3
 80053d6:	0013      	movs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	43d2      	mvns	r2, r2
 80053e2:	401a      	ands	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	211f      	movs	r1, #31
 80053f0:	400b      	ands	r3, r1
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4099      	lsls	r1, r3
 80053f6:	000b      	movs	r3, r1
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b006      	add	sp, #24
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	223c      	movs	r2, #60	; 0x3c
 8005416:	5c9b      	ldrb	r3, [r3, r2]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800541c:	2302      	movs	r3, #2
 800541e:	e04a      	b.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	223c      	movs	r2, #60	; 0x3c
 8005424:	2101      	movs	r1, #1
 8005426:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	223d      	movs	r2, #61	; 0x3d
 800542c:	2102      	movs	r1, #2
 800542e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1e      	ldr	r2, [pc, #120]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2270      	movs	r2, #112	; 0x70
 8005460:	4393      	bics	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a11      	ldr	r2, [pc, #68]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a10      	ldr	r2, [pc, #64]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d10c      	bne.n	80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2280      	movs	r2, #128	; 0x80
 800548e:	4393      	bics	r3, r2
 8005490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	4313      	orrs	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	223d      	movs	r2, #61	; 0x3d
 80054a8:	2101      	movs	r1, #1
 80054aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	223c      	movs	r2, #60	; 0x3c
 80054b0:	2100      	movs	r1, #0
 80054b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	0018      	movs	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	ff0fffff 	.word	0xff0fffff
 80054c8:	40000400 	.word	0x40000400

080054cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e046      	b.n	800556c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2288      	movs	r2, #136	; 0x88
 80054e2:	589b      	ldr	r3, [r3, r2]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d107      	bne.n	80054f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2284      	movs	r2, #132	; 0x84
 80054ec:	2100      	movs	r1, #0
 80054ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7fc fa56 	bl	80019a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2288      	movs	r2, #136	; 0x88
 80054fc:	2124      	movs	r1, #36	; 0x24
 80054fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2101      	movs	r1, #1
 800550c:	438a      	bics	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0018      	movs	r0, r3
 8005514:	f000 f96e 	bl	80057f4 <UART_SetConfig>
 8005518:	0003      	movs	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e024      	b.n	800556c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0018      	movs	r0, r3
 800552e:	f000 facb 	bl	8005ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	490d      	ldr	r1, [pc, #52]	; (8005574 <HAL_UART_Init+0xa8>)
 800553e:	400a      	ands	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	212a      	movs	r1, #42	; 0x2a
 800554e:	438a      	bics	r2, r1
 8005550:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2101      	movs	r1, #1
 800555e:	430a      	orrs	r2, r1
 8005560:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	0018      	movs	r0, r3
 8005566:	f000 fb63 	bl	8005c30 <UART_CheckIdleState>
 800556a:	0003      	movs	r3, r0
}
 800556c:	0018      	movs	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	b002      	add	sp, #8
 8005572:	bd80      	pop	{r7, pc}
 8005574:	ffffb7ff 	.word	0xffffb7ff

08005578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	; 0x28
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	1dbb      	adds	r3, r7, #6
 8005586:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2288      	movs	r2, #136	; 0x88
 800558c:	589b      	ldr	r3, [r3, r2]
 800558e:	2b20      	cmp	r3, #32
 8005590:	d000      	beq.n	8005594 <HAL_UART_Transmit+0x1c>
 8005592:	e088      	b.n	80056a6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_UART_Transmit+0x2a>
 800559a:	1dbb      	adds	r3, r7, #6
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e080      	b.n	80056a8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	015b      	lsls	r3, r3, #5
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d109      	bne.n	80055c6 <HAL_UART_Transmit+0x4e>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2201      	movs	r2, #1
 80055be:	4013      	ands	r3, r2
 80055c0:	d001      	beq.n	80055c6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e070      	b.n	80056a8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2290      	movs	r2, #144	; 0x90
 80055ca:	2100      	movs	r1, #0
 80055cc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2288      	movs	r2, #136	; 0x88
 80055d2:	2121      	movs	r1, #33	; 0x21
 80055d4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055d6:	f7fc fb47 	bl	8001c68 <HAL_GetTick>
 80055da:	0003      	movs	r3, r0
 80055dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1dba      	adds	r2, r7, #6
 80055e2:	2154      	movs	r1, #84	; 0x54
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1dba      	adds	r2, r7, #6
 80055ec:	2156      	movs	r1, #86	; 0x56
 80055ee:	8812      	ldrh	r2, [r2, #0]
 80055f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	2380      	movs	r3, #128	; 0x80
 80055f8:	015b      	lsls	r3, r3, #5
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d108      	bne.n	8005610 <HAL_UART_Transmit+0x98>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	e003      	b.n	8005618 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005618:	e02c      	b.n	8005674 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	0013      	movs	r3, r2
 8005624:	2200      	movs	r2, #0
 8005626:	2180      	movs	r1, #128	; 0x80
 8005628:	f000 fb50 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 800562c:	1e03      	subs	r3, r0, #0
 800562e:	d001      	beq.n	8005634 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e039      	b.n	80056a8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	001a      	movs	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	05d2      	lsls	r2, r2, #23
 8005646:	0dd2      	lsrs	r2, r2, #23
 8005648:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	3302      	adds	r3, #2
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e007      	b.n	8005662 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2256      	movs	r2, #86	; 0x56
 8005666:	5a9b      	ldrh	r3, [r3, r2]
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b299      	uxth	r1, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2256      	movs	r2, #86	; 0x56
 8005672:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2256      	movs	r2, #86	; 0x56
 8005678:	5a9b      	ldrh	r3, [r3, r2]
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1cc      	bne.n	800561a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	0013      	movs	r3, r2
 800568a:	2200      	movs	r2, #0
 800568c:	2140      	movs	r1, #64	; 0x40
 800568e:	f000 fb1d 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005692:	1e03      	subs	r3, r0, #0
 8005694:	d001      	beq.n	800569a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e006      	b.n	80056a8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2288      	movs	r2, #136	; 0x88
 800569e:	2120      	movs	r1, #32
 80056a0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e000      	b.n	80056a8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80056a6:	2302      	movs	r3, #2
  }
}
 80056a8:	0018      	movs	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b008      	add	sp, #32
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	1dbb      	adds	r3, r7, #6
 80056bc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2288      	movs	r2, #136	; 0x88
 80056c2:	589b      	ldr	r3, [r3, r2]
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d000      	beq.n	80056ca <HAL_UART_Transmit_DMA+0x1a>
 80056c8:	e079      	b.n	80057be <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_UART_Transmit_DMA+0x28>
 80056d0:	1dbb      	adds	r3, r7, #6
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e071      	b.n	80057c0 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	015b      	lsls	r3, r3, #5
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d109      	bne.n	80056fc <HAL_UART_Transmit_DMA+0x4c>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2201      	movs	r2, #1
 80056f4:	4013      	ands	r3, r2
 80056f6:	d001      	beq.n	80056fc <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e061      	b.n	80057c0 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1dba      	adds	r2, r7, #6
 8005706:	2154      	movs	r1, #84	; 0x54
 8005708:	8812      	ldrh	r2, [r2, #0]
 800570a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1dba      	adds	r2, r7, #6
 8005710:	2156      	movs	r1, #86	; 0x56
 8005712:	8812      	ldrh	r2, [r2, #0]
 8005714:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2290      	movs	r2, #144	; 0x90
 800571a:	2100      	movs	r1, #0
 800571c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2288      	movs	r2, #136	; 0x88
 8005722:	2121      	movs	r1, #33	; 0x21
 8005724:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d028      	beq.n	8005780 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005732:	4a25      	ldr	r2, [pc, #148]	; (80057c8 <HAL_UART_Transmit_DMA+0x118>)
 8005734:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573a:	4a24      	ldr	r2, [pc, #144]	; (80057cc <HAL_UART_Transmit_DMA+0x11c>)
 800573c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005742:	4a23      	ldr	r2, [pc, #140]	; (80057d0 <HAL_UART_Transmit_DMA+0x120>)
 8005744:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574a:	2200      	movs	r2, #0
 800574c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	0019      	movs	r1, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3328      	adds	r3, #40	; 0x28
 800575e:	001a      	movs	r2, r3
 8005760:	1dbb      	adds	r3, r7, #6
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	f7fd fc30 	bl	8002fc8 <HAL_DMA_Start_IT>
 8005768:	1e03      	subs	r3, r0, #0
 800576a:	d009      	beq.n	8005780 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2290      	movs	r2, #144	; 0x90
 8005770:	2110      	movs	r1, #16
 8005772:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2288      	movs	r2, #136	; 0x88
 8005778:	2120      	movs	r1, #32
 800577a:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e01f      	b.n	80057c0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2240      	movs	r2, #64	; 0x40
 8005786:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005788:	f3ef 8310 	mrs	r3, PRIMASK
 800578c:	613b      	str	r3, [r7, #16]
  return(result);
 800578e:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	2301      	movs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	430a      	orrs	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e000      	b.n	80057c0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80057be:	2302      	movs	r3, #2
  }
}
 80057c0:	0018      	movs	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b008      	add	sp, #32
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	08005fa9 	.word	0x08005fa9
 80057cc:	08006041 	.word	0x08006041
 80057d0:	0800605f 	.word	0x0800605f

080057d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80057dc:	46c0      	nop			; (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	b002      	add	sp, #8
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057ec:	46c0      	nop			; (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b002      	add	sp, #8
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057fc:	231a      	movs	r3, #26
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	4313      	orrs	r3, r2
 800581a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4aa1      	ldr	r2, [pc, #644]	; (8005aa8 <UART_SetConfig+0x2b4>)
 8005824:	4013      	ands	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4a9c      	ldr	r2, [pc, #624]	; (8005aac <UART_SetConfig+0x2b8>)
 800583a:	4013      	ands	r3, r2
 800583c:	0019      	movs	r1, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	4313      	orrs	r3, r2
 8005858:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4a93      	ldr	r2, [pc, #588]	; (8005ab0 <UART_SetConfig+0x2bc>)
 8005862:	4013      	ands	r3, r2
 8005864:	0019      	movs	r1, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	220f      	movs	r2, #15
 8005878:	4393      	bics	r3, r2
 800587a:	0019      	movs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a89      	ldr	r2, [pc, #548]	; (8005ab4 <UART_SetConfig+0x2c0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d127      	bne.n	80058e2 <UART_SetConfig+0xee>
 8005892:	4b89      	ldr	r3, [pc, #548]	; (8005ab8 <UART_SetConfig+0x2c4>)
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	2203      	movs	r2, #3
 8005898:	4013      	ands	r3, r2
 800589a:	2b03      	cmp	r3, #3
 800589c:	d017      	beq.n	80058ce <UART_SetConfig+0xda>
 800589e:	d81b      	bhi.n	80058d8 <UART_SetConfig+0xe4>
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d00a      	beq.n	80058ba <UART_SetConfig+0xc6>
 80058a4:	d818      	bhi.n	80058d8 <UART_SetConfig+0xe4>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <UART_SetConfig+0xbc>
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d00a      	beq.n	80058c4 <UART_SetConfig+0xd0>
 80058ae:	e013      	b.n	80058d8 <UART_SetConfig+0xe4>
 80058b0:	231b      	movs	r3, #27
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e021      	b.n	80058fe <UART_SetConfig+0x10a>
 80058ba:	231b      	movs	r3, #27
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2202      	movs	r2, #2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e01c      	b.n	80058fe <UART_SetConfig+0x10a>
 80058c4:	231b      	movs	r3, #27
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	2204      	movs	r2, #4
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	e017      	b.n	80058fe <UART_SetConfig+0x10a>
 80058ce:	231b      	movs	r3, #27
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	2208      	movs	r2, #8
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e012      	b.n	80058fe <UART_SetConfig+0x10a>
 80058d8:	231b      	movs	r3, #27
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	2210      	movs	r2, #16
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e00d      	b.n	80058fe <UART_SetConfig+0x10a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a75      	ldr	r2, [pc, #468]	; (8005abc <UART_SetConfig+0x2c8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d104      	bne.n	80058f6 <UART_SetConfig+0x102>
 80058ec:	231b      	movs	r3, #27
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e003      	b.n	80058fe <UART_SetConfig+0x10a>
 80058f6:	231b      	movs	r3, #27
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	2210      	movs	r2, #16
 80058fc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	429a      	cmp	r2, r3
 8005908:	d000      	beq.n	800590c <UART_SetConfig+0x118>
 800590a:	e065      	b.n	80059d8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800590c:	231b      	movs	r3, #27
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b08      	cmp	r3, #8
 8005914:	d015      	beq.n	8005942 <UART_SetConfig+0x14e>
 8005916:	dc18      	bgt.n	800594a <UART_SetConfig+0x156>
 8005918:	2b04      	cmp	r3, #4
 800591a:	d00d      	beq.n	8005938 <UART_SetConfig+0x144>
 800591c:	dc15      	bgt.n	800594a <UART_SetConfig+0x156>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <UART_SetConfig+0x134>
 8005922:	2b02      	cmp	r3, #2
 8005924:	d005      	beq.n	8005932 <UART_SetConfig+0x13e>
 8005926:	e010      	b.n	800594a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005928:	f7fe fd04 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 800592c:	0003      	movs	r3, r0
 800592e:	617b      	str	r3, [r7, #20]
        break;
 8005930:	e012      	b.n	8005958 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005932:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <UART_SetConfig+0x2cc>)
 8005934:	617b      	str	r3, [r7, #20]
        break;
 8005936:	e00f      	b.n	8005958 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005938:	f7fe fc70 	bl	800421c <HAL_RCC_GetSysClockFreq>
 800593c:	0003      	movs	r3, r0
 800593e:	617b      	str	r3, [r7, #20]
        break;
 8005940:	e00a      	b.n	8005958 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	617b      	str	r3, [r7, #20]
        break;
 8005948:	e006      	b.n	8005958 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800594e:	231a      	movs	r3, #26
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
        break;
 8005956:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d100      	bne.n	8005960 <UART_SetConfig+0x16c>
 800595e:	e08d      	b.n	8005a7c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005964:	4b57      	ldr	r3, [pc, #348]	; (8005ac4 <UART_SetConfig+0x2d0>)
 8005966:	0052      	lsls	r2, r2, #1
 8005968:	5ad3      	ldrh	r3, [r2, r3]
 800596a:	0019      	movs	r1, r3
 800596c:	6978      	ldr	r0, [r7, #20]
 800596e:	f7fa fbd1 	bl	8000114 <__udivsi3>
 8005972:	0003      	movs	r3, r0
 8005974:	005a      	lsls	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	0019      	movs	r1, r3
 8005984:	0010      	movs	r0, r2
 8005986:	f7fa fbc5 	bl	8000114 <__udivsi3>
 800598a:	0003      	movs	r3, r0
 800598c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d91c      	bls.n	80059ce <UART_SetConfig+0x1da>
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	025b      	lsls	r3, r3, #9
 800599a:	429a      	cmp	r2, r3
 800599c:	d217      	bcs.n	80059ce <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	200e      	movs	r0, #14
 80059a4:	183b      	adds	r3, r7, r0
 80059a6:	210f      	movs	r1, #15
 80059a8:	438a      	bics	r2, r1
 80059aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2207      	movs	r2, #7
 80059b4:	4013      	ands	r3, r2
 80059b6:	b299      	uxth	r1, r3
 80059b8:	183b      	adds	r3, r7, r0
 80059ba:	183a      	adds	r2, r7, r0
 80059bc:	8812      	ldrh	r2, [r2, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	183a      	adds	r2, r7, r0
 80059c8:	8812      	ldrh	r2, [r2, #0]
 80059ca:	60da      	str	r2, [r3, #12]
 80059cc:	e056      	b.n	8005a7c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80059ce:	231a      	movs	r3, #26
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	2201      	movs	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	e051      	b.n	8005a7c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059d8:	231b      	movs	r3, #27
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d015      	beq.n	8005a0e <UART_SetConfig+0x21a>
 80059e2:	dc18      	bgt.n	8005a16 <UART_SetConfig+0x222>
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d00d      	beq.n	8005a04 <UART_SetConfig+0x210>
 80059e8:	dc15      	bgt.n	8005a16 <UART_SetConfig+0x222>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <UART_SetConfig+0x200>
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d005      	beq.n	80059fe <UART_SetConfig+0x20a>
 80059f2:	e010      	b.n	8005a16 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f4:	f7fe fc9e 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 80059f8:	0003      	movs	r3, r0
 80059fa:	617b      	str	r3, [r7, #20]
        break;
 80059fc:	e012      	b.n	8005a24 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059fe:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <UART_SetConfig+0x2cc>)
 8005a00:	617b      	str	r3, [r7, #20]
        break;
 8005a02:	e00f      	b.n	8005a24 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a04:	f7fe fc0a 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	617b      	str	r3, [r7, #20]
        break;
 8005a0c:	e00a      	b.n	8005a24 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	617b      	str	r3, [r7, #20]
        break;
 8005a14:	e006      	b.n	8005a24 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a1a:	231a      	movs	r3, #26
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2201      	movs	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
        break;
 8005a22:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d028      	beq.n	8005a7c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a2e:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <UART_SetConfig+0x2d0>)
 8005a30:	0052      	lsls	r2, r2, #1
 8005a32:	5ad3      	ldrh	r3, [r2, r3]
 8005a34:	0019      	movs	r1, r3
 8005a36:	6978      	ldr	r0, [r7, #20]
 8005a38:	f7fa fb6c 	bl	8000114 <__udivsi3>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	001a      	movs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	18d2      	adds	r2, r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	0019      	movs	r1, r3
 8005a4e:	0010      	movs	r0, r2
 8005a50:	f7fa fb60 	bl	8000114 <__udivsi3>
 8005a54:	0003      	movs	r3, r0
 8005a56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	d90a      	bls.n	8005a74 <UART_SetConfig+0x280>
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	025b      	lsls	r3, r3, #9
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d205      	bcs.n	8005a74 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	e003      	b.n	8005a7c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005a74:	231a      	movs	r3, #26
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	2201      	movs	r2, #1
 8005a7a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	226a      	movs	r2, #106	; 0x6a
 8005a80:	2101      	movs	r1, #1
 8005a82:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2268      	movs	r2, #104	; 0x68
 8005a88:	2101      	movs	r1, #1
 8005a8a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005a98:	231a      	movs	r3, #26
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	781b      	ldrb	r3, [r3, #0]
}
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b008      	add	sp, #32
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	cfff69f3 	.word	0xcfff69f3
 8005aac:	ffffcfff 	.word	0xffffcfff
 8005ab0:	11fff4ff 	.word	0x11fff4ff
 8005ab4:	40013800 	.word	0x40013800
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	40004400 	.word	0x40004400
 8005ac0:	00f42400 	.word	0x00f42400
 8005ac4:	08006c98 	.word	0x08006c98

08005ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4a4a      	ldr	r2, [pc, #296]	; (8005c0c <UART_AdvFeatureConfig+0x144>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	2202      	movs	r2, #2
 8005af8:	4013      	ands	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4a43      	ldr	r2, [pc, #268]	; (8005c10 <UART_AdvFeatureConfig+0x148>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b18:	2204      	movs	r2, #4
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d00b      	beq.n	8005b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <UART_AdvFeatureConfig+0x14c>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	0019      	movs	r1, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4a34      	ldr	r2, [pc, #208]	; (8005c18 <UART_AdvFeatureConfig+0x150>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a2c      	ldr	r2, [pc, #176]	; (8005c1c <UART_AdvFeatureConfig+0x154>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	2220      	movs	r2, #32
 8005b80:	4013      	ands	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4a25      	ldr	r2, [pc, #148]	; (8005c20 <UART_AdvFeatureConfig+0x158>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	0019      	movs	r1, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	2240      	movs	r2, #64	; 0x40
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d01d      	beq.n	8005be2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <UART_AdvFeatureConfig+0x15c>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc2:	2380      	movs	r3, #128	; 0x80
 8005bc4:	035b      	lsls	r3, r3, #13
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d10b      	bne.n	8005be2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <UART_AdvFeatureConfig+0x160>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	0019      	movs	r1, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	4013      	ands	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <UART_AdvFeatureConfig+0x164>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	0019      	movs	r1, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  }
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	fffdffff 	.word	0xfffdffff
 8005c10:	fffeffff 	.word	0xfffeffff
 8005c14:	fffbffff 	.word	0xfffbffff
 8005c18:	ffff7fff 	.word	0xffff7fff
 8005c1c:	ffffefff 	.word	0xffffefff
 8005c20:	ffffdfff 	.word	0xffffdfff
 8005c24:	ffefffff 	.word	0xffefffff
 8005c28:	ff9fffff 	.word	0xff9fffff
 8005c2c:	fff7ffff 	.word	0xfff7ffff

08005c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2290      	movs	r2, #144	; 0x90
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c40:	f7fc f812 	bl	8001c68 <HAL_GetTick>
 8005c44:	0003      	movs	r3, r0
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2208      	movs	r2, #8
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d10c      	bne.n	8005c70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	0391      	lsls	r1, r2, #14
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <UART_CheckIdleState+0x98>)
 8005c60:	9200      	str	r2, [sp, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f000 f832 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005c68:	1e03      	subs	r3, r0, #0
 8005c6a:	d001      	beq.n	8005c70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e026      	b.n	8005cbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2204      	movs	r2, #4
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d10c      	bne.n	8005c98 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2280      	movs	r2, #128	; 0x80
 8005c82:	03d1      	lsls	r1, r2, #15
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <UART_CheckIdleState+0x98>)
 8005c88:	9200      	str	r2, [sp, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f000 f81e 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005c90:	1e03      	subs	r3, r0, #0
 8005c92:	d001      	beq.n	8005c98 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e012      	b.n	8005cbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2288      	movs	r2, #136	; 0x88
 8005c9c:	2120      	movs	r1, #32
 8005c9e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	228c      	movs	r2, #140	; 0x8c
 8005ca4:	2120      	movs	r1, #32
 8005ca6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2284      	movs	r2, #132	; 0x84
 8005cb8:	2100      	movs	r1, #0
 8005cba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b004      	add	sp, #16
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	01ffffff 	.word	0x01ffffff

08005ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b094      	sub	sp, #80	; 0x50
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	1dfb      	adds	r3, r7, #7
 8005cda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cdc:	e0a7      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	d100      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005ce4:	e0a3      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce6:	f7fb ffbf 	bl	8001c68 <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d302      	bcc.n	8005cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d13f      	bne.n	8005d7c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d04:	647b      	str	r3, [r7, #68]	; 0x44
 8005d06:	2301      	movs	r3, #1
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	f383 8810 	msr	PRIMASK, r3
}
 8005d10:	46c0      	nop			; (mov r8, r8)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	494e      	ldr	r1, [pc, #312]	; (8005e58 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005d1e:	400a      	ands	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d24:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	f383 8810 	msr	PRIMASK, r3
}
 8005d2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	643b      	str	r3, [r7, #64]	; 0x40
 8005d38:	2301      	movs	r3, #1
 8005d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	f383 8810 	msr	PRIMASK, r3
}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2101      	movs	r1, #1
 8005d50:	438a      	bics	r2, r1
 8005d52:	609a      	str	r2, [r3, #8]
 8005d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5a:	f383 8810 	msr	PRIMASK, r3
}
 8005d5e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2288      	movs	r2, #136	; 0x88
 8005d64:	2120      	movs	r1, #32
 8005d66:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	228c      	movs	r2, #140	; 0x8c
 8005d6c:	2120      	movs	r1, #32
 8005d6e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2284      	movs	r2, #132	; 0x84
 8005d74:	2100      	movs	r1, #0
 8005d76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e069      	b.n	8005e50 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2204      	movs	r2, #4
 8005d84:	4013      	ands	r3, r2
 8005d86:	d052      	beq.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	401a      	ands	r2, r3
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d148      	bne.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	0112      	lsls	r2, r2, #4
 8005da4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da6:	f3ef 8310 	mrs	r3, PRIMASK
 8005daa:	613b      	str	r3, [r7, #16]
  return(result);
 8005dac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db0:	2301      	movs	r3, #1
 8005db2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f383 8810 	msr	PRIMASK, r3
}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4924      	ldr	r1, [pc, #144]	; (8005e58 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005dc8:	400a      	ands	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f383 8810 	msr	PRIMASK, r3
}
 8005dd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ddc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005dde:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de2:	2301      	movs	r3, #1
 8005de4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	f383 8810 	msr	PRIMASK, r3
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2101      	movs	r1, #1
 8005dfa:	438a      	bics	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]
 8005dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	f383 8810 	msr	PRIMASK, r3
}
 8005e08:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2288      	movs	r2, #136	; 0x88
 8005e0e:	2120      	movs	r1, #32
 8005e10:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	228c      	movs	r2, #140	; 0x8c
 8005e16:	2120      	movs	r1, #32
 8005e18:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2290      	movs	r2, #144	; 0x90
 8005e1e:	2120      	movs	r1, #32
 8005e20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2284      	movs	r2, #132	; 0x84
 8005e26:	2100      	movs	r1, #0
 8005e28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e010      	b.n	8005e50 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	4013      	ands	r3, r2
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	425a      	negs	r2, r3
 8005e3e:	4153      	adcs	r3, r2
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	001a      	movs	r2, r3
 8005e44:	1dfb      	adds	r3, r7, #7
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d100      	bne.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x182>
 8005e4c:	e747      	b.n	8005cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	0018      	movs	r0, r3
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b014      	add	sp, #80	; 0x50
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	fffffe5f 	.word	0xfffffe5f

08005e5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e64:	f3ef 8310 	mrs	r3, PRIMASK
 8005e68:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6e:	2301      	movs	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f383 8810 	msr	PRIMASK, r3
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	21c0      	movs	r1, #192	; 0xc0
 8005e86:	438a      	bics	r2, r1
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f383 8810 	msr	PRIMASK, r3
}
 8005e94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e96:	f3ef 8310 	mrs	r3, PRIMASK
 8005e9a:	617b      	str	r3, [r7, #20]
  return(result);
 8005e9c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f383 8810 	msr	PRIMASK, r3
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4908      	ldr	r1, [pc, #32]	; (8005ed8 <UART_EndTxTransfer+0x7c>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f383 8810 	msr	PRIMASK, r3
}
 8005ec6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2288      	movs	r2, #136	; 0x88
 8005ecc:	2120      	movs	r1, #32
 8005ece:	5099      	str	r1, [r3, r2]
}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b00a      	add	sp, #40	; 0x28
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	ff7fffff 	.word	0xff7fffff

08005edc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee8:	617b      	str	r3, [r7, #20]
  return(result);
 8005eea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f383 8810 	msr	PRIMASK, r3
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4926      	ldr	r1, [pc, #152]	; (8005fa0 <UART_EndRxTransfer+0xc4>)
 8005f06:	400a      	ands	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	f383 8810 	msr	PRIMASK, r3
}
 8005f14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f16:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1a:	623b      	str	r3, [r7, #32]
  return(result);
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f20:	2301      	movs	r3, #1
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f383 8810 	msr	PRIMASK, r3
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	491b      	ldr	r1, [pc, #108]	; (8005fa4 <UART_EndRxTransfer+0xc8>)
 8005f38:	400a      	ands	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	f383 8810 	msr	PRIMASK, r3
}
 8005f46:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d118      	bne.n	8005f82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f50:	f3ef 8310 	mrs	r3, PRIMASK
 8005f54:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f383 8810 	msr	PRIMASK, r3
}
 8005f64:	46c0      	nop			; (mov r8, r8)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2110      	movs	r1, #16
 8005f72:	438a      	bics	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f383 8810 	msr	PRIMASK, r3
}
 8005f80:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	228c      	movs	r2, #140	; 0x8c
 8005f86:	2120      	movs	r1, #32
 8005f88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b00e      	add	sp, #56	; 0x38
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	fffffedf 	.word	0xfffffedf
 8005fa4:	effffffe 	.word	0xeffffffe

08005fa8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d135      	bne.n	800602e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	2256      	movs	r2, #86	; 0x56
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fca:	f3ef 8310 	mrs	r3, PRIMASK
 8005fce:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fd0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f383 8810 	msr	PRIMASK, r3
}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	438a      	bics	r2, r1
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f383 8810 	msr	PRIMASK, r3
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8006000:	61bb      	str	r3, [r7, #24]
  return(result);
 8006002:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	2301      	movs	r3, #1
 8006008:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f383 8810 	msr	PRIMASK, r3
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2140      	movs	r1, #64	; 0x40
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	f383 8810 	msr	PRIMASK, r3
}
 800602c:	e004      	b.n	8006038 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	0018      	movs	r0, r3
 8006032:	f7fb fad3 	bl	80015dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b00c      	add	sp, #48	; 0x30
 800603e:	bd80      	pop	{r7, pc}

08006040 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	0018      	movs	r0, r3
 8006052:	f7ff fbbf 	bl	80057d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	46bd      	mov	sp, r7
 800605a:	b004      	add	sp, #16
 800605c:	bd80      	pop	{r7, pc}

0800605e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b086      	sub	sp, #24
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2288      	movs	r2, #136	; 0x88
 8006070:	589b      	ldr	r3, [r3, r2]
 8006072:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	228c      	movs	r2, #140	; 0x8c
 8006078:	589b      	ldr	r3, [r3, r2]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	4013      	ands	r3, r2
 8006086:	2b80      	cmp	r3, #128	; 0x80
 8006088:	d10a      	bne.n	80060a0 <UART_DMAError+0x42>
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b21      	cmp	r3, #33	; 0x21
 800608e:	d107      	bne.n	80060a0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2256      	movs	r2, #86	; 0x56
 8006094:	2100      	movs	r1, #0
 8006096:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	0018      	movs	r0, r3
 800609c:	f7ff fede 	bl	8005e5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2240      	movs	r2, #64	; 0x40
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d10a      	bne.n	80060c4 <UART_DMAError+0x66>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b22      	cmp	r3, #34	; 0x22
 80060b2:	d107      	bne.n	80060c4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	225e      	movs	r2, #94	; 0x5e
 80060b8:	2100      	movs	r1, #0
 80060ba:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	0018      	movs	r0, r3
 80060c0:	f7ff ff0c 	bl	8005edc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2290      	movs	r2, #144	; 0x90
 80060c8:	589b      	ldr	r3, [r3, r2]
 80060ca:	2210      	movs	r2, #16
 80060cc:	431a      	orrs	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2190      	movs	r1, #144	; 0x90
 80060d2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	0018      	movs	r0, r3
 80060d8:	f7ff fb84 	bl	80057e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b006      	add	sp, #24
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <__errno>:
 80060e4:	4b01      	ldr	r3, [pc, #4]	; (80060ec <__errno+0x8>)
 80060e6:	6818      	ldr	r0, [r3, #0]
 80060e8:	4770      	bx	lr
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	2000000c 	.word	0x2000000c

080060f0 <__libc_init_array>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	2600      	movs	r6, #0
 80060f4:	4d0c      	ldr	r5, [pc, #48]	; (8006128 <__libc_init_array+0x38>)
 80060f6:	4c0d      	ldr	r4, [pc, #52]	; (800612c <__libc_init_array+0x3c>)
 80060f8:	1b64      	subs	r4, r4, r5
 80060fa:	10a4      	asrs	r4, r4, #2
 80060fc:	42a6      	cmp	r6, r4
 80060fe:	d109      	bne.n	8006114 <__libc_init_array+0x24>
 8006100:	2600      	movs	r6, #0
 8006102:	f000 fc8b 	bl	8006a1c <_init>
 8006106:	4d0a      	ldr	r5, [pc, #40]	; (8006130 <__libc_init_array+0x40>)
 8006108:	4c0a      	ldr	r4, [pc, #40]	; (8006134 <__libc_init_array+0x44>)
 800610a:	1b64      	subs	r4, r4, r5
 800610c:	10a4      	asrs	r4, r4, #2
 800610e:	42a6      	cmp	r6, r4
 8006110:	d105      	bne.n	800611e <__libc_init_array+0x2e>
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	00b3      	lsls	r3, r6, #2
 8006116:	58eb      	ldr	r3, [r5, r3]
 8006118:	4798      	blx	r3
 800611a:	3601      	adds	r6, #1
 800611c:	e7ee      	b.n	80060fc <__libc_init_array+0xc>
 800611e:	00b3      	lsls	r3, r6, #2
 8006120:	58eb      	ldr	r3, [r5, r3]
 8006122:	4798      	blx	r3
 8006124:	3601      	adds	r6, #1
 8006126:	e7f2      	b.n	800610e <__libc_init_array+0x1e>
 8006128:	08006ce4 	.word	0x08006ce4
 800612c:	08006ce4 	.word	0x08006ce4
 8006130:	08006ce4 	.word	0x08006ce4
 8006134:	08006ce8 	.word	0x08006ce8

08006138 <memset>:
 8006138:	0003      	movs	r3, r0
 800613a:	1882      	adds	r2, r0, r2
 800613c:	4293      	cmp	r3, r2
 800613e:	d100      	bne.n	8006142 <memset+0xa>
 8006140:	4770      	bx	lr
 8006142:	7019      	strb	r1, [r3, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	e7f9      	b.n	800613c <memset+0x4>

08006148 <siprintf>:
 8006148:	b40e      	push	{r1, r2, r3}
 800614a:	b500      	push	{lr}
 800614c:	490b      	ldr	r1, [pc, #44]	; (800617c <siprintf+0x34>)
 800614e:	b09c      	sub	sp, #112	; 0x70
 8006150:	ab1d      	add	r3, sp, #116	; 0x74
 8006152:	9002      	str	r0, [sp, #8]
 8006154:	9006      	str	r0, [sp, #24]
 8006156:	9107      	str	r1, [sp, #28]
 8006158:	9104      	str	r1, [sp, #16]
 800615a:	4809      	ldr	r0, [pc, #36]	; (8006180 <siprintf+0x38>)
 800615c:	4909      	ldr	r1, [pc, #36]	; (8006184 <siprintf+0x3c>)
 800615e:	cb04      	ldmia	r3!, {r2}
 8006160:	9105      	str	r1, [sp, #20]
 8006162:	6800      	ldr	r0, [r0, #0]
 8006164:	a902      	add	r1, sp, #8
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	f000 f870 	bl	800624c <_svfiprintf_r>
 800616c:	2300      	movs	r3, #0
 800616e:	9a02      	ldr	r2, [sp, #8]
 8006170:	7013      	strb	r3, [r2, #0]
 8006172:	b01c      	add	sp, #112	; 0x70
 8006174:	bc08      	pop	{r3}
 8006176:	b003      	add	sp, #12
 8006178:	4718      	bx	r3
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	7fffffff 	.word	0x7fffffff
 8006180:	2000000c 	.word	0x2000000c
 8006184:	ffff0208 	.word	0xffff0208

08006188 <__ssputs_r>:
 8006188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618a:	688e      	ldr	r6, [r1, #8]
 800618c:	b085      	sub	sp, #20
 800618e:	0007      	movs	r7, r0
 8006190:	000c      	movs	r4, r1
 8006192:	9203      	str	r2, [sp, #12]
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	429e      	cmp	r6, r3
 8006198:	d83c      	bhi.n	8006214 <__ssputs_r+0x8c>
 800619a:	2390      	movs	r3, #144	; 0x90
 800619c:	898a      	ldrh	r2, [r1, #12]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	421a      	tst	r2, r3
 80061a2:	d034      	beq.n	800620e <__ssputs_r+0x86>
 80061a4:	6909      	ldr	r1, [r1, #16]
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	6960      	ldr	r0, [r4, #20]
 80061aa:	1a5b      	subs	r3, r3, r1
 80061ac:	9302      	str	r3, [sp, #8]
 80061ae:	2303      	movs	r3, #3
 80061b0:	4343      	muls	r3, r0
 80061b2:	0fdd      	lsrs	r5, r3, #31
 80061b4:	18ed      	adds	r5, r5, r3
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	9802      	ldr	r0, [sp, #8]
 80061ba:	3301      	adds	r3, #1
 80061bc:	181b      	adds	r3, r3, r0
 80061be:	106d      	asrs	r5, r5, #1
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	d900      	bls.n	80061c6 <__ssputs_r+0x3e>
 80061c4:	001d      	movs	r5, r3
 80061c6:	0553      	lsls	r3, r2, #21
 80061c8:	d532      	bpl.n	8006230 <__ssputs_r+0xa8>
 80061ca:	0029      	movs	r1, r5
 80061cc:	0038      	movs	r0, r7
 80061ce:	f000 fb53 	bl	8006878 <_malloc_r>
 80061d2:	1e06      	subs	r6, r0, #0
 80061d4:	d109      	bne.n	80061ea <__ssputs_r+0x62>
 80061d6:	230c      	movs	r3, #12
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	2340      	movs	r3, #64	; 0x40
 80061dc:	2001      	movs	r0, #1
 80061de:	89a2      	ldrh	r2, [r4, #12]
 80061e0:	4240      	negs	r0, r0
 80061e2:	4313      	orrs	r3, r2
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	b005      	add	sp, #20
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ea:	9a02      	ldr	r2, [sp, #8]
 80061ec:	6921      	ldr	r1, [r4, #16]
 80061ee:	f000 faba 	bl	8006766 <memcpy>
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	4a14      	ldr	r2, [pc, #80]	; (8006248 <__ssputs_r+0xc0>)
 80061f6:	401a      	ands	r2, r3
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	4313      	orrs	r3, r2
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	9b02      	ldr	r3, [sp, #8]
 8006200:	6126      	str	r6, [r4, #16]
 8006202:	18f6      	adds	r6, r6, r3
 8006204:	6026      	str	r6, [r4, #0]
 8006206:	6165      	str	r5, [r4, #20]
 8006208:	9e01      	ldr	r6, [sp, #4]
 800620a:	1aed      	subs	r5, r5, r3
 800620c:	60a5      	str	r5, [r4, #8]
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	429e      	cmp	r6, r3
 8006212:	d900      	bls.n	8006216 <__ssputs_r+0x8e>
 8006214:	9e01      	ldr	r6, [sp, #4]
 8006216:	0032      	movs	r2, r6
 8006218:	9903      	ldr	r1, [sp, #12]
 800621a:	6820      	ldr	r0, [r4, #0]
 800621c:	f000 faac 	bl	8006778 <memmove>
 8006220:	68a3      	ldr	r3, [r4, #8]
 8006222:	2000      	movs	r0, #0
 8006224:	1b9b      	subs	r3, r3, r6
 8006226:	60a3      	str	r3, [r4, #8]
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	199e      	adds	r6, r3, r6
 800622c:	6026      	str	r6, [r4, #0]
 800622e:	e7da      	b.n	80061e6 <__ssputs_r+0x5e>
 8006230:	002a      	movs	r2, r5
 8006232:	0038      	movs	r0, r7
 8006234:	f000 fb96 	bl	8006964 <_realloc_r>
 8006238:	1e06      	subs	r6, r0, #0
 800623a:	d1e0      	bne.n	80061fe <__ssputs_r+0x76>
 800623c:	0038      	movs	r0, r7
 800623e:	6921      	ldr	r1, [r4, #16]
 8006240:	f000 faae 	bl	80067a0 <_free_r>
 8006244:	e7c7      	b.n	80061d6 <__ssputs_r+0x4e>
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	fffffb7f 	.word	0xfffffb7f

0800624c <_svfiprintf_r>:
 800624c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624e:	b0a1      	sub	sp, #132	; 0x84
 8006250:	9003      	str	r0, [sp, #12]
 8006252:	001d      	movs	r5, r3
 8006254:	898b      	ldrh	r3, [r1, #12]
 8006256:	000f      	movs	r7, r1
 8006258:	0016      	movs	r6, r2
 800625a:	061b      	lsls	r3, r3, #24
 800625c:	d511      	bpl.n	8006282 <_svfiprintf_r+0x36>
 800625e:	690b      	ldr	r3, [r1, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10e      	bne.n	8006282 <_svfiprintf_r+0x36>
 8006264:	2140      	movs	r1, #64	; 0x40
 8006266:	f000 fb07 	bl	8006878 <_malloc_r>
 800626a:	6038      	str	r0, [r7, #0]
 800626c:	6138      	str	r0, [r7, #16]
 800626e:	2800      	cmp	r0, #0
 8006270:	d105      	bne.n	800627e <_svfiprintf_r+0x32>
 8006272:	230c      	movs	r3, #12
 8006274:	9a03      	ldr	r2, [sp, #12]
 8006276:	3801      	subs	r0, #1
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	b021      	add	sp, #132	; 0x84
 800627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627e:	2340      	movs	r3, #64	; 0x40
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	2300      	movs	r3, #0
 8006284:	ac08      	add	r4, sp, #32
 8006286:	6163      	str	r3, [r4, #20]
 8006288:	3320      	adds	r3, #32
 800628a:	7663      	strb	r3, [r4, #25]
 800628c:	3310      	adds	r3, #16
 800628e:	76a3      	strb	r3, [r4, #26]
 8006290:	9507      	str	r5, [sp, #28]
 8006292:	0035      	movs	r5, r6
 8006294:	782b      	ldrb	r3, [r5, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <_svfiprintf_r+0x52>
 800629a:	2b25      	cmp	r3, #37	; 0x25
 800629c:	d147      	bne.n	800632e <_svfiprintf_r+0xe2>
 800629e:	1bab      	subs	r3, r5, r6
 80062a0:	9305      	str	r3, [sp, #20]
 80062a2:	42b5      	cmp	r5, r6
 80062a4:	d00c      	beq.n	80062c0 <_svfiprintf_r+0x74>
 80062a6:	0032      	movs	r2, r6
 80062a8:	0039      	movs	r1, r7
 80062aa:	9803      	ldr	r0, [sp, #12]
 80062ac:	f7ff ff6c 	bl	8006188 <__ssputs_r>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d100      	bne.n	80062b6 <_svfiprintf_r+0x6a>
 80062b4:	e0ae      	b.n	8006414 <_svfiprintf_r+0x1c8>
 80062b6:	6962      	ldr	r2, [r4, #20]
 80062b8:	9b05      	ldr	r3, [sp, #20]
 80062ba:	4694      	mov	ip, r2
 80062bc:	4463      	add	r3, ip
 80062be:	6163      	str	r3, [r4, #20]
 80062c0:	782b      	ldrb	r3, [r5, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d100      	bne.n	80062c8 <_svfiprintf_r+0x7c>
 80062c6:	e0a5      	b.n	8006414 <_svfiprintf_r+0x1c8>
 80062c8:	2201      	movs	r2, #1
 80062ca:	2300      	movs	r3, #0
 80062cc:	4252      	negs	r2, r2
 80062ce:	6062      	str	r2, [r4, #4]
 80062d0:	a904      	add	r1, sp, #16
 80062d2:	3254      	adds	r2, #84	; 0x54
 80062d4:	1852      	adds	r2, r2, r1
 80062d6:	1c6e      	adds	r6, r5, #1
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	60e3      	str	r3, [r4, #12]
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	7013      	strb	r3, [r2, #0]
 80062e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80062e2:	2205      	movs	r2, #5
 80062e4:	7831      	ldrb	r1, [r6, #0]
 80062e6:	4854      	ldr	r0, [pc, #336]	; (8006438 <_svfiprintf_r+0x1ec>)
 80062e8:	f000 fa32 	bl	8006750 <memchr>
 80062ec:	1c75      	adds	r5, r6, #1
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d11f      	bne.n	8006332 <_svfiprintf_r+0xe6>
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	06d3      	lsls	r3, r2, #27
 80062f6:	d504      	bpl.n	8006302 <_svfiprintf_r+0xb6>
 80062f8:	2353      	movs	r3, #83	; 0x53
 80062fa:	a904      	add	r1, sp, #16
 80062fc:	185b      	adds	r3, r3, r1
 80062fe:	2120      	movs	r1, #32
 8006300:	7019      	strb	r1, [r3, #0]
 8006302:	0713      	lsls	r3, r2, #28
 8006304:	d504      	bpl.n	8006310 <_svfiprintf_r+0xc4>
 8006306:	2353      	movs	r3, #83	; 0x53
 8006308:	a904      	add	r1, sp, #16
 800630a:	185b      	adds	r3, r3, r1
 800630c:	212b      	movs	r1, #43	; 0x2b
 800630e:	7019      	strb	r1, [r3, #0]
 8006310:	7833      	ldrb	r3, [r6, #0]
 8006312:	2b2a      	cmp	r3, #42	; 0x2a
 8006314:	d016      	beq.n	8006344 <_svfiprintf_r+0xf8>
 8006316:	0035      	movs	r5, r6
 8006318:	2100      	movs	r1, #0
 800631a:	200a      	movs	r0, #10
 800631c:	68e3      	ldr	r3, [r4, #12]
 800631e:	782a      	ldrb	r2, [r5, #0]
 8006320:	1c6e      	adds	r6, r5, #1
 8006322:	3a30      	subs	r2, #48	; 0x30
 8006324:	2a09      	cmp	r2, #9
 8006326:	d94e      	bls.n	80063c6 <_svfiprintf_r+0x17a>
 8006328:	2900      	cmp	r1, #0
 800632a:	d111      	bne.n	8006350 <_svfiprintf_r+0x104>
 800632c:	e017      	b.n	800635e <_svfiprintf_r+0x112>
 800632e:	3501      	adds	r5, #1
 8006330:	e7b0      	b.n	8006294 <_svfiprintf_r+0x48>
 8006332:	4b41      	ldr	r3, [pc, #260]	; (8006438 <_svfiprintf_r+0x1ec>)
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	1ac0      	subs	r0, r0, r3
 8006338:	2301      	movs	r3, #1
 800633a:	4083      	lsls	r3, r0
 800633c:	4313      	orrs	r3, r2
 800633e:	002e      	movs	r6, r5
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	e7ce      	b.n	80062e2 <_svfiprintf_r+0x96>
 8006344:	9b07      	ldr	r3, [sp, #28]
 8006346:	1d19      	adds	r1, r3, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	9107      	str	r1, [sp, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	db01      	blt.n	8006354 <_svfiprintf_r+0x108>
 8006350:	930b      	str	r3, [sp, #44]	; 0x2c
 8006352:	e004      	b.n	800635e <_svfiprintf_r+0x112>
 8006354:	425b      	negs	r3, r3
 8006356:	60e3      	str	r3, [r4, #12]
 8006358:	2302      	movs	r3, #2
 800635a:	4313      	orrs	r3, r2
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	782b      	ldrb	r3, [r5, #0]
 8006360:	2b2e      	cmp	r3, #46	; 0x2e
 8006362:	d10a      	bne.n	800637a <_svfiprintf_r+0x12e>
 8006364:	786b      	ldrb	r3, [r5, #1]
 8006366:	2b2a      	cmp	r3, #42	; 0x2a
 8006368:	d135      	bne.n	80063d6 <_svfiprintf_r+0x18a>
 800636a:	9b07      	ldr	r3, [sp, #28]
 800636c:	3502      	adds	r5, #2
 800636e:	1d1a      	adds	r2, r3, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	9207      	str	r2, [sp, #28]
 8006374:	2b00      	cmp	r3, #0
 8006376:	db2b      	blt.n	80063d0 <_svfiprintf_r+0x184>
 8006378:	9309      	str	r3, [sp, #36]	; 0x24
 800637a:	4e30      	ldr	r6, [pc, #192]	; (800643c <_svfiprintf_r+0x1f0>)
 800637c:	2203      	movs	r2, #3
 800637e:	0030      	movs	r0, r6
 8006380:	7829      	ldrb	r1, [r5, #0]
 8006382:	f000 f9e5 	bl	8006750 <memchr>
 8006386:	2800      	cmp	r0, #0
 8006388:	d006      	beq.n	8006398 <_svfiprintf_r+0x14c>
 800638a:	2340      	movs	r3, #64	; 0x40
 800638c:	1b80      	subs	r0, r0, r6
 800638e:	4083      	lsls	r3, r0
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	3501      	adds	r5, #1
 8006394:	4313      	orrs	r3, r2
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	7829      	ldrb	r1, [r5, #0]
 800639a:	2206      	movs	r2, #6
 800639c:	4828      	ldr	r0, [pc, #160]	; (8006440 <_svfiprintf_r+0x1f4>)
 800639e:	1c6e      	adds	r6, r5, #1
 80063a0:	7621      	strb	r1, [r4, #24]
 80063a2:	f000 f9d5 	bl	8006750 <memchr>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d03c      	beq.n	8006424 <_svfiprintf_r+0x1d8>
 80063aa:	4b26      	ldr	r3, [pc, #152]	; (8006444 <_svfiprintf_r+0x1f8>)
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d125      	bne.n	80063fc <_svfiprintf_r+0x1b0>
 80063b0:	2207      	movs	r2, #7
 80063b2:	9b07      	ldr	r3, [sp, #28]
 80063b4:	3307      	adds	r3, #7
 80063b6:	4393      	bics	r3, r2
 80063b8:	3308      	adds	r3, #8
 80063ba:	9307      	str	r3, [sp, #28]
 80063bc:	6963      	ldr	r3, [r4, #20]
 80063be:	9a04      	ldr	r2, [sp, #16]
 80063c0:	189b      	adds	r3, r3, r2
 80063c2:	6163      	str	r3, [r4, #20]
 80063c4:	e765      	b.n	8006292 <_svfiprintf_r+0x46>
 80063c6:	4343      	muls	r3, r0
 80063c8:	0035      	movs	r5, r6
 80063ca:	2101      	movs	r1, #1
 80063cc:	189b      	adds	r3, r3, r2
 80063ce:	e7a6      	b.n	800631e <_svfiprintf_r+0xd2>
 80063d0:	2301      	movs	r3, #1
 80063d2:	425b      	negs	r3, r3
 80063d4:	e7d0      	b.n	8006378 <_svfiprintf_r+0x12c>
 80063d6:	2300      	movs	r3, #0
 80063d8:	200a      	movs	r0, #10
 80063da:	001a      	movs	r2, r3
 80063dc:	3501      	adds	r5, #1
 80063de:	6063      	str	r3, [r4, #4]
 80063e0:	7829      	ldrb	r1, [r5, #0]
 80063e2:	1c6e      	adds	r6, r5, #1
 80063e4:	3930      	subs	r1, #48	; 0x30
 80063e6:	2909      	cmp	r1, #9
 80063e8:	d903      	bls.n	80063f2 <_svfiprintf_r+0x1a6>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0c5      	beq.n	800637a <_svfiprintf_r+0x12e>
 80063ee:	9209      	str	r2, [sp, #36]	; 0x24
 80063f0:	e7c3      	b.n	800637a <_svfiprintf_r+0x12e>
 80063f2:	4342      	muls	r2, r0
 80063f4:	0035      	movs	r5, r6
 80063f6:	2301      	movs	r3, #1
 80063f8:	1852      	adds	r2, r2, r1
 80063fa:	e7f1      	b.n	80063e0 <_svfiprintf_r+0x194>
 80063fc:	ab07      	add	r3, sp, #28
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	003a      	movs	r2, r7
 8006402:	0021      	movs	r1, r4
 8006404:	4b10      	ldr	r3, [pc, #64]	; (8006448 <_svfiprintf_r+0x1fc>)
 8006406:	9803      	ldr	r0, [sp, #12]
 8006408:	e000      	b.n	800640c <_svfiprintf_r+0x1c0>
 800640a:	bf00      	nop
 800640c:	9004      	str	r0, [sp, #16]
 800640e:	9b04      	ldr	r3, [sp, #16]
 8006410:	3301      	adds	r3, #1
 8006412:	d1d3      	bne.n	80063bc <_svfiprintf_r+0x170>
 8006414:	89bb      	ldrh	r3, [r7, #12]
 8006416:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006418:	065b      	lsls	r3, r3, #25
 800641a:	d400      	bmi.n	800641e <_svfiprintf_r+0x1d2>
 800641c:	e72d      	b.n	800627a <_svfiprintf_r+0x2e>
 800641e:	2001      	movs	r0, #1
 8006420:	4240      	negs	r0, r0
 8006422:	e72a      	b.n	800627a <_svfiprintf_r+0x2e>
 8006424:	ab07      	add	r3, sp, #28
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	003a      	movs	r2, r7
 800642a:	0021      	movs	r1, r4
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <_svfiprintf_r+0x1fc>)
 800642e:	9803      	ldr	r0, [sp, #12]
 8006430:	f000 f87c 	bl	800652c <_printf_i>
 8006434:	e7ea      	b.n	800640c <_svfiprintf_r+0x1c0>
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	08006cb0 	.word	0x08006cb0
 800643c:	08006cb6 	.word	0x08006cb6
 8006440:	08006cba 	.word	0x08006cba
 8006444:	00000000 	.word	0x00000000
 8006448:	08006189 	.word	0x08006189

0800644c <_printf_common>:
 800644c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800644e:	0015      	movs	r5, r2
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	688a      	ldr	r2, [r1, #8]
 8006454:	690b      	ldr	r3, [r1, #16]
 8006456:	000c      	movs	r4, r1
 8006458:	9000      	str	r0, [sp, #0]
 800645a:	4293      	cmp	r3, r2
 800645c:	da00      	bge.n	8006460 <_printf_common+0x14>
 800645e:	0013      	movs	r3, r2
 8006460:	0022      	movs	r2, r4
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	3243      	adds	r2, #67	; 0x43
 8006466:	7812      	ldrb	r2, [r2, #0]
 8006468:	2a00      	cmp	r2, #0
 800646a:	d001      	beq.n	8006470 <_printf_common+0x24>
 800646c:	3301      	adds	r3, #1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	069b      	lsls	r3, r3, #26
 8006474:	d502      	bpl.n	800647c <_printf_common+0x30>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	3302      	adds	r3, #2
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	6822      	ldr	r2, [r4, #0]
 800647e:	2306      	movs	r3, #6
 8006480:	0017      	movs	r7, r2
 8006482:	401f      	ands	r7, r3
 8006484:	421a      	tst	r2, r3
 8006486:	d027      	beq.n	80064d8 <_printf_common+0x8c>
 8006488:	0023      	movs	r3, r4
 800648a:	3343      	adds	r3, #67	; 0x43
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	1e5a      	subs	r2, r3, #1
 8006490:	4193      	sbcs	r3, r2
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	0692      	lsls	r2, r2, #26
 8006496:	d430      	bmi.n	80064fa <_printf_common+0xae>
 8006498:	0022      	movs	r2, r4
 800649a:	9901      	ldr	r1, [sp, #4]
 800649c:	9800      	ldr	r0, [sp, #0]
 800649e:	9e08      	ldr	r6, [sp, #32]
 80064a0:	3243      	adds	r2, #67	; 0x43
 80064a2:	47b0      	blx	r6
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d025      	beq.n	80064f4 <_printf_common+0xa8>
 80064a8:	2306      	movs	r3, #6
 80064aa:	6820      	ldr	r0, [r4, #0]
 80064ac:	682a      	ldr	r2, [r5, #0]
 80064ae:	68e1      	ldr	r1, [r4, #12]
 80064b0:	2500      	movs	r5, #0
 80064b2:	4003      	ands	r3, r0
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d103      	bne.n	80064c0 <_printf_common+0x74>
 80064b8:	1a8d      	subs	r5, r1, r2
 80064ba:	43eb      	mvns	r3, r5
 80064bc:	17db      	asrs	r3, r3, #31
 80064be:	401d      	ands	r5, r3
 80064c0:	68a3      	ldr	r3, [r4, #8]
 80064c2:	6922      	ldr	r2, [r4, #16]
 80064c4:	4293      	cmp	r3, r2
 80064c6:	dd01      	ble.n	80064cc <_printf_common+0x80>
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	18ed      	adds	r5, r5, r3
 80064cc:	2700      	movs	r7, #0
 80064ce:	42bd      	cmp	r5, r7
 80064d0:	d120      	bne.n	8006514 <_printf_common+0xc8>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e010      	b.n	80064f8 <_printf_common+0xac>
 80064d6:	3701      	adds	r7, #1
 80064d8:	68e3      	ldr	r3, [r4, #12]
 80064da:	682a      	ldr	r2, [r5, #0]
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	42bb      	cmp	r3, r7
 80064e0:	ddd2      	ble.n	8006488 <_printf_common+0x3c>
 80064e2:	0022      	movs	r2, r4
 80064e4:	2301      	movs	r3, #1
 80064e6:	9901      	ldr	r1, [sp, #4]
 80064e8:	9800      	ldr	r0, [sp, #0]
 80064ea:	9e08      	ldr	r6, [sp, #32]
 80064ec:	3219      	adds	r2, #25
 80064ee:	47b0      	blx	r6
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d1f0      	bne.n	80064d6 <_printf_common+0x8a>
 80064f4:	2001      	movs	r0, #1
 80064f6:	4240      	negs	r0, r0
 80064f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064fa:	2030      	movs	r0, #48	; 0x30
 80064fc:	18e1      	adds	r1, r4, r3
 80064fe:	3143      	adds	r1, #67	; 0x43
 8006500:	7008      	strb	r0, [r1, #0]
 8006502:	0021      	movs	r1, r4
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	3145      	adds	r1, #69	; 0x45
 8006508:	7809      	ldrb	r1, [r1, #0]
 800650a:	18a2      	adds	r2, r4, r2
 800650c:	3243      	adds	r2, #67	; 0x43
 800650e:	3302      	adds	r3, #2
 8006510:	7011      	strb	r1, [r2, #0]
 8006512:	e7c1      	b.n	8006498 <_printf_common+0x4c>
 8006514:	0022      	movs	r2, r4
 8006516:	2301      	movs	r3, #1
 8006518:	9901      	ldr	r1, [sp, #4]
 800651a:	9800      	ldr	r0, [sp, #0]
 800651c:	9e08      	ldr	r6, [sp, #32]
 800651e:	321a      	adds	r2, #26
 8006520:	47b0      	blx	r6
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d0e6      	beq.n	80064f4 <_printf_common+0xa8>
 8006526:	3701      	adds	r7, #1
 8006528:	e7d1      	b.n	80064ce <_printf_common+0x82>
	...

0800652c <_printf_i>:
 800652c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652e:	b08b      	sub	sp, #44	; 0x2c
 8006530:	9206      	str	r2, [sp, #24]
 8006532:	000a      	movs	r2, r1
 8006534:	3243      	adds	r2, #67	; 0x43
 8006536:	9307      	str	r3, [sp, #28]
 8006538:	9005      	str	r0, [sp, #20]
 800653a:	9204      	str	r2, [sp, #16]
 800653c:	7e0a      	ldrb	r2, [r1, #24]
 800653e:	000c      	movs	r4, r1
 8006540:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006542:	2a78      	cmp	r2, #120	; 0x78
 8006544:	d807      	bhi.n	8006556 <_printf_i+0x2a>
 8006546:	2a62      	cmp	r2, #98	; 0x62
 8006548:	d809      	bhi.n	800655e <_printf_i+0x32>
 800654a:	2a00      	cmp	r2, #0
 800654c:	d100      	bne.n	8006550 <_printf_i+0x24>
 800654e:	e0c1      	b.n	80066d4 <_printf_i+0x1a8>
 8006550:	2a58      	cmp	r2, #88	; 0x58
 8006552:	d100      	bne.n	8006556 <_printf_i+0x2a>
 8006554:	e08c      	b.n	8006670 <_printf_i+0x144>
 8006556:	0026      	movs	r6, r4
 8006558:	3642      	adds	r6, #66	; 0x42
 800655a:	7032      	strb	r2, [r6, #0]
 800655c:	e022      	b.n	80065a4 <_printf_i+0x78>
 800655e:	0010      	movs	r0, r2
 8006560:	3863      	subs	r0, #99	; 0x63
 8006562:	2815      	cmp	r0, #21
 8006564:	d8f7      	bhi.n	8006556 <_printf_i+0x2a>
 8006566:	f7f9 fdcb 	bl	8000100 <__gnu_thumb1_case_shi>
 800656a:	0016      	.short	0x0016
 800656c:	fff6001f 	.word	0xfff6001f
 8006570:	fff6fff6 	.word	0xfff6fff6
 8006574:	001ffff6 	.word	0x001ffff6
 8006578:	fff6fff6 	.word	0xfff6fff6
 800657c:	fff6fff6 	.word	0xfff6fff6
 8006580:	003600a8 	.word	0x003600a8
 8006584:	fff6009a 	.word	0xfff6009a
 8006588:	00b9fff6 	.word	0x00b9fff6
 800658c:	0036fff6 	.word	0x0036fff6
 8006590:	fff6fff6 	.word	0xfff6fff6
 8006594:	009e      	.short	0x009e
 8006596:	0026      	movs	r6, r4
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	3642      	adds	r6, #66	; 0x42
 800659c:	1d11      	adds	r1, r2, #4
 800659e:	6019      	str	r1, [r3, #0]
 80065a0:	6813      	ldr	r3, [r2, #0]
 80065a2:	7033      	strb	r3, [r6, #0]
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0a7      	b.n	80066f8 <_printf_i+0x1cc>
 80065a8:	6808      	ldr	r0, [r1, #0]
 80065aa:	6819      	ldr	r1, [r3, #0]
 80065ac:	1d0a      	adds	r2, r1, #4
 80065ae:	0605      	lsls	r5, r0, #24
 80065b0:	d50b      	bpl.n	80065ca <_printf_i+0x9e>
 80065b2:	680d      	ldr	r5, [r1, #0]
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	da03      	bge.n	80065c2 <_printf_i+0x96>
 80065ba:	232d      	movs	r3, #45	; 0x2d
 80065bc:	9a04      	ldr	r2, [sp, #16]
 80065be:	426d      	negs	r5, r5
 80065c0:	7013      	strb	r3, [r2, #0]
 80065c2:	4b61      	ldr	r3, [pc, #388]	; (8006748 <_printf_i+0x21c>)
 80065c4:	270a      	movs	r7, #10
 80065c6:	9303      	str	r3, [sp, #12]
 80065c8:	e01b      	b.n	8006602 <_printf_i+0xd6>
 80065ca:	680d      	ldr	r5, [r1, #0]
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	0641      	lsls	r1, r0, #25
 80065d0:	d5f1      	bpl.n	80065b6 <_printf_i+0x8a>
 80065d2:	b22d      	sxth	r5, r5
 80065d4:	e7ef      	b.n	80065b6 <_printf_i+0x8a>
 80065d6:	680d      	ldr	r5, [r1, #0]
 80065d8:	6819      	ldr	r1, [r3, #0]
 80065da:	1d08      	adds	r0, r1, #4
 80065dc:	6018      	str	r0, [r3, #0]
 80065de:	062e      	lsls	r6, r5, #24
 80065e0:	d501      	bpl.n	80065e6 <_printf_i+0xba>
 80065e2:	680d      	ldr	r5, [r1, #0]
 80065e4:	e003      	b.n	80065ee <_printf_i+0xc2>
 80065e6:	066d      	lsls	r5, r5, #25
 80065e8:	d5fb      	bpl.n	80065e2 <_printf_i+0xb6>
 80065ea:	680d      	ldr	r5, [r1, #0]
 80065ec:	b2ad      	uxth	r5, r5
 80065ee:	4b56      	ldr	r3, [pc, #344]	; (8006748 <_printf_i+0x21c>)
 80065f0:	2708      	movs	r7, #8
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	2a6f      	cmp	r2, #111	; 0x6f
 80065f6:	d000      	beq.n	80065fa <_printf_i+0xce>
 80065f8:	3702      	adds	r7, #2
 80065fa:	0023      	movs	r3, r4
 80065fc:	2200      	movs	r2, #0
 80065fe:	3343      	adds	r3, #67	; 0x43
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	6863      	ldr	r3, [r4, #4]
 8006604:	60a3      	str	r3, [r4, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	db03      	blt.n	8006612 <_printf_i+0xe6>
 800660a:	2204      	movs	r2, #4
 800660c:	6821      	ldr	r1, [r4, #0]
 800660e:	4391      	bics	r1, r2
 8006610:	6021      	str	r1, [r4, #0]
 8006612:	2d00      	cmp	r5, #0
 8006614:	d102      	bne.n	800661c <_printf_i+0xf0>
 8006616:	9e04      	ldr	r6, [sp, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00c      	beq.n	8006636 <_printf_i+0x10a>
 800661c:	9e04      	ldr	r6, [sp, #16]
 800661e:	0028      	movs	r0, r5
 8006620:	0039      	movs	r1, r7
 8006622:	f7f9 fdfd 	bl	8000220 <__aeabi_uidivmod>
 8006626:	9b03      	ldr	r3, [sp, #12]
 8006628:	3e01      	subs	r6, #1
 800662a:	5c5b      	ldrb	r3, [r3, r1]
 800662c:	7033      	strb	r3, [r6, #0]
 800662e:	002b      	movs	r3, r5
 8006630:	0005      	movs	r5, r0
 8006632:	429f      	cmp	r7, r3
 8006634:	d9f3      	bls.n	800661e <_printf_i+0xf2>
 8006636:	2f08      	cmp	r7, #8
 8006638:	d109      	bne.n	800664e <_printf_i+0x122>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	07db      	lsls	r3, r3, #31
 800663e:	d506      	bpl.n	800664e <_printf_i+0x122>
 8006640:	6863      	ldr	r3, [r4, #4]
 8006642:	6922      	ldr	r2, [r4, #16]
 8006644:	4293      	cmp	r3, r2
 8006646:	dc02      	bgt.n	800664e <_printf_i+0x122>
 8006648:	2330      	movs	r3, #48	; 0x30
 800664a:	3e01      	subs	r6, #1
 800664c:	7033      	strb	r3, [r6, #0]
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	1b9b      	subs	r3, r3, r6
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	9b07      	ldr	r3, [sp, #28]
 8006656:	0021      	movs	r1, r4
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	9805      	ldr	r0, [sp, #20]
 800665c:	9b06      	ldr	r3, [sp, #24]
 800665e:	aa09      	add	r2, sp, #36	; 0x24
 8006660:	f7ff fef4 	bl	800644c <_printf_common>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d14c      	bne.n	8006702 <_printf_i+0x1d6>
 8006668:	2001      	movs	r0, #1
 800666a:	4240      	negs	r0, r0
 800666c:	b00b      	add	sp, #44	; 0x2c
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	3145      	adds	r1, #69	; 0x45
 8006672:	700a      	strb	r2, [r1, #0]
 8006674:	4a34      	ldr	r2, [pc, #208]	; (8006748 <_printf_i+0x21c>)
 8006676:	9203      	str	r2, [sp, #12]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	6821      	ldr	r1, [r4, #0]
 800667c:	ca20      	ldmia	r2!, {r5}
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	0608      	lsls	r0, r1, #24
 8006682:	d516      	bpl.n	80066b2 <_printf_i+0x186>
 8006684:	07cb      	lsls	r3, r1, #31
 8006686:	d502      	bpl.n	800668e <_printf_i+0x162>
 8006688:	2320      	movs	r3, #32
 800668a:	4319      	orrs	r1, r3
 800668c:	6021      	str	r1, [r4, #0]
 800668e:	2710      	movs	r7, #16
 8006690:	2d00      	cmp	r5, #0
 8006692:	d1b2      	bne.n	80065fa <_printf_i+0xce>
 8006694:	2320      	movs	r3, #32
 8006696:	6822      	ldr	r2, [r4, #0]
 8006698:	439a      	bics	r2, r3
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	e7ad      	b.n	80065fa <_printf_i+0xce>
 800669e:	2220      	movs	r2, #32
 80066a0:	6809      	ldr	r1, [r1, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	6022      	str	r2, [r4, #0]
 80066a6:	0022      	movs	r2, r4
 80066a8:	2178      	movs	r1, #120	; 0x78
 80066aa:	3245      	adds	r2, #69	; 0x45
 80066ac:	7011      	strb	r1, [r2, #0]
 80066ae:	4a27      	ldr	r2, [pc, #156]	; (800674c <_printf_i+0x220>)
 80066b0:	e7e1      	b.n	8006676 <_printf_i+0x14a>
 80066b2:	0648      	lsls	r0, r1, #25
 80066b4:	d5e6      	bpl.n	8006684 <_printf_i+0x158>
 80066b6:	b2ad      	uxth	r5, r5
 80066b8:	e7e4      	b.n	8006684 <_printf_i+0x158>
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	680d      	ldr	r5, [r1, #0]
 80066be:	1d10      	adds	r0, r2, #4
 80066c0:	6949      	ldr	r1, [r1, #20]
 80066c2:	6018      	str	r0, [r3, #0]
 80066c4:	6813      	ldr	r3, [r2, #0]
 80066c6:	062e      	lsls	r6, r5, #24
 80066c8:	d501      	bpl.n	80066ce <_printf_i+0x1a2>
 80066ca:	6019      	str	r1, [r3, #0]
 80066cc:	e002      	b.n	80066d4 <_printf_i+0x1a8>
 80066ce:	066d      	lsls	r5, r5, #25
 80066d0:	d5fb      	bpl.n	80066ca <_printf_i+0x19e>
 80066d2:	8019      	strh	r1, [r3, #0]
 80066d4:	2300      	movs	r3, #0
 80066d6:	9e04      	ldr	r6, [sp, #16]
 80066d8:	6123      	str	r3, [r4, #16]
 80066da:	e7bb      	b.n	8006654 <_printf_i+0x128>
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	1d11      	adds	r1, r2, #4
 80066e0:	6019      	str	r1, [r3, #0]
 80066e2:	6816      	ldr	r6, [r2, #0]
 80066e4:	2100      	movs	r1, #0
 80066e6:	0030      	movs	r0, r6
 80066e8:	6862      	ldr	r2, [r4, #4]
 80066ea:	f000 f831 	bl	8006750 <memchr>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d001      	beq.n	80066f6 <_printf_i+0x1ca>
 80066f2:	1b80      	subs	r0, r0, r6
 80066f4:	6060      	str	r0, [r4, #4]
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	2300      	movs	r3, #0
 80066fc:	9a04      	ldr	r2, [sp, #16]
 80066fe:	7013      	strb	r3, [r2, #0]
 8006700:	e7a8      	b.n	8006654 <_printf_i+0x128>
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	0032      	movs	r2, r6
 8006706:	9906      	ldr	r1, [sp, #24]
 8006708:	9805      	ldr	r0, [sp, #20]
 800670a:	9d07      	ldr	r5, [sp, #28]
 800670c:	47a8      	blx	r5
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d0aa      	beq.n	8006668 <_printf_i+0x13c>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	079b      	lsls	r3, r3, #30
 8006716:	d415      	bmi.n	8006744 <_printf_i+0x218>
 8006718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800671a:	68e0      	ldr	r0, [r4, #12]
 800671c:	4298      	cmp	r0, r3
 800671e:	daa5      	bge.n	800666c <_printf_i+0x140>
 8006720:	0018      	movs	r0, r3
 8006722:	e7a3      	b.n	800666c <_printf_i+0x140>
 8006724:	0022      	movs	r2, r4
 8006726:	2301      	movs	r3, #1
 8006728:	9906      	ldr	r1, [sp, #24]
 800672a:	9805      	ldr	r0, [sp, #20]
 800672c:	9e07      	ldr	r6, [sp, #28]
 800672e:	3219      	adds	r2, #25
 8006730:	47b0      	blx	r6
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	d098      	beq.n	8006668 <_printf_i+0x13c>
 8006736:	3501      	adds	r5, #1
 8006738:	68e3      	ldr	r3, [r4, #12]
 800673a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800673c:	1a9b      	subs	r3, r3, r2
 800673e:	42ab      	cmp	r3, r5
 8006740:	dcf0      	bgt.n	8006724 <_printf_i+0x1f8>
 8006742:	e7e9      	b.n	8006718 <_printf_i+0x1ec>
 8006744:	2500      	movs	r5, #0
 8006746:	e7f7      	b.n	8006738 <_printf_i+0x20c>
 8006748:	08006cc1 	.word	0x08006cc1
 800674c:	08006cd2 	.word	0x08006cd2

08006750 <memchr>:
 8006750:	b2c9      	uxtb	r1, r1
 8006752:	1882      	adds	r2, r0, r2
 8006754:	4290      	cmp	r0, r2
 8006756:	d101      	bne.n	800675c <memchr+0xc>
 8006758:	2000      	movs	r0, #0
 800675a:	4770      	bx	lr
 800675c:	7803      	ldrb	r3, [r0, #0]
 800675e:	428b      	cmp	r3, r1
 8006760:	d0fb      	beq.n	800675a <memchr+0xa>
 8006762:	3001      	adds	r0, #1
 8006764:	e7f6      	b.n	8006754 <memchr+0x4>

08006766 <memcpy>:
 8006766:	2300      	movs	r3, #0
 8006768:	b510      	push	{r4, lr}
 800676a:	429a      	cmp	r2, r3
 800676c:	d100      	bne.n	8006770 <memcpy+0xa>
 800676e:	bd10      	pop	{r4, pc}
 8006770:	5ccc      	ldrb	r4, [r1, r3]
 8006772:	54c4      	strb	r4, [r0, r3]
 8006774:	3301      	adds	r3, #1
 8006776:	e7f8      	b.n	800676a <memcpy+0x4>

08006778 <memmove>:
 8006778:	b510      	push	{r4, lr}
 800677a:	4288      	cmp	r0, r1
 800677c:	d902      	bls.n	8006784 <memmove+0xc>
 800677e:	188b      	adds	r3, r1, r2
 8006780:	4298      	cmp	r0, r3
 8006782:	d303      	bcc.n	800678c <memmove+0x14>
 8006784:	2300      	movs	r3, #0
 8006786:	e007      	b.n	8006798 <memmove+0x20>
 8006788:	5c8b      	ldrb	r3, [r1, r2]
 800678a:	5483      	strb	r3, [r0, r2]
 800678c:	3a01      	subs	r2, #1
 800678e:	d2fb      	bcs.n	8006788 <memmove+0x10>
 8006790:	bd10      	pop	{r4, pc}
 8006792:	5ccc      	ldrb	r4, [r1, r3]
 8006794:	54c4      	strb	r4, [r0, r3]
 8006796:	3301      	adds	r3, #1
 8006798:	429a      	cmp	r2, r3
 800679a:	d1fa      	bne.n	8006792 <memmove+0x1a>
 800679c:	e7f8      	b.n	8006790 <memmove+0x18>
	...

080067a0 <_free_r>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	0005      	movs	r5, r0
 80067a4:	2900      	cmp	r1, #0
 80067a6:	d010      	beq.n	80067ca <_free_r+0x2a>
 80067a8:	1f0c      	subs	r4, r1, #4
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da00      	bge.n	80067b2 <_free_r+0x12>
 80067b0:	18e4      	adds	r4, r4, r3
 80067b2:	0028      	movs	r0, r5
 80067b4:	f000 f918 	bl	80069e8 <__malloc_lock>
 80067b8:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <_free_r+0x90>)
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <_free_r+0x2c>
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	6014      	str	r4, [r2, #0]
 80067c4:	0028      	movs	r0, r5
 80067c6:	f000 f917 	bl	80069f8 <__malloc_unlock>
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d908      	bls.n	80067e2 <_free_r+0x42>
 80067d0:	6821      	ldr	r1, [r4, #0]
 80067d2:	1860      	adds	r0, r4, r1
 80067d4:	4283      	cmp	r3, r0
 80067d6:	d1f3      	bne.n	80067c0 <_free_r+0x20>
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	1841      	adds	r1, r0, r1
 80067de:	6021      	str	r1, [r4, #0]
 80067e0:	e7ee      	b.n	80067c0 <_free_r+0x20>
 80067e2:	001a      	movs	r2, r3
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <_free_r+0x4e>
 80067ea:	42a3      	cmp	r3, r4
 80067ec:	d9f9      	bls.n	80067e2 <_free_r+0x42>
 80067ee:	6811      	ldr	r1, [r2, #0]
 80067f0:	1850      	adds	r0, r2, r1
 80067f2:	42a0      	cmp	r0, r4
 80067f4:	d10b      	bne.n	800680e <_free_r+0x6e>
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	1809      	adds	r1, r1, r0
 80067fa:	1850      	adds	r0, r2, r1
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	4283      	cmp	r3, r0
 8006800:	d1e0      	bne.n	80067c4 <_free_r+0x24>
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	1841      	adds	r1, r0, r1
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	6053      	str	r3, [r2, #4]
 800680c:	e7da      	b.n	80067c4 <_free_r+0x24>
 800680e:	42a0      	cmp	r0, r4
 8006810:	d902      	bls.n	8006818 <_free_r+0x78>
 8006812:	230c      	movs	r3, #12
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	e7d5      	b.n	80067c4 <_free_r+0x24>
 8006818:	6821      	ldr	r1, [r4, #0]
 800681a:	1860      	adds	r0, r4, r1
 800681c:	4283      	cmp	r3, r0
 800681e:	d103      	bne.n	8006828 <_free_r+0x88>
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	1841      	adds	r1, r0, r1
 8006826:	6021      	str	r1, [r4, #0]
 8006828:	6063      	str	r3, [r4, #4]
 800682a:	6054      	str	r4, [r2, #4]
 800682c:	e7ca      	b.n	80067c4 <_free_r+0x24>
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	200002f8 	.word	0x200002f8

08006834 <sbrk_aligned>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4e0f      	ldr	r6, [pc, #60]	; (8006874 <sbrk_aligned+0x40>)
 8006838:	000d      	movs	r5, r1
 800683a:	6831      	ldr	r1, [r6, #0]
 800683c:	0004      	movs	r4, r0
 800683e:	2900      	cmp	r1, #0
 8006840:	d102      	bne.n	8006848 <sbrk_aligned+0x14>
 8006842:	f000 f8bf 	bl	80069c4 <_sbrk_r>
 8006846:	6030      	str	r0, [r6, #0]
 8006848:	0029      	movs	r1, r5
 800684a:	0020      	movs	r0, r4
 800684c:	f000 f8ba 	bl	80069c4 <_sbrk_r>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d00a      	beq.n	800686a <sbrk_aligned+0x36>
 8006854:	2303      	movs	r3, #3
 8006856:	1cc5      	adds	r5, r0, #3
 8006858:	439d      	bics	r5, r3
 800685a:	42a8      	cmp	r0, r5
 800685c:	d007      	beq.n	800686e <sbrk_aligned+0x3a>
 800685e:	1a29      	subs	r1, r5, r0
 8006860:	0020      	movs	r0, r4
 8006862:	f000 f8af 	bl	80069c4 <_sbrk_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d101      	bne.n	800686e <sbrk_aligned+0x3a>
 800686a:	2501      	movs	r5, #1
 800686c:	426d      	negs	r5, r5
 800686e:	0028      	movs	r0, r5
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	200002fc 	.word	0x200002fc

08006878 <_malloc_r>:
 8006878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800687a:	2203      	movs	r2, #3
 800687c:	1ccb      	adds	r3, r1, #3
 800687e:	4393      	bics	r3, r2
 8006880:	3308      	adds	r3, #8
 8006882:	0006      	movs	r6, r0
 8006884:	001f      	movs	r7, r3
 8006886:	2b0c      	cmp	r3, #12
 8006888:	d232      	bcs.n	80068f0 <_malloc_r+0x78>
 800688a:	270c      	movs	r7, #12
 800688c:	42b9      	cmp	r1, r7
 800688e:	d831      	bhi.n	80068f4 <_malloc_r+0x7c>
 8006890:	0030      	movs	r0, r6
 8006892:	f000 f8a9 	bl	80069e8 <__malloc_lock>
 8006896:	4d32      	ldr	r5, [pc, #200]	; (8006960 <_malloc_r+0xe8>)
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	001c      	movs	r4, r3
 800689c:	2c00      	cmp	r4, #0
 800689e:	d12e      	bne.n	80068fe <_malloc_r+0x86>
 80068a0:	0039      	movs	r1, r7
 80068a2:	0030      	movs	r0, r6
 80068a4:	f7ff ffc6 	bl	8006834 <sbrk_aligned>
 80068a8:	0004      	movs	r4, r0
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d11e      	bne.n	80068ec <_malloc_r+0x74>
 80068ae:	682c      	ldr	r4, [r5, #0]
 80068b0:	0025      	movs	r5, r4
 80068b2:	2d00      	cmp	r5, #0
 80068b4:	d14a      	bne.n	800694c <_malloc_r+0xd4>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	0029      	movs	r1, r5
 80068ba:	18e3      	adds	r3, r4, r3
 80068bc:	0030      	movs	r0, r6
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	f000 f880 	bl	80069c4 <_sbrk_r>
 80068c4:	9b01      	ldr	r3, [sp, #4]
 80068c6:	4283      	cmp	r3, r0
 80068c8:	d143      	bne.n	8006952 <_malloc_r+0xda>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	3703      	adds	r7, #3
 80068ce:	1aff      	subs	r7, r7, r3
 80068d0:	2303      	movs	r3, #3
 80068d2:	439f      	bics	r7, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	2f0c      	cmp	r7, #12
 80068d8:	d200      	bcs.n	80068dc <_malloc_r+0x64>
 80068da:	270c      	movs	r7, #12
 80068dc:	0039      	movs	r1, r7
 80068de:	0030      	movs	r0, r6
 80068e0:	f7ff ffa8 	bl	8006834 <sbrk_aligned>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d034      	beq.n	8006952 <_malloc_r+0xda>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	19df      	adds	r7, r3, r7
 80068ec:	6027      	str	r7, [r4, #0]
 80068ee:	e013      	b.n	8006918 <_malloc_r+0xa0>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dacb      	bge.n	800688c <_malloc_r+0x14>
 80068f4:	230c      	movs	r3, #12
 80068f6:	2500      	movs	r5, #0
 80068f8:	6033      	str	r3, [r6, #0]
 80068fa:	0028      	movs	r0, r5
 80068fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	1bd1      	subs	r1, r2, r7
 8006902:	d420      	bmi.n	8006946 <_malloc_r+0xce>
 8006904:	290b      	cmp	r1, #11
 8006906:	d917      	bls.n	8006938 <_malloc_r+0xc0>
 8006908:	19e2      	adds	r2, r4, r7
 800690a:	6027      	str	r7, [r4, #0]
 800690c:	42a3      	cmp	r3, r4
 800690e:	d111      	bne.n	8006934 <_malloc_r+0xbc>
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	6863      	ldr	r3, [r4, #4]
 8006914:	6011      	str	r1, [r2, #0]
 8006916:	6053      	str	r3, [r2, #4]
 8006918:	0030      	movs	r0, r6
 800691a:	0025      	movs	r5, r4
 800691c:	f000 f86c 	bl	80069f8 <__malloc_unlock>
 8006920:	2207      	movs	r2, #7
 8006922:	350b      	adds	r5, #11
 8006924:	1d23      	adds	r3, r4, #4
 8006926:	4395      	bics	r5, r2
 8006928:	1aea      	subs	r2, r5, r3
 800692a:	429d      	cmp	r5, r3
 800692c:	d0e5      	beq.n	80068fa <_malloc_r+0x82>
 800692e:	1b5b      	subs	r3, r3, r5
 8006930:	50a3      	str	r3, [r4, r2]
 8006932:	e7e2      	b.n	80068fa <_malloc_r+0x82>
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	e7ec      	b.n	8006912 <_malloc_r+0x9a>
 8006938:	6862      	ldr	r2, [r4, #4]
 800693a:	42a3      	cmp	r3, r4
 800693c:	d101      	bne.n	8006942 <_malloc_r+0xca>
 800693e:	602a      	str	r2, [r5, #0]
 8006940:	e7ea      	b.n	8006918 <_malloc_r+0xa0>
 8006942:	605a      	str	r2, [r3, #4]
 8006944:	e7e8      	b.n	8006918 <_malloc_r+0xa0>
 8006946:	0023      	movs	r3, r4
 8006948:	6864      	ldr	r4, [r4, #4]
 800694a:	e7a7      	b.n	800689c <_malloc_r+0x24>
 800694c:	002c      	movs	r4, r5
 800694e:	686d      	ldr	r5, [r5, #4]
 8006950:	e7af      	b.n	80068b2 <_malloc_r+0x3a>
 8006952:	230c      	movs	r3, #12
 8006954:	0030      	movs	r0, r6
 8006956:	6033      	str	r3, [r6, #0]
 8006958:	f000 f84e 	bl	80069f8 <__malloc_unlock>
 800695c:	e7cd      	b.n	80068fa <_malloc_r+0x82>
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	200002f8 	.word	0x200002f8

08006964 <_realloc_r>:
 8006964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006966:	0007      	movs	r7, r0
 8006968:	000e      	movs	r6, r1
 800696a:	0014      	movs	r4, r2
 800696c:	2900      	cmp	r1, #0
 800696e:	d105      	bne.n	800697c <_realloc_r+0x18>
 8006970:	0011      	movs	r1, r2
 8006972:	f7ff ff81 	bl	8006878 <_malloc_r>
 8006976:	0005      	movs	r5, r0
 8006978:	0028      	movs	r0, r5
 800697a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800697c:	2a00      	cmp	r2, #0
 800697e:	d103      	bne.n	8006988 <_realloc_r+0x24>
 8006980:	f7ff ff0e 	bl	80067a0 <_free_r>
 8006984:	0025      	movs	r5, r4
 8006986:	e7f7      	b.n	8006978 <_realloc_r+0x14>
 8006988:	f000 f83e 	bl	8006a08 <_malloc_usable_size_r>
 800698c:	9001      	str	r0, [sp, #4]
 800698e:	4284      	cmp	r4, r0
 8006990:	d803      	bhi.n	800699a <_realloc_r+0x36>
 8006992:	0035      	movs	r5, r6
 8006994:	0843      	lsrs	r3, r0, #1
 8006996:	42a3      	cmp	r3, r4
 8006998:	d3ee      	bcc.n	8006978 <_realloc_r+0x14>
 800699a:	0021      	movs	r1, r4
 800699c:	0038      	movs	r0, r7
 800699e:	f7ff ff6b 	bl	8006878 <_malloc_r>
 80069a2:	1e05      	subs	r5, r0, #0
 80069a4:	d0e8      	beq.n	8006978 <_realloc_r+0x14>
 80069a6:	9b01      	ldr	r3, [sp, #4]
 80069a8:	0022      	movs	r2, r4
 80069aa:	429c      	cmp	r4, r3
 80069ac:	d900      	bls.n	80069b0 <_realloc_r+0x4c>
 80069ae:	001a      	movs	r2, r3
 80069b0:	0031      	movs	r1, r6
 80069b2:	0028      	movs	r0, r5
 80069b4:	f7ff fed7 	bl	8006766 <memcpy>
 80069b8:	0031      	movs	r1, r6
 80069ba:	0038      	movs	r0, r7
 80069bc:	f7ff fef0 	bl	80067a0 <_free_r>
 80069c0:	e7da      	b.n	8006978 <_realloc_r+0x14>
	...

080069c4 <_sbrk_r>:
 80069c4:	2300      	movs	r3, #0
 80069c6:	b570      	push	{r4, r5, r6, lr}
 80069c8:	4d06      	ldr	r5, [pc, #24]	; (80069e4 <_sbrk_r+0x20>)
 80069ca:	0004      	movs	r4, r0
 80069cc:	0008      	movs	r0, r1
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	f7fb f868 	bl	8001aa4 <_sbrk>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d103      	bne.n	80069e0 <_sbrk_r+0x1c>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d000      	beq.n	80069e0 <_sbrk_r+0x1c>
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	bd70      	pop	{r4, r5, r6, pc}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	20000300 	.word	0x20000300

080069e8 <__malloc_lock>:
 80069e8:	b510      	push	{r4, lr}
 80069ea:	4802      	ldr	r0, [pc, #8]	; (80069f4 <__malloc_lock+0xc>)
 80069ec:	f000 f814 	bl	8006a18 <__retarget_lock_acquire_recursive>
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	20000304 	.word	0x20000304

080069f8 <__malloc_unlock>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	4802      	ldr	r0, [pc, #8]	; (8006a04 <__malloc_unlock+0xc>)
 80069fc:	f000 f80d 	bl	8006a1a <__retarget_lock_release_recursive>
 8006a00:	bd10      	pop	{r4, pc}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	20000304 	.word	0x20000304

08006a08 <_malloc_usable_size_r>:
 8006a08:	1f0b      	subs	r3, r1, #4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	1f18      	subs	r0, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	da01      	bge.n	8006a16 <_malloc_usable_size_r+0xe>
 8006a12:	580b      	ldr	r3, [r1, r0]
 8006a14:	18c0      	adds	r0, r0, r3
 8006a16:	4770      	bx	lr

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <_init>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr

08006a28 <_fini>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr
