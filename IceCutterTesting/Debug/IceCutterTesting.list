
IceCutterTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006698  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a2c  08006a2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a2c  08006a2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000000c  08006a40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08006a40  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f4e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002900  00000000  00000000  00035f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00038888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ae0  00000000  00000000  0003aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c14  00000000  00000000  000519b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093356  00000000  00000000  000685c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb91a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a04  00000000  00000000  000fb96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006738 	.word	0x08006738

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08006738 	.word	0x08006738

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f8b7 	bl	8000394 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f843 	bl	80002bc <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f8a9 	bl	8000394 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f89f 	bl	8000394 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f84f 	bl	8000308 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f845 	bl	8000308 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_f2uiz>:
 800028c:	219e      	movs	r1, #158	; 0x9e
 800028e:	b510      	push	{r4, lr}
 8000290:	05c9      	lsls	r1, r1, #23
 8000292:	1c04      	adds	r4, r0, #0
 8000294:	f7ff fff0 	bl	8000278 <__aeabi_fcmpge>
 8000298:	2800      	cmp	r0, #0
 800029a:	d103      	bne.n	80002a4 <__aeabi_f2uiz+0x18>
 800029c:	1c20      	adds	r0, r4, #0
 800029e:	f000 fb91 	bl	80009c4 <__aeabi_f2iz>
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	219e      	movs	r1, #158	; 0x9e
 80002a6:	1c20      	adds	r0, r4, #0
 80002a8:	05c9      	lsls	r1, r1, #23
 80002aa:	f000 f9dd 	bl	8000668 <__aeabi_fsub>
 80002ae:	f000 fb89 	bl	80009c4 <__aeabi_f2iz>
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	061b      	lsls	r3, r3, #24
 80002b6:	469c      	mov	ip, r3
 80002b8:	4460      	add	r0, ip
 80002ba:	e7f2      	b.n	80002a2 <__aeabi_f2uiz+0x16>

080002bc <__eqsf2>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	0042      	lsls	r2, r0, #1
 80002c0:	0245      	lsls	r5, r0, #9
 80002c2:	024e      	lsls	r6, r1, #9
 80002c4:	004c      	lsls	r4, r1, #1
 80002c6:	0fc3      	lsrs	r3, r0, #31
 80002c8:	0a6d      	lsrs	r5, r5, #9
 80002ca:	2001      	movs	r0, #1
 80002cc:	0e12      	lsrs	r2, r2, #24
 80002ce:	0a76      	lsrs	r6, r6, #9
 80002d0:	0e24      	lsrs	r4, r4, #24
 80002d2:	0fc9      	lsrs	r1, r1, #31
 80002d4:	2aff      	cmp	r2, #255	; 0xff
 80002d6:	d006      	beq.n	80002e6 <__eqsf2+0x2a>
 80002d8:	2cff      	cmp	r4, #255	; 0xff
 80002da:	d003      	beq.n	80002e4 <__eqsf2+0x28>
 80002dc:	42a2      	cmp	r2, r4
 80002de:	d101      	bne.n	80002e4 <__eqsf2+0x28>
 80002e0:	42b5      	cmp	r5, r6
 80002e2:	d006      	beq.n	80002f2 <__eqsf2+0x36>
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d1fc      	bne.n	80002e4 <__eqsf2+0x28>
 80002ea:	2cff      	cmp	r4, #255	; 0xff
 80002ec:	d1fa      	bne.n	80002e4 <__eqsf2+0x28>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d1f8      	bne.n	80002e4 <__eqsf2+0x28>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d006      	beq.n	8000304 <__eqsf2+0x48>
 80002f6:	2001      	movs	r0, #1
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	d1f3      	bne.n	80002e4 <__eqsf2+0x28>
 80002fc:	0028      	movs	r0, r5
 80002fe:	1e43      	subs	r3, r0, #1
 8000300:	4198      	sbcs	r0, r3
 8000302:	e7ef      	b.n	80002e4 <__eqsf2+0x28>
 8000304:	2000      	movs	r0, #0
 8000306:	e7ed      	b.n	80002e4 <__eqsf2+0x28>

08000308 <__gesf2>:
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	0042      	lsls	r2, r0, #1
 800030c:	0245      	lsls	r5, r0, #9
 800030e:	024e      	lsls	r6, r1, #9
 8000310:	004c      	lsls	r4, r1, #1
 8000312:	0fc3      	lsrs	r3, r0, #31
 8000314:	0a6d      	lsrs	r5, r5, #9
 8000316:	0e12      	lsrs	r2, r2, #24
 8000318:	0a76      	lsrs	r6, r6, #9
 800031a:	0e24      	lsrs	r4, r4, #24
 800031c:	0fc8      	lsrs	r0, r1, #31
 800031e:	2aff      	cmp	r2, #255	; 0xff
 8000320:	d01b      	beq.n	800035a <__gesf2+0x52>
 8000322:	2cff      	cmp	r4, #255	; 0xff
 8000324:	d00e      	beq.n	8000344 <__gesf2+0x3c>
 8000326:	2a00      	cmp	r2, #0
 8000328:	d11b      	bne.n	8000362 <__gesf2+0x5a>
 800032a:	2c00      	cmp	r4, #0
 800032c:	d101      	bne.n	8000332 <__gesf2+0x2a>
 800032e:	2e00      	cmp	r6, #0
 8000330:	d01c      	beq.n	800036c <__gesf2+0x64>
 8000332:	2d00      	cmp	r5, #0
 8000334:	d00c      	beq.n	8000350 <__gesf2+0x48>
 8000336:	4283      	cmp	r3, r0
 8000338:	d01c      	beq.n	8000374 <__gesf2+0x6c>
 800033a:	2102      	movs	r1, #2
 800033c:	1e58      	subs	r0, r3, #1
 800033e:	4008      	ands	r0, r1
 8000340:	3801      	subs	r0, #1
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	2e00      	cmp	r6, #0
 8000346:	d122      	bne.n	800038e <__gesf2+0x86>
 8000348:	2a00      	cmp	r2, #0
 800034a:	d1f4      	bne.n	8000336 <__gesf2+0x2e>
 800034c:	2d00      	cmp	r5, #0
 800034e:	d1f2      	bne.n	8000336 <__gesf2+0x2e>
 8000350:	2800      	cmp	r0, #0
 8000352:	d1f6      	bne.n	8000342 <__gesf2+0x3a>
 8000354:	2001      	movs	r0, #1
 8000356:	4240      	negs	r0, r0
 8000358:	e7f3      	b.n	8000342 <__gesf2+0x3a>
 800035a:	2d00      	cmp	r5, #0
 800035c:	d117      	bne.n	800038e <__gesf2+0x86>
 800035e:	2cff      	cmp	r4, #255	; 0xff
 8000360:	d0f0      	beq.n	8000344 <__gesf2+0x3c>
 8000362:	2c00      	cmp	r4, #0
 8000364:	d1e7      	bne.n	8000336 <__gesf2+0x2e>
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1e5      	bne.n	8000336 <__gesf2+0x2e>
 800036a:	e7e6      	b.n	800033a <__gesf2+0x32>
 800036c:	2000      	movs	r0, #0
 800036e:	2d00      	cmp	r5, #0
 8000370:	d0e7      	beq.n	8000342 <__gesf2+0x3a>
 8000372:	e7e2      	b.n	800033a <__gesf2+0x32>
 8000374:	42a2      	cmp	r2, r4
 8000376:	dc05      	bgt.n	8000384 <__gesf2+0x7c>
 8000378:	dbea      	blt.n	8000350 <__gesf2+0x48>
 800037a:	42b5      	cmp	r5, r6
 800037c:	d802      	bhi.n	8000384 <__gesf2+0x7c>
 800037e:	d3e7      	bcc.n	8000350 <__gesf2+0x48>
 8000380:	2000      	movs	r0, #0
 8000382:	e7de      	b.n	8000342 <__gesf2+0x3a>
 8000384:	4243      	negs	r3, r0
 8000386:	4158      	adcs	r0, r3
 8000388:	0040      	lsls	r0, r0, #1
 800038a:	3801      	subs	r0, #1
 800038c:	e7d9      	b.n	8000342 <__gesf2+0x3a>
 800038e:	2002      	movs	r0, #2
 8000390:	4240      	negs	r0, r0
 8000392:	e7d6      	b.n	8000342 <__gesf2+0x3a>

08000394 <__lesf2>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	0042      	lsls	r2, r0, #1
 8000398:	0245      	lsls	r5, r0, #9
 800039a:	024e      	lsls	r6, r1, #9
 800039c:	004c      	lsls	r4, r1, #1
 800039e:	0fc3      	lsrs	r3, r0, #31
 80003a0:	0a6d      	lsrs	r5, r5, #9
 80003a2:	0e12      	lsrs	r2, r2, #24
 80003a4:	0a76      	lsrs	r6, r6, #9
 80003a6:	0e24      	lsrs	r4, r4, #24
 80003a8:	0fc8      	lsrs	r0, r1, #31
 80003aa:	2aff      	cmp	r2, #255	; 0xff
 80003ac:	d00b      	beq.n	80003c6 <__lesf2+0x32>
 80003ae:	2cff      	cmp	r4, #255	; 0xff
 80003b0:	d00d      	beq.n	80003ce <__lesf2+0x3a>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	d11f      	bne.n	80003f6 <__lesf2+0x62>
 80003b6:	2c00      	cmp	r4, #0
 80003b8:	d116      	bne.n	80003e8 <__lesf2+0x54>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d114      	bne.n	80003e8 <__lesf2+0x54>
 80003be:	2000      	movs	r0, #0
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	d010      	beq.n	80003e6 <__lesf2+0x52>
 80003c4:	e009      	b.n	80003da <__lesf2+0x46>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	d10c      	bne.n	80003e4 <__lesf2+0x50>
 80003ca:	2cff      	cmp	r4, #255	; 0xff
 80003cc:	d113      	bne.n	80003f6 <__lesf2+0x62>
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d108      	bne.n	80003e4 <__lesf2+0x50>
 80003d2:	2a00      	cmp	r2, #0
 80003d4:	d008      	beq.n	80003e8 <__lesf2+0x54>
 80003d6:	4283      	cmp	r3, r0
 80003d8:	d012      	beq.n	8000400 <__lesf2+0x6c>
 80003da:	2102      	movs	r1, #2
 80003dc:	1e58      	subs	r0, r3, #1
 80003de:	4008      	ands	r0, r1
 80003e0:	3801      	subs	r0, #1
 80003e2:	e000      	b.n	80003e6 <__lesf2+0x52>
 80003e4:	2002      	movs	r0, #2
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	2d00      	cmp	r5, #0
 80003ea:	d1f4      	bne.n	80003d6 <__lesf2+0x42>
 80003ec:	2800      	cmp	r0, #0
 80003ee:	d1fa      	bne.n	80003e6 <__lesf2+0x52>
 80003f0:	2001      	movs	r0, #1
 80003f2:	4240      	negs	r0, r0
 80003f4:	e7f7      	b.n	80003e6 <__lesf2+0x52>
 80003f6:	2c00      	cmp	r4, #0
 80003f8:	d1ed      	bne.n	80003d6 <__lesf2+0x42>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d1eb      	bne.n	80003d6 <__lesf2+0x42>
 80003fe:	e7ec      	b.n	80003da <__lesf2+0x46>
 8000400:	42a2      	cmp	r2, r4
 8000402:	dc05      	bgt.n	8000410 <__lesf2+0x7c>
 8000404:	dbf2      	blt.n	80003ec <__lesf2+0x58>
 8000406:	42b5      	cmp	r5, r6
 8000408:	d802      	bhi.n	8000410 <__lesf2+0x7c>
 800040a:	d3ef      	bcc.n	80003ec <__lesf2+0x58>
 800040c:	2000      	movs	r0, #0
 800040e:	e7ea      	b.n	80003e6 <__lesf2+0x52>
 8000410:	4243      	negs	r3, r0
 8000412:	4158      	adcs	r0, r3
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	3801      	subs	r0, #1
 8000418:	e7e5      	b.n	80003e6 <__lesf2+0x52>
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_fmul>:
 800041c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041e:	464f      	mov	r7, r9
 8000420:	4646      	mov	r6, r8
 8000422:	46d6      	mov	lr, sl
 8000424:	0244      	lsls	r4, r0, #9
 8000426:	0045      	lsls	r5, r0, #1
 8000428:	b5c0      	push	{r6, r7, lr}
 800042a:	0a64      	lsrs	r4, r4, #9
 800042c:	1c0f      	adds	r7, r1, #0
 800042e:	0e2d      	lsrs	r5, r5, #24
 8000430:	0fc6      	lsrs	r6, r0, #31
 8000432:	2d00      	cmp	r5, #0
 8000434:	d100      	bne.n	8000438 <__aeabi_fmul+0x1c>
 8000436:	e08d      	b.n	8000554 <__aeabi_fmul+0x138>
 8000438:	2dff      	cmp	r5, #255	; 0xff
 800043a:	d100      	bne.n	800043e <__aeabi_fmul+0x22>
 800043c:	e092      	b.n	8000564 <__aeabi_fmul+0x148>
 800043e:	2300      	movs	r3, #0
 8000440:	2080      	movs	r0, #128	; 0x80
 8000442:	4699      	mov	r9, r3
 8000444:	469a      	mov	sl, r3
 8000446:	00e4      	lsls	r4, r4, #3
 8000448:	04c0      	lsls	r0, r0, #19
 800044a:	4304      	orrs	r4, r0
 800044c:	3d7f      	subs	r5, #127	; 0x7f
 800044e:	0278      	lsls	r0, r7, #9
 8000450:	0a43      	lsrs	r3, r0, #9
 8000452:	4698      	mov	r8, r3
 8000454:	007b      	lsls	r3, r7, #1
 8000456:	0e1b      	lsrs	r3, r3, #24
 8000458:	0fff      	lsrs	r7, r7, #31
 800045a:	2b00      	cmp	r3, #0
 800045c:	d100      	bne.n	8000460 <__aeabi_fmul+0x44>
 800045e:	e070      	b.n	8000542 <__aeabi_fmul+0x126>
 8000460:	2bff      	cmp	r3, #255	; 0xff
 8000462:	d100      	bne.n	8000466 <__aeabi_fmul+0x4a>
 8000464:	e086      	b.n	8000574 <__aeabi_fmul+0x158>
 8000466:	4642      	mov	r2, r8
 8000468:	00d0      	lsls	r0, r2, #3
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	3b7f      	subs	r3, #127	; 0x7f
 800046e:	18ed      	adds	r5, r5, r3
 8000470:	2300      	movs	r3, #0
 8000472:	04d2      	lsls	r2, r2, #19
 8000474:	4302      	orrs	r2, r0
 8000476:	4690      	mov	r8, r2
 8000478:	469c      	mov	ip, r3
 800047a:	0031      	movs	r1, r6
 800047c:	464b      	mov	r3, r9
 800047e:	4079      	eors	r1, r7
 8000480:	1c68      	adds	r0, r5, #1
 8000482:	2b0f      	cmp	r3, #15
 8000484:	d81c      	bhi.n	80004c0 <__aeabi_fmul+0xa4>
 8000486:	4a76      	ldr	r2, [pc, #472]	; (8000660 <__aeabi_fmul+0x244>)
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	58d3      	ldr	r3, [r2, r3]
 800048c:	469f      	mov	pc, r3
 800048e:	0039      	movs	r1, r7
 8000490:	4644      	mov	r4, r8
 8000492:	46e2      	mov	sl, ip
 8000494:	4653      	mov	r3, sl
 8000496:	2b02      	cmp	r3, #2
 8000498:	d00f      	beq.n	80004ba <__aeabi_fmul+0x9e>
 800049a:	2b03      	cmp	r3, #3
 800049c:	d100      	bne.n	80004a0 <__aeabi_fmul+0x84>
 800049e:	e0d7      	b.n	8000650 <__aeabi_fmul+0x234>
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d137      	bne.n	8000514 <__aeabi_fmul+0xf8>
 80004a4:	2000      	movs	r0, #0
 80004a6:	2400      	movs	r4, #0
 80004a8:	05c0      	lsls	r0, r0, #23
 80004aa:	4320      	orrs	r0, r4
 80004ac:	07c9      	lsls	r1, r1, #31
 80004ae:	4308      	orrs	r0, r1
 80004b0:	bce0      	pop	{r5, r6, r7}
 80004b2:	46ba      	mov	sl, r7
 80004b4:	46b1      	mov	r9, r6
 80004b6:	46a8      	mov	r8, r5
 80004b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ba:	20ff      	movs	r0, #255	; 0xff
 80004bc:	2400      	movs	r4, #0
 80004be:	e7f3      	b.n	80004a8 <__aeabi_fmul+0x8c>
 80004c0:	0c26      	lsrs	r6, r4, #16
 80004c2:	0424      	lsls	r4, r4, #16
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	4644      	mov	r4, r8
 80004c8:	0424      	lsls	r4, r4, #16
 80004ca:	0c24      	lsrs	r4, r4, #16
 80004cc:	4643      	mov	r3, r8
 80004ce:	0027      	movs	r7, r4
 80004d0:	0c1b      	lsrs	r3, r3, #16
 80004d2:	4357      	muls	r7, r2
 80004d4:	4374      	muls	r4, r6
 80004d6:	435a      	muls	r2, r3
 80004d8:	435e      	muls	r6, r3
 80004da:	1912      	adds	r2, r2, r4
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	189b      	adds	r3, r3, r2
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d903      	bls.n	80004ec <__aeabi_fmul+0xd0>
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	0252      	lsls	r2, r2, #9
 80004e8:	4694      	mov	ip, r2
 80004ea:	4466      	add	r6, ip
 80004ec:	043f      	lsls	r7, r7, #16
 80004ee:	041a      	lsls	r2, r3, #16
 80004f0:	0c3f      	lsrs	r7, r7, #16
 80004f2:	19d2      	adds	r2, r2, r7
 80004f4:	0194      	lsls	r4, r2, #6
 80004f6:	1e67      	subs	r7, r4, #1
 80004f8:	41bc      	sbcs	r4, r7
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	0e92      	lsrs	r2, r2, #26
 80004fe:	199b      	adds	r3, r3, r6
 8000500:	4314      	orrs	r4, r2
 8000502:	019b      	lsls	r3, r3, #6
 8000504:	431c      	orrs	r4, r3
 8000506:	011b      	lsls	r3, r3, #4
 8000508:	d400      	bmi.n	800050c <__aeabi_fmul+0xf0>
 800050a:	e09b      	b.n	8000644 <__aeabi_fmul+0x228>
 800050c:	2301      	movs	r3, #1
 800050e:	0862      	lsrs	r2, r4, #1
 8000510:	401c      	ands	r4, r3
 8000512:	4314      	orrs	r4, r2
 8000514:	0002      	movs	r2, r0
 8000516:	327f      	adds	r2, #127	; 0x7f
 8000518:	2a00      	cmp	r2, #0
 800051a:	dd64      	ble.n	80005e6 <__aeabi_fmul+0x1ca>
 800051c:	0763      	lsls	r3, r4, #29
 800051e:	d004      	beq.n	800052a <__aeabi_fmul+0x10e>
 8000520:	230f      	movs	r3, #15
 8000522:	4023      	ands	r3, r4
 8000524:	2b04      	cmp	r3, #4
 8000526:	d000      	beq.n	800052a <__aeabi_fmul+0x10e>
 8000528:	3404      	adds	r4, #4
 800052a:	0123      	lsls	r3, r4, #4
 800052c:	d503      	bpl.n	8000536 <__aeabi_fmul+0x11a>
 800052e:	0002      	movs	r2, r0
 8000530:	4b4c      	ldr	r3, [pc, #304]	; (8000664 <__aeabi_fmul+0x248>)
 8000532:	3280      	adds	r2, #128	; 0x80
 8000534:	401c      	ands	r4, r3
 8000536:	2afe      	cmp	r2, #254	; 0xfe
 8000538:	dcbf      	bgt.n	80004ba <__aeabi_fmul+0x9e>
 800053a:	01a4      	lsls	r4, r4, #6
 800053c:	0a64      	lsrs	r4, r4, #9
 800053e:	b2d0      	uxtb	r0, r2
 8000540:	e7b2      	b.n	80004a8 <__aeabi_fmul+0x8c>
 8000542:	4643      	mov	r3, r8
 8000544:	2b00      	cmp	r3, #0
 8000546:	d13d      	bne.n	80005c4 <__aeabi_fmul+0x1a8>
 8000548:	464a      	mov	r2, r9
 800054a:	3301      	adds	r3, #1
 800054c:	431a      	orrs	r2, r3
 800054e:	4691      	mov	r9, r2
 8000550:	469c      	mov	ip, r3
 8000552:	e792      	b.n	800047a <__aeabi_fmul+0x5e>
 8000554:	2c00      	cmp	r4, #0
 8000556:	d129      	bne.n	80005ac <__aeabi_fmul+0x190>
 8000558:	2304      	movs	r3, #4
 800055a:	4699      	mov	r9, r3
 800055c:	3b03      	subs	r3, #3
 800055e:	2500      	movs	r5, #0
 8000560:	469a      	mov	sl, r3
 8000562:	e774      	b.n	800044e <__aeabi_fmul+0x32>
 8000564:	2c00      	cmp	r4, #0
 8000566:	d11b      	bne.n	80005a0 <__aeabi_fmul+0x184>
 8000568:	2308      	movs	r3, #8
 800056a:	4699      	mov	r9, r3
 800056c:	3b06      	subs	r3, #6
 800056e:	25ff      	movs	r5, #255	; 0xff
 8000570:	469a      	mov	sl, r3
 8000572:	e76c      	b.n	800044e <__aeabi_fmul+0x32>
 8000574:	4643      	mov	r3, r8
 8000576:	35ff      	adds	r5, #255	; 0xff
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10b      	bne.n	8000594 <__aeabi_fmul+0x178>
 800057c:	2302      	movs	r3, #2
 800057e:	464a      	mov	r2, r9
 8000580:	431a      	orrs	r2, r3
 8000582:	4691      	mov	r9, r2
 8000584:	469c      	mov	ip, r3
 8000586:	e778      	b.n	800047a <__aeabi_fmul+0x5e>
 8000588:	4653      	mov	r3, sl
 800058a:	0031      	movs	r1, r6
 800058c:	2b02      	cmp	r3, #2
 800058e:	d000      	beq.n	8000592 <__aeabi_fmul+0x176>
 8000590:	e783      	b.n	800049a <__aeabi_fmul+0x7e>
 8000592:	e792      	b.n	80004ba <__aeabi_fmul+0x9e>
 8000594:	2303      	movs	r3, #3
 8000596:	464a      	mov	r2, r9
 8000598:	431a      	orrs	r2, r3
 800059a:	4691      	mov	r9, r2
 800059c:	469c      	mov	ip, r3
 800059e:	e76c      	b.n	800047a <__aeabi_fmul+0x5e>
 80005a0:	230c      	movs	r3, #12
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b09      	subs	r3, #9
 80005a6:	25ff      	movs	r5, #255	; 0xff
 80005a8:	469a      	mov	sl, r3
 80005aa:	e750      	b.n	800044e <__aeabi_fmul+0x32>
 80005ac:	0020      	movs	r0, r4
 80005ae:	f000 fab9 	bl	8000b24 <__clzsi2>
 80005b2:	2576      	movs	r5, #118	; 0x76
 80005b4:	1f43      	subs	r3, r0, #5
 80005b6:	409c      	lsls	r4, r3
 80005b8:	2300      	movs	r3, #0
 80005ba:	426d      	negs	r5, r5
 80005bc:	4699      	mov	r9, r3
 80005be:	469a      	mov	sl, r3
 80005c0:	1a2d      	subs	r5, r5, r0
 80005c2:	e744      	b.n	800044e <__aeabi_fmul+0x32>
 80005c4:	4640      	mov	r0, r8
 80005c6:	f000 faad 	bl	8000b24 <__clzsi2>
 80005ca:	4642      	mov	r2, r8
 80005cc:	1f43      	subs	r3, r0, #5
 80005ce:	409a      	lsls	r2, r3
 80005d0:	2300      	movs	r3, #0
 80005d2:	1a2d      	subs	r5, r5, r0
 80005d4:	4690      	mov	r8, r2
 80005d6:	469c      	mov	ip, r3
 80005d8:	3d76      	subs	r5, #118	; 0x76
 80005da:	e74e      	b.n	800047a <__aeabi_fmul+0x5e>
 80005dc:	2480      	movs	r4, #128	; 0x80
 80005de:	2100      	movs	r1, #0
 80005e0:	20ff      	movs	r0, #255	; 0xff
 80005e2:	03e4      	lsls	r4, r4, #15
 80005e4:	e760      	b.n	80004a8 <__aeabi_fmul+0x8c>
 80005e6:	2301      	movs	r3, #1
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2b1b      	cmp	r3, #27
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_fmul+0x1d4>
 80005ee:	e759      	b.n	80004a4 <__aeabi_fmul+0x88>
 80005f0:	0022      	movs	r2, r4
 80005f2:	309e      	adds	r0, #158	; 0x9e
 80005f4:	40da      	lsrs	r2, r3
 80005f6:	4084      	lsls	r4, r0
 80005f8:	0013      	movs	r3, r2
 80005fa:	1e62      	subs	r2, r4, #1
 80005fc:	4194      	sbcs	r4, r2
 80005fe:	431c      	orrs	r4, r3
 8000600:	0763      	lsls	r3, r4, #29
 8000602:	d004      	beq.n	800060e <__aeabi_fmul+0x1f2>
 8000604:	230f      	movs	r3, #15
 8000606:	4023      	ands	r3, r4
 8000608:	2b04      	cmp	r3, #4
 800060a:	d000      	beq.n	800060e <__aeabi_fmul+0x1f2>
 800060c:	3404      	adds	r4, #4
 800060e:	0163      	lsls	r3, r4, #5
 8000610:	d51a      	bpl.n	8000648 <__aeabi_fmul+0x22c>
 8000612:	2001      	movs	r0, #1
 8000614:	2400      	movs	r4, #0
 8000616:	e747      	b.n	80004a8 <__aeabi_fmul+0x8c>
 8000618:	2080      	movs	r0, #128	; 0x80
 800061a:	03c0      	lsls	r0, r0, #15
 800061c:	4204      	tst	r4, r0
 800061e:	d009      	beq.n	8000634 <__aeabi_fmul+0x218>
 8000620:	4643      	mov	r3, r8
 8000622:	4203      	tst	r3, r0
 8000624:	d106      	bne.n	8000634 <__aeabi_fmul+0x218>
 8000626:	4644      	mov	r4, r8
 8000628:	4304      	orrs	r4, r0
 800062a:	0264      	lsls	r4, r4, #9
 800062c:	0039      	movs	r1, r7
 800062e:	20ff      	movs	r0, #255	; 0xff
 8000630:	0a64      	lsrs	r4, r4, #9
 8000632:	e739      	b.n	80004a8 <__aeabi_fmul+0x8c>
 8000634:	2080      	movs	r0, #128	; 0x80
 8000636:	03c0      	lsls	r0, r0, #15
 8000638:	4304      	orrs	r4, r0
 800063a:	0264      	lsls	r4, r4, #9
 800063c:	0031      	movs	r1, r6
 800063e:	20ff      	movs	r0, #255	; 0xff
 8000640:	0a64      	lsrs	r4, r4, #9
 8000642:	e731      	b.n	80004a8 <__aeabi_fmul+0x8c>
 8000644:	0028      	movs	r0, r5
 8000646:	e765      	b.n	8000514 <__aeabi_fmul+0xf8>
 8000648:	01a4      	lsls	r4, r4, #6
 800064a:	2000      	movs	r0, #0
 800064c:	0a64      	lsrs	r4, r4, #9
 800064e:	e72b      	b.n	80004a8 <__aeabi_fmul+0x8c>
 8000650:	2080      	movs	r0, #128	; 0x80
 8000652:	03c0      	lsls	r0, r0, #15
 8000654:	4304      	orrs	r4, r0
 8000656:	0264      	lsls	r4, r4, #9
 8000658:	20ff      	movs	r0, #255	; 0xff
 800065a:	0a64      	lsrs	r4, r4, #9
 800065c:	e724      	b.n	80004a8 <__aeabi_fmul+0x8c>
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	0800690c 	.word	0x0800690c
 8000664:	f7ffffff 	.word	0xf7ffffff

08000668 <__aeabi_fsub>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	46ce      	mov	lr, r9
 800066c:	4647      	mov	r7, r8
 800066e:	0243      	lsls	r3, r0, #9
 8000670:	0a5b      	lsrs	r3, r3, #9
 8000672:	024e      	lsls	r6, r1, #9
 8000674:	00da      	lsls	r2, r3, #3
 8000676:	4694      	mov	ip, r2
 8000678:	0a72      	lsrs	r2, r6, #9
 800067a:	4691      	mov	r9, r2
 800067c:	0045      	lsls	r5, r0, #1
 800067e:	004a      	lsls	r2, r1, #1
 8000680:	b580      	push	{r7, lr}
 8000682:	0e2d      	lsrs	r5, r5, #24
 8000684:	001f      	movs	r7, r3
 8000686:	0fc4      	lsrs	r4, r0, #31
 8000688:	0e12      	lsrs	r2, r2, #24
 800068a:	0fc9      	lsrs	r1, r1, #31
 800068c:	09b6      	lsrs	r6, r6, #6
 800068e:	2aff      	cmp	r2, #255	; 0xff
 8000690:	d05b      	beq.n	800074a <__aeabi_fsub+0xe2>
 8000692:	2001      	movs	r0, #1
 8000694:	4041      	eors	r1, r0
 8000696:	428c      	cmp	r4, r1
 8000698:	d039      	beq.n	800070e <__aeabi_fsub+0xa6>
 800069a:	1aa8      	subs	r0, r5, r2
 800069c:	2800      	cmp	r0, #0
 800069e:	dd5a      	ble.n	8000756 <__aeabi_fsub+0xee>
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d06a      	beq.n	800077a <__aeabi_fsub+0x112>
 80006a4:	2dff      	cmp	r5, #255	; 0xff
 80006a6:	d100      	bne.n	80006aa <__aeabi_fsub+0x42>
 80006a8:	e0d9      	b.n	800085e <__aeabi_fsub+0x1f6>
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	04d2      	lsls	r2, r2, #19
 80006ae:	4316      	orrs	r6, r2
 80006b0:	281b      	cmp	r0, #27
 80006b2:	dc00      	bgt.n	80006b6 <__aeabi_fsub+0x4e>
 80006b4:	e0e9      	b.n	800088a <__aeabi_fsub+0x222>
 80006b6:	2001      	movs	r0, #1
 80006b8:	4663      	mov	r3, ip
 80006ba:	1a18      	subs	r0, r3, r0
 80006bc:	0143      	lsls	r3, r0, #5
 80006be:	d400      	bmi.n	80006c2 <__aeabi_fsub+0x5a>
 80006c0:	e0b4      	b.n	800082c <__aeabi_fsub+0x1c4>
 80006c2:	0180      	lsls	r0, r0, #6
 80006c4:	0987      	lsrs	r7, r0, #6
 80006c6:	0038      	movs	r0, r7
 80006c8:	f000 fa2c 	bl	8000b24 <__clzsi2>
 80006cc:	3805      	subs	r0, #5
 80006ce:	4087      	lsls	r7, r0
 80006d0:	4285      	cmp	r5, r0
 80006d2:	dc00      	bgt.n	80006d6 <__aeabi_fsub+0x6e>
 80006d4:	e0cc      	b.n	8000870 <__aeabi_fsub+0x208>
 80006d6:	1a2d      	subs	r5, r5, r0
 80006d8:	48b5      	ldr	r0, [pc, #724]	; (80009b0 <__aeabi_fsub+0x348>)
 80006da:	4038      	ands	r0, r7
 80006dc:	0743      	lsls	r3, r0, #29
 80006de:	d004      	beq.n	80006ea <__aeabi_fsub+0x82>
 80006e0:	230f      	movs	r3, #15
 80006e2:	4003      	ands	r3, r0
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	d000      	beq.n	80006ea <__aeabi_fsub+0x82>
 80006e8:	3004      	adds	r0, #4
 80006ea:	0143      	lsls	r3, r0, #5
 80006ec:	d400      	bmi.n	80006f0 <__aeabi_fsub+0x88>
 80006ee:	e0a0      	b.n	8000832 <__aeabi_fsub+0x1ca>
 80006f0:	1c6a      	adds	r2, r5, #1
 80006f2:	2dfe      	cmp	r5, #254	; 0xfe
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fsub+0x90>
 80006f6:	e08d      	b.n	8000814 <__aeabi_fsub+0x1ac>
 80006f8:	0180      	lsls	r0, r0, #6
 80006fa:	0a47      	lsrs	r7, r0, #9
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	05d0      	lsls	r0, r2, #23
 8000700:	4338      	orrs	r0, r7
 8000702:	07e4      	lsls	r4, r4, #31
 8000704:	4320      	orrs	r0, r4
 8000706:	bcc0      	pop	{r6, r7}
 8000708:	46b9      	mov	r9, r7
 800070a:	46b0      	mov	r8, r6
 800070c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800070e:	1aa8      	subs	r0, r5, r2
 8000710:	4680      	mov	r8, r0
 8000712:	2800      	cmp	r0, #0
 8000714:	dd45      	ble.n	80007a2 <__aeabi_fsub+0x13a>
 8000716:	2a00      	cmp	r2, #0
 8000718:	d070      	beq.n	80007fc <__aeabi_fsub+0x194>
 800071a:	2dff      	cmp	r5, #255	; 0xff
 800071c:	d100      	bne.n	8000720 <__aeabi_fsub+0xb8>
 800071e:	e09e      	b.n	800085e <__aeabi_fsub+0x1f6>
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	431e      	orrs	r6, r3
 8000726:	4643      	mov	r3, r8
 8000728:	2b1b      	cmp	r3, #27
 800072a:	dc00      	bgt.n	800072e <__aeabi_fsub+0xc6>
 800072c:	e0d2      	b.n	80008d4 <__aeabi_fsub+0x26c>
 800072e:	2001      	movs	r0, #1
 8000730:	4460      	add	r0, ip
 8000732:	0143      	lsls	r3, r0, #5
 8000734:	d57a      	bpl.n	800082c <__aeabi_fsub+0x1c4>
 8000736:	3501      	adds	r5, #1
 8000738:	2dff      	cmp	r5, #255	; 0xff
 800073a:	d06b      	beq.n	8000814 <__aeabi_fsub+0x1ac>
 800073c:	2301      	movs	r3, #1
 800073e:	4a9d      	ldr	r2, [pc, #628]	; (80009b4 <__aeabi_fsub+0x34c>)
 8000740:	4003      	ands	r3, r0
 8000742:	0840      	lsrs	r0, r0, #1
 8000744:	4010      	ands	r0, r2
 8000746:	4318      	orrs	r0, r3
 8000748:	e7c8      	b.n	80006dc <__aeabi_fsub+0x74>
 800074a:	2e00      	cmp	r6, #0
 800074c:	d020      	beq.n	8000790 <__aeabi_fsub+0x128>
 800074e:	428c      	cmp	r4, r1
 8000750:	d023      	beq.n	800079a <__aeabi_fsub+0x132>
 8000752:	0028      	movs	r0, r5
 8000754:	38ff      	subs	r0, #255	; 0xff
 8000756:	2800      	cmp	r0, #0
 8000758:	d039      	beq.n	80007ce <__aeabi_fsub+0x166>
 800075a:	1b57      	subs	r7, r2, r5
 800075c:	2d00      	cmp	r5, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fsub+0xfa>
 8000760:	e09d      	b.n	800089e <__aeabi_fsub+0x236>
 8000762:	4663      	mov	r3, ip
 8000764:	2b00      	cmp	r3, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fsub+0x102>
 8000768:	e0db      	b.n	8000922 <__aeabi_fsub+0x2ba>
 800076a:	1e7b      	subs	r3, r7, #1
 800076c:	2f01      	cmp	r7, #1
 800076e:	d100      	bne.n	8000772 <__aeabi_fsub+0x10a>
 8000770:	e10d      	b.n	800098e <__aeabi_fsub+0x326>
 8000772:	2fff      	cmp	r7, #255	; 0xff
 8000774:	d071      	beq.n	800085a <__aeabi_fsub+0x1f2>
 8000776:	001f      	movs	r7, r3
 8000778:	e098      	b.n	80008ac <__aeabi_fsub+0x244>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_fsub+0x118>
 800077e:	e0a7      	b.n	80008d0 <__aeabi_fsub+0x268>
 8000780:	1e42      	subs	r2, r0, #1
 8000782:	2801      	cmp	r0, #1
 8000784:	d100      	bne.n	8000788 <__aeabi_fsub+0x120>
 8000786:	e0e6      	b.n	8000956 <__aeabi_fsub+0x2ee>
 8000788:	28ff      	cmp	r0, #255	; 0xff
 800078a:	d068      	beq.n	800085e <__aeabi_fsub+0x1f6>
 800078c:	0010      	movs	r0, r2
 800078e:	e78f      	b.n	80006b0 <__aeabi_fsub+0x48>
 8000790:	2001      	movs	r0, #1
 8000792:	4041      	eors	r1, r0
 8000794:	42a1      	cmp	r1, r4
 8000796:	d000      	beq.n	800079a <__aeabi_fsub+0x132>
 8000798:	e77f      	b.n	800069a <__aeabi_fsub+0x32>
 800079a:	20ff      	movs	r0, #255	; 0xff
 800079c:	4240      	negs	r0, r0
 800079e:	4680      	mov	r8, r0
 80007a0:	44a8      	add	r8, r5
 80007a2:	4640      	mov	r0, r8
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d038      	beq.n	800081a <__aeabi_fsub+0x1b2>
 80007a8:	1b51      	subs	r1, r2, r5
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fsub+0x148>
 80007ae:	e0ae      	b.n	800090e <__aeabi_fsub+0x2a6>
 80007b0:	2aff      	cmp	r2, #255	; 0xff
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fsub+0x14e>
 80007b4:	e0df      	b.n	8000976 <__aeabi_fsub+0x30e>
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	4660      	mov	r0, ip
 80007ba:	04db      	lsls	r3, r3, #19
 80007bc:	4318      	orrs	r0, r3
 80007be:	4684      	mov	ip, r0
 80007c0:	291b      	cmp	r1, #27
 80007c2:	dc00      	bgt.n	80007c6 <__aeabi_fsub+0x15e>
 80007c4:	e0d9      	b.n	800097a <__aeabi_fsub+0x312>
 80007c6:	2001      	movs	r0, #1
 80007c8:	0015      	movs	r5, r2
 80007ca:	1980      	adds	r0, r0, r6
 80007cc:	e7b1      	b.n	8000732 <__aeabi_fsub+0xca>
 80007ce:	20fe      	movs	r0, #254	; 0xfe
 80007d0:	1c6a      	adds	r2, r5, #1
 80007d2:	4210      	tst	r0, r2
 80007d4:	d171      	bne.n	80008ba <__aeabi_fsub+0x252>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d000      	beq.n	80007dc <__aeabi_fsub+0x174>
 80007da:	e0a6      	b.n	800092a <__aeabi_fsub+0x2c2>
 80007dc:	4663      	mov	r3, ip
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fsub+0x17c>
 80007e2:	e0d9      	b.n	8000998 <__aeabi_fsub+0x330>
 80007e4:	2200      	movs	r2, #0
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fsub+0x184>
 80007ea:	e788      	b.n	80006fe <__aeabi_fsub+0x96>
 80007ec:	1b98      	subs	r0, r3, r6
 80007ee:	0143      	lsls	r3, r0, #5
 80007f0:	d400      	bmi.n	80007f4 <__aeabi_fsub+0x18c>
 80007f2:	e0e1      	b.n	80009b8 <__aeabi_fsub+0x350>
 80007f4:	4663      	mov	r3, ip
 80007f6:	000c      	movs	r4, r1
 80007f8:	1af0      	subs	r0, r6, r3
 80007fa:	e76f      	b.n	80006dc <__aeabi_fsub+0x74>
 80007fc:	2e00      	cmp	r6, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fsub+0x19a>
 8000800:	e0b7      	b.n	8000972 <__aeabi_fsub+0x30a>
 8000802:	0002      	movs	r2, r0
 8000804:	3a01      	subs	r2, #1
 8000806:	2801      	cmp	r0, #1
 8000808:	d100      	bne.n	800080c <__aeabi_fsub+0x1a4>
 800080a:	e09c      	b.n	8000946 <__aeabi_fsub+0x2de>
 800080c:	28ff      	cmp	r0, #255	; 0xff
 800080e:	d026      	beq.n	800085e <__aeabi_fsub+0x1f6>
 8000810:	4690      	mov	r8, r2
 8000812:	e788      	b.n	8000726 <__aeabi_fsub+0xbe>
 8000814:	22ff      	movs	r2, #255	; 0xff
 8000816:	2700      	movs	r7, #0
 8000818:	e771      	b.n	80006fe <__aeabi_fsub+0x96>
 800081a:	20fe      	movs	r0, #254	; 0xfe
 800081c:	1c6a      	adds	r2, r5, #1
 800081e:	4210      	tst	r0, r2
 8000820:	d064      	beq.n	80008ec <__aeabi_fsub+0x284>
 8000822:	2aff      	cmp	r2, #255	; 0xff
 8000824:	d0f6      	beq.n	8000814 <__aeabi_fsub+0x1ac>
 8000826:	0015      	movs	r5, r2
 8000828:	4466      	add	r6, ip
 800082a:	0870      	lsrs	r0, r6, #1
 800082c:	0743      	lsls	r3, r0, #29
 800082e:	d000      	beq.n	8000832 <__aeabi_fsub+0x1ca>
 8000830:	e756      	b.n	80006e0 <__aeabi_fsub+0x78>
 8000832:	08c3      	lsrs	r3, r0, #3
 8000834:	2dff      	cmp	r5, #255	; 0xff
 8000836:	d012      	beq.n	800085e <__aeabi_fsub+0x1f6>
 8000838:	025b      	lsls	r3, r3, #9
 800083a:	0a5f      	lsrs	r7, r3, #9
 800083c:	b2ea      	uxtb	r2, r5
 800083e:	e75e      	b.n	80006fe <__aeabi_fsub+0x96>
 8000840:	4662      	mov	r2, ip
 8000842:	2a00      	cmp	r2, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fsub+0x1e0>
 8000846:	e096      	b.n	8000976 <__aeabi_fsub+0x30e>
 8000848:	2e00      	cmp	r6, #0
 800084a:	d008      	beq.n	800085e <__aeabi_fsub+0x1f6>
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	03d2      	lsls	r2, r2, #15
 8000850:	4213      	tst	r3, r2
 8000852:	d004      	beq.n	800085e <__aeabi_fsub+0x1f6>
 8000854:	4648      	mov	r0, r9
 8000856:	4210      	tst	r0, r2
 8000858:	d101      	bne.n	800085e <__aeabi_fsub+0x1f6>
 800085a:	000c      	movs	r4, r1
 800085c:	464b      	mov	r3, r9
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0d8      	beq.n	8000814 <__aeabi_fsub+0x1ac>
 8000862:	2780      	movs	r7, #128	; 0x80
 8000864:	03ff      	lsls	r7, r7, #15
 8000866:	431f      	orrs	r7, r3
 8000868:	027f      	lsls	r7, r7, #9
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	0a7f      	lsrs	r7, r7, #9
 800086e:	e746      	b.n	80006fe <__aeabi_fsub+0x96>
 8000870:	2320      	movs	r3, #32
 8000872:	003a      	movs	r2, r7
 8000874:	1b45      	subs	r5, r0, r5
 8000876:	0038      	movs	r0, r7
 8000878:	3501      	adds	r5, #1
 800087a:	40ea      	lsrs	r2, r5
 800087c:	1b5d      	subs	r5, r3, r5
 800087e:	40a8      	lsls	r0, r5
 8000880:	1e43      	subs	r3, r0, #1
 8000882:	4198      	sbcs	r0, r3
 8000884:	2500      	movs	r5, #0
 8000886:	4310      	orrs	r0, r2
 8000888:	e728      	b.n	80006dc <__aeabi_fsub+0x74>
 800088a:	2320      	movs	r3, #32
 800088c:	1a1b      	subs	r3, r3, r0
 800088e:	0032      	movs	r2, r6
 8000890:	409e      	lsls	r6, r3
 8000892:	40c2      	lsrs	r2, r0
 8000894:	0030      	movs	r0, r6
 8000896:	1e43      	subs	r3, r0, #1
 8000898:	4198      	sbcs	r0, r3
 800089a:	4310      	orrs	r0, r2
 800089c:	e70c      	b.n	80006b8 <__aeabi_fsub+0x50>
 800089e:	2aff      	cmp	r2, #255	; 0xff
 80008a0:	d0db      	beq.n	800085a <__aeabi_fsub+0x1f2>
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	4660      	mov	r0, ip
 80008a6:	04db      	lsls	r3, r3, #19
 80008a8:	4318      	orrs	r0, r3
 80008aa:	4684      	mov	ip, r0
 80008ac:	2f1b      	cmp	r7, #27
 80008ae:	dd56      	ble.n	800095e <__aeabi_fsub+0x2f6>
 80008b0:	2001      	movs	r0, #1
 80008b2:	000c      	movs	r4, r1
 80008b4:	0015      	movs	r5, r2
 80008b6:	1a30      	subs	r0, r6, r0
 80008b8:	e700      	b.n	80006bc <__aeabi_fsub+0x54>
 80008ba:	4663      	mov	r3, ip
 80008bc:	1b9f      	subs	r7, r3, r6
 80008be:	017b      	lsls	r3, r7, #5
 80008c0:	d43d      	bmi.n	800093e <__aeabi_fsub+0x2d6>
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fsub+0x260>
 80008c6:	e6fe      	b.n	80006c6 <__aeabi_fsub+0x5e>
 80008c8:	2400      	movs	r4, #0
 80008ca:	2200      	movs	r2, #0
 80008cc:	2700      	movs	r7, #0
 80008ce:	e716      	b.n	80006fe <__aeabi_fsub+0x96>
 80008d0:	0005      	movs	r5, r0
 80008d2:	e7af      	b.n	8000834 <__aeabi_fsub+0x1cc>
 80008d4:	0032      	movs	r2, r6
 80008d6:	4643      	mov	r3, r8
 80008d8:	4641      	mov	r1, r8
 80008da:	40da      	lsrs	r2, r3
 80008dc:	2320      	movs	r3, #32
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	409e      	lsls	r6, r3
 80008e2:	0030      	movs	r0, r6
 80008e4:	1e43      	subs	r3, r0, #1
 80008e6:	4198      	sbcs	r0, r3
 80008e8:	4310      	orrs	r0, r2
 80008ea:	e721      	b.n	8000730 <__aeabi_fsub+0xc8>
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d1a7      	bne.n	8000840 <__aeabi_fsub+0x1d8>
 80008f0:	4663      	mov	r3, ip
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d059      	beq.n	80009aa <__aeabi_fsub+0x342>
 80008f6:	2200      	movs	r2, #0
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fsub+0x296>
 80008fc:	e6ff      	b.n	80006fe <__aeabi_fsub+0x96>
 80008fe:	0030      	movs	r0, r6
 8000900:	4460      	add	r0, ip
 8000902:	0143      	lsls	r3, r0, #5
 8000904:	d592      	bpl.n	800082c <__aeabi_fsub+0x1c4>
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <__aeabi_fsub+0x348>)
 8000908:	3501      	adds	r5, #1
 800090a:	4018      	ands	r0, r3
 800090c:	e78e      	b.n	800082c <__aeabi_fsub+0x1c4>
 800090e:	4663      	mov	r3, ip
 8000910:	2b00      	cmp	r3, #0
 8000912:	d047      	beq.n	80009a4 <__aeabi_fsub+0x33c>
 8000914:	1e4b      	subs	r3, r1, #1
 8000916:	2901      	cmp	r1, #1
 8000918:	d015      	beq.n	8000946 <__aeabi_fsub+0x2de>
 800091a:	29ff      	cmp	r1, #255	; 0xff
 800091c:	d02b      	beq.n	8000976 <__aeabi_fsub+0x30e>
 800091e:	0019      	movs	r1, r3
 8000920:	e74e      	b.n	80007c0 <__aeabi_fsub+0x158>
 8000922:	000c      	movs	r4, r1
 8000924:	464b      	mov	r3, r9
 8000926:	003d      	movs	r5, r7
 8000928:	e784      	b.n	8000834 <__aeabi_fsub+0x1cc>
 800092a:	4662      	mov	r2, ip
 800092c:	2a00      	cmp	r2, #0
 800092e:	d18b      	bne.n	8000848 <__aeabi_fsub+0x1e0>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d192      	bne.n	800085a <__aeabi_fsub+0x1f2>
 8000934:	2780      	movs	r7, #128	; 0x80
 8000936:	2400      	movs	r4, #0
 8000938:	22ff      	movs	r2, #255	; 0xff
 800093a:	03ff      	lsls	r7, r7, #15
 800093c:	e6df      	b.n	80006fe <__aeabi_fsub+0x96>
 800093e:	4663      	mov	r3, ip
 8000940:	000c      	movs	r4, r1
 8000942:	1af7      	subs	r7, r6, r3
 8000944:	e6bf      	b.n	80006c6 <__aeabi_fsub+0x5e>
 8000946:	0030      	movs	r0, r6
 8000948:	4460      	add	r0, ip
 800094a:	2501      	movs	r5, #1
 800094c:	0143      	lsls	r3, r0, #5
 800094e:	d400      	bmi.n	8000952 <__aeabi_fsub+0x2ea>
 8000950:	e76c      	b.n	800082c <__aeabi_fsub+0x1c4>
 8000952:	2502      	movs	r5, #2
 8000954:	e6f2      	b.n	800073c <__aeabi_fsub+0xd4>
 8000956:	4663      	mov	r3, ip
 8000958:	2501      	movs	r5, #1
 800095a:	1b98      	subs	r0, r3, r6
 800095c:	e6ae      	b.n	80006bc <__aeabi_fsub+0x54>
 800095e:	2320      	movs	r3, #32
 8000960:	4664      	mov	r4, ip
 8000962:	4660      	mov	r0, ip
 8000964:	40fc      	lsrs	r4, r7
 8000966:	1bdf      	subs	r7, r3, r7
 8000968:	40b8      	lsls	r0, r7
 800096a:	1e43      	subs	r3, r0, #1
 800096c:	4198      	sbcs	r0, r3
 800096e:	4320      	orrs	r0, r4
 8000970:	e79f      	b.n	80008b2 <__aeabi_fsub+0x24a>
 8000972:	0005      	movs	r5, r0
 8000974:	e75e      	b.n	8000834 <__aeabi_fsub+0x1cc>
 8000976:	464b      	mov	r3, r9
 8000978:	e771      	b.n	800085e <__aeabi_fsub+0x1f6>
 800097a:	2320      	movs	r3, #32
 800097c:	4665      	mov	r5, ip
 800097e:	4660      	mov	r0, ip
 8000980:	40cd      	lsrs	r5, r1
 8000982:	1a59      	subs	r1, r3, r1
 8000984:	4088      	lsls	r0, r1
 8000986:	1e43      	subs	r3, r0, #1
 8000988:	4198      	sbcs	r0, r3
 800098a:	4328      	orrs	r0, r5
 800098c:	e71c      	b.n	80007c8 <__aeabi_fsub+0x160>
 800098e:	4663      	mov	r3, ip
 8000990:	000c      	movs	r4, r1
 8000992:	2501      	movs	r5, #1
 8000994:	1af0      	subs	r0, r6, r3
 8000996:	e691      	b.n	80006bc <__aeabi_fsub+0x54>
 8000998:	2e00      	cmp	r6, #0
 800099a:	d095      	beq.n	80008c8 <__aeabi_fsub+0x260>
 800099c:	000c      	movs	r4, r1
 800099e:	464f      	mov	r7, r9
 80009a0:	2200      	movs	r2, #0
 80009a2:	e6ac      	b.n	80006fe <__aeabi_fsub+0x96>
 80009a4:	464b      	mov	r3, r9
 80009a6:	000d      	movs	r5, r1
 80009a8:	e744      	b.n	8000834 <__aeabi_fsub+0x1cc>
 80009aa:	464f      	mov	r7, r9
 80009ac:	2200      	movs	r2, #0
 80009ae:	e6a6      	b.n	80006fe <__aeabi_fsub+0x96>
 80009b0:	fbffffff 	.word	0xfbffffff
 80009b4:	7dffffff 	.word	0x7dffffff
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d000      	beq.n	80009be <__aeabi_fsub+0x356>
 80009bc:	e736      	b.n	800082c <__aeabi_fsub+0x1c4>
 80009be:	2400      	movs	r4, #0
 80009c0:	2700      	movs	r7, #0
 80009c2:	e69c      	b.n	80006fe <__aeabi_fsub+0x96>

080009c4 <__aeabi_f2iz>:
 80009c4:	0241      	lsls	r1, r0, #9
 80009c6:	0042      	lsls	r2, r0, #1
 80009c8:	0fc3      	lsrs	r3, r0, #31
 80009ca:	0a49      	lsrs	r1, r1, #9
 80009cc:	2000      	movs	r0, #0
 80009ce:	0e12      	lsrs	r2, r2, #24
 80009d0:	2a7e      	cmp	r2, #126	; 0x7e
 80009d2:	dd03      	ble.n	80009dc <__aeabi_f2iz+0x18>
 80009d4:	2a9d      	cmp	r2, #157	; 0x9d
 80009d6:	dd02      	ble.n	80009de <__aeabi_f2iz+0x1a>
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <__aeabi_f2iz+0x3c>)
 80009da:	1898      	adds	r0, r3, r2
 80009dc:	4770      	bx	lr
 80009de:	2080      	movs	r0, #128	; 0x80
 80009e0:	0400      	lsls	r0, r0, #16
 80009e2:	4301      	orrs	r1, r0
 80009e4:	2a95      	cmp	r2, #149	; 0x95
 80009e6:	dc07      	bgt.n	80009f8 <__aeabi_f2iz+0x34>
 80009e8:	2096      	movs	r0, #150	; 0x96
 80009ea:	1a82      	subs	r2, r0, r2
 80009ec:	40d1      	lsrs	r1, r2
 80009ee:	4248      	negs	r0, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f3      	bne.n	80009dc <__aeabi_f2iz+0x18>
 80009f4:	0008      	movs	r0, r1
 80009f6:	e7f1      	b.n	80009dc <__aeabi_f2iz+0x18>
 80009f8:	3a96      	subs	r2, #150	; 0x96
 80009fa:	4091      	lsls	r1, r2
 80009fc:	e7f7      	b.n	80009ee <__aeabi_f2iz+0x2a>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	7fffffff 	.word	0x7fffffff

08000a04 <__aeabi_i2f>:
 8000a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d013      	beq.n	8000a32 <__aeabi_i2f+0x2e>
 8000a0a:	17c3      	asrs	r3, r0, #31
 8000a0c:	18c6      	adds	r6, r0, r3
 8000a0e:	405e      	eors	r6, r3
 8000a10:	0fc4      	lsrs	r4, r0, #31
 8000a12:	0030      	movs	r0, r6
 8000a14:	f000 f886 	bl	8000b24 <__clzsi2>
 8000a18:	239e      	movs	r3, #158	; 0x9e
 8000a1a:	0005      	movs	r5, r0
 8000a1c:	1a1b      	subs	r3, r3, r0
 8000a1e:	2b96      	cmp	r3, #150	; 0x96
 8000a20:	dc0f      	bgt.n	8000a42 <__aeabi_i2f+0x3e>
 8000a22:	2808      	cmp	r0, #8
 8000a24:	dd01      	ble.n	8000a2a <__aeabi_i2f+0x26>
 8000a26:	3d08      	subs	r5, #8
 8000a28:	40ae      	lsls	r6, r5
 8000a2a:	0276      	lsls	r6, r6, #9
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	b2d8      	uxtb	r0, r3
 8000a30:	e002      	b.n	8000a38 <__aeabi_i2f+0x34>
 8000a32:	2400      	movs	r4, #0
 8000a34:	2000      	movs	r0, #0
 8000a36:	2600      	movs	r6, #0
 8000a38:	05c0      	lsls	r0, r0, #23
 8000a3a:	4330      	orrs	r0, r6
 8000a3c:	07e4      	lsls	r4, r4, #31
 8000a3e:	4320      	orrs	r0, r4
 8000a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a42:	2b99      	cmp	r3, #153	; 0x99
 8000a44:	dd0c      	ble.n	8000a60 <__aeabi_i2f+0x5c>
 8000a46:	2205      	movs	r2, #5
 8000a48:	0031      	movs	r1, r6
 8000a4a:	1a12      	subs	r2, r2, r0
 8000a4c:	40d1      	lsrs	r1, r2
 8000a4e:	000a      	movs	r2, r1
 8000a50:	0001      	movs	r1, r0
 8000a52:	0030      	movs	r0, r6
 8000a54:	311b      	adds	r1, #27
 8000a56:	4088      	lsls	r0, r1
 8000a58:	1e41      	subs	r1, r0, #1
 8000a5a:	4188      	sbcs	r0, r1
 8000a5c:	4302      	orrs	r2, r0
 8000a5e:	0016      	movs	r6, r2
 8000a60:	2d05      	cmp	r5, #5
 8000a62:	dc12      	bgt.n	8000a8a <__aeabi_i2f+0x86>
 8000a64:	0031      	movs	r1, r6
 8000a66:	4f0d      	ldr	r7, [pc, #52]	; (8000a9c <__aeabi_i2f+0x98>)
 8000a68:	4039      	ands	r1, r7
 8000a6a:	0772      	lsls	r2, r6, #29
 8000a6c:	d009      	beq.n	8000a82 <__aeabi_i2f+0x7e>
 8000a6e:	200f      	movs	r0, #15
 8000a70:	4030      	ands	r0, r6
 8000a72:	2804      	cmp	r0, #4
 8000a74:	d005      	beq.n	8000a82 <__aeabi_i2f+0x7e>
 8000a76:	3104      	adds	r1, #4
 8000a78:	014a      	lsls	r2, r1, #5
 8000a7a:	d502      	bpl.n	8000a82 <__aeabi_i2f+0x7e>
 8000a7c:	239f      	movs	r3, #159	; 0x9f
 8000a7e:	4039      	ands	r1, r7
 8000a80:	1b5b      	subs	r3, r3, r5
 8000a82:	0189      	lsls	r1, r1, #6
 8000a84:	0a4e      	lsrs	r6, r1, #9
 8000a86:	b2d8      	uxtb	r0, r3
 8000a88:	e7d6      	b.n	8000a38 <__aeabi_i2f+0x34>
 8000a8a:	1f6a      	subs	r2, r5, #5
 8000a8c:	4096      	lsls	r6, r2
 8000a8e:	0031      	movs	r1, r6
 8000a90:	4f02      	ldr	r7, [pc, #8]	; (8000a9c <__aeabi_i2f+0x98>)
 8000a92:	4039      	ands	r1, r7
 8000a94:	0772      	lsls	r2, r6, #29
 8000a96:	d0f4      	beq.n	8000a82 <__aeabi_i2f+0x7e>
 8000a98:	e7e9      	b.n	8000a6e <__aeabi_i2f+0x6a>
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	fbffffff 	.word	0xfbffffff

08000aa0 <__aeabi_ui2f>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	1e05      	subs	r5, r0, #0
 8000aa4:	d00e      	beq.n	8000ac4 <__aeabi_ui2f+0x24>
 8000aa6:	f000 f83d 	bl	8000b24 <__clzsi2>
 8000aaa:	239e      	movs	r3, #158	; 0x9e
 8000aac:	0004      	movs	r4, r0
 8000aae:	1a1b      	subs	r3, r3, r0
 8000ab0:	2b96      	cmp	r3, #150	; 0x96
 8000ab2:	dc0c      	bgt.n	8000ace <__aeabi_ui2f+0x2e>
 8000ab4:	2808      	cmp	r0, #8
 8000ab6:	dd01      	ble.n	8000abc <__aeabi_ui2f+0x1c>
 8000ab8:	3c08      	subs	r4, #8
 8000aba:	40a5      	lsls	r5, r4
 8000abc:	026d      	lsls	r5, r5, #9
 8000abe:	0a6d      	lsrs	r5, r5, #9
 8000ac0:	b2d8      	uxtb	r0, r3
 8000ac2:	e001      	b.n	8000ac8 <__aeabi_ui2f+0x28>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	2500      	movs	r5, #0
 8000ac8:	05c0      	lsls	r0, r0, #23
 8000aca:	4328      	orrs	r0, r5
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	2b99      	cmp	r3, #153	; 0x99
 8000ad0:	dd09      	ble.n	8000ae6 <__aeabi_ui2f+0x46>
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	0029      	movs	r1, r5
 8000ad6:	321b      	adds	r2, #27
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	1e4a      	subs	r2, r1, #1
 8000adc:	4191      	sbcs	r1, r2
 8000ade:	2205      	movs	r2, #5
 8000ae0:	1a12      	subs	r2, r2, r0
 8000ae2:	40d5      	lsrs	r5, r2
 8000ae4:	430d      	orrs	r5, r1
 8000ae6:	2c05      	cmp	r4, #5
 8000ae8:	dc12      	bgt.n	8000b10 <__aeabi_ui2f+0x70>
 8000aea:	0029      	movs	r1, r5
 8000aec:	4e0c      	ldr	r6, [pc, #48]	; (8000b20 <__aeabi_ui2f+0x80>)
 8000aee:	4031      	ands	r1, r6
 8000af0:	076a      	lsls	r2, r5, #29
 8000af2:	d009      	beq.n	8000b08 <__aeabi_ui2f+0x68>
 8000af4:	200f      	movs	r0, #15
 8000af6:	4028      	ands	r0, r5
 8000af8:	2804      	cmp	r0, #4
 8000afa:	d005      	beq.n	8000b08 <__aeabi_ui2f+0x68>
 8000afc:	3104      	adds	r1, #4
 8000afe:	014a      	lsls	r2, r1, #5
 8000b00:	d502      	bpl.n	8000b08 <__aeabi_ui2f+0x68>
 8000b02:	239f      	movs	r3, #159	; 0x9f
 8000b04:	4031      	ands	r1, r6
 8000b06:	1b1b      	subs	r3, r3, r4
 8000b08:	0189      	lsls	r1, r1, #6
 8000b0a:	0a4d      	lsrs	r5, r1, #9
 8000b0c:	b2d8      	uxtb	r0, r3
 8000b0e:	e7db      	b.n	8000ac8 <__aeabi_ui2f+0x28>
 8000b10:	1f62      	subs	r2, r4, #5
 8000b12:	4095      	lsls	r5, r2
 8000b14:	0029      	movs	r1, r5
 8000b16:	4e02      	ldr	r6, [pc, #8]	; (8000b20 <__aeabi_ui2f+0x80>)
 8000b18:	4031      	ands	r1, r6
 8000b1a:	076a      	lsls	r2, r5, #29
 8000b1c:	d0f4      	beq.n	8000b08 <__aeabi_ui2f+0x68>
 8000b1e:	e7e9      	b.n	8000af4 <__aeabi_ui2f+0x54>
 8000b20:	fbffffff 	.word	0xfbffffff

08000b24 <__clzsi2>:
 8000b24:	211c      	movs	r1, #28
 8000b26:	2301      	movs	r3, #1
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	d301      	bcc.n	8000b32 <__clzsi2+0xe>
 8000b2e:	0c00      	lsrs	r0, r0, #16
 8000b30:	3910      	subs	r1, #16
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	4298      	cmp	r0, r3
 8000b36:	d301      	bcc.n	8000b3c <__clzsi2+0x18>
 8000b38:	0a00      	lsrs	r0, r0, #8
 8000b3a:	3908      	subs	r1, #8
 8000b3c:	091b      	lsrs	r3, r3, #4
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	d301      	bcc.n	8000b46 <__clzsi2+0x22>
 8000b42:	0900      	lsrs	r0, r0, #4
 8000b44:	3904      	subs	r1, #4
 8000b46:	a202      	add	r2, pc, #8	; (adr r2, 8000b50 <__clzsi2+0x2c>)
 8000b48:	5c10      	ldrb	r0, [r2, r0]
 8000b4a:	1840      	adds	r0, r0, r1
 8000b4c:	4770      	bx	lr
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	02020304 	.word	0x02020304
 8000b54:	01010101 	.word	0x01010101
	...

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fe97 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f837 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 fa23 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b72:	f000 fa03 	bl	8000f7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b76:	f000 f9cd 	bl	8000f14 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000b7a:	f000 f8df 	bl	8000d3c <MX_I2C2_Init>
  MX_ADC1_Init();
 8000b7e:	f000 f875 	bl	8000c6c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b82:	f000 f91b 	bl	8000dbc <MX_TIM1_Init>
  MX_TIM14_Init();
 8000b86:	f000 f975 	bl	8000e74 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //calibrate ADC on start-up for better accuracy
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <main+0x6c>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 fe95 	bl	80028bc <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <main+0x70>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f004 faa4 	bl	80050e4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA (&hadc1, &pot_reading, 1);
 8000b9c:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <main+0x74>)
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <main+0x6c>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 fa22 	bl	8001fec <HAL_ADC_Start_DMA>
	  ina_initialise(0x40);
 8000ba8:	2040      	movs	r0, #64	; 0x40
 8000baa:	f000 fb87 	bl	80012bc <ina_initialise>
	  write_to_reg_unspecified(0x40, INA_CAL);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <main+0x78>)
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	2040      	movs	r0, #64	; 0x40
 8000bb4:	f000 fb58 	bl	8001268 <write_to_reg_unspecified>

	  //write_to_register(0x40, INA_CONFIG_REG, 0x15D9);
	  uint16_t read = read_register(0x40, INA_CALIB_REG);
 8000bb8:	2105      	movs	r1, #5
 8000bba:	2040      	movs	r0, #64	; 0x40
 8000bbc:	f000 fb04 	bl	80011c8 <read_register>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	1dbb      	adds	r3, r7, #6
 8000bc6:	801a      	strh	r2, [r3, #0]
  {
 8000bc8:	e7e8      	b.n	8000b9c <main+0x3c>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	20000028 	.word	0x20000028
 8000bd0:	20000188 	.word	0x20000188
 8000bd4:	2000026a 	.word	0x2000026a
 8000bd8:	000015d9 	.word	0x000015d9

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b093      	sub	sp, #76	; 0x4c
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	2414      	movs	r4, #20
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	0018      	movs	r0, r3
 8000be8:	2334      	movs	r3, #52	; 0x34
 8000bea:	001a      	movs	r2, r3
 8000bec:	2100      	movs	r1, #0
 8000bee:	f005 fd9b 	bl	8006728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f005 fd94 	bl	8006728 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f003 fb89 	bl	800431c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	0052      	lsls	r2, r2, #1
 8000c16:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	2240      	movs	r2, #64	; 0x40
 8000c22:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f003 fbc1 	bl	80043b4 <HAL_RCC_OscConfig>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c36:	f000 fc15 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2100      	movs	r1, #0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f003 febc 	bl	80049d4 <HAL_RCC_ClockConfig>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c60:	f000 fc00 	bl	8001464 <Error_Handler>
  }
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b013      	add	sp, #76	; 0x4c
 8000c6a:	bd90      	pop	{r4, r7, pc}

08000c6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	0018      	movs	r0, r3
 8000c76:	230c      	movs	r3, #12
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f005 fd54 	bl	8006728 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000c82:	4a2c      	ldr	r2, [pc, #176]	; (8000d34 <MX_ADC1_Init+0xc8>)
 8000c84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	05d2      	lsls	r2, r2, #23
 8000c8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000cac:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000ccc:	222c      	movs	r2, #44	; 0x2c
 8000cce:	2100      	movs	r1, #0
 8000cd0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000ce6:	223c      	movs	r2, #60	; 0x3c
 8000ce8:	2100      	movs	r1, #0
 8000cea:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 ffd1 	bl	8001c9c <HAL_ADC_Init>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000cfe:	f000 fbb1 	bl	8001464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <MX_ADC1_Init+0xcc>)
 8000d06:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d14:	1d3a      	adds	r2, r7, #4
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_ADC1_Init+0xc4>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 fa04 	bl	8002128 <HAL_ADC_ConfigChannel>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000d24:	f000 fb9e 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000028 	.word	0x20000028
 8000d34:	40012400 	.word	0x40012400
 8000d38:	04000002 	.word	0x04000002

08000d3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <MX_I2C2_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <MX_I2C2_Init+0x7c>)
 8000d4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f002 fb5b 	bl	8003434 <HAL_I2C_Init>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d82:	f000 fb6f 	bl	8001464 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f003 fa2e 	bl	80041ec <HAL_I2CEx_ConfigAnalogFilter>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d94:	f000 fb66 	bl	8001464 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <MX_I2C2_Init+0x74>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f003 fa71 	bl	8004284 <HAL_I2CEx_ConfigDigitalFilter>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000da6:	f000 fb5d 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000e8 	.word	0x200000e8
 8000db4:	40005800 	.word	0x40005800
 8000db8:	00303d5b 	.word	0x00303d5b

08000dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	2310      	movs	r3, #16
 8000dca:	001a      	movs	r2, r3
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f005 fcab 	bl	8006728 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	001a      	movs	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f005 fca4 	bl	8006728 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <MX_TIM1_Init+0xb0>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <MX_TIM1_Init+0xb4>)
 8000df6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f004 f8b1 	bl	8004f74 <HAL_TIM_Base_Init>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000e16:	f000 fb25 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	0152      	lsls	r2, r2, #5
 8000e22:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e24:	187a      	adds	r2, r7, r1
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000e28:	0011      	movs	r1, r2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f004 fb32 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e34:	f000 fb16 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e4a:	1d3a      	adds	r2, r7, #4
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_TIM1_Init+0xac>)
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f004 ffbd 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e5a:	f000 fb03 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b008      	add	sp, #32
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	2000013c 	.word	0x2000013c
 8000e6c:	40012c00 	.word	0x40012c00
 8000e70:	0000ffff 	.word	0x0000ffff

08000e74 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	231c      	movs	r3, #28
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f005 fc50 	bl	8006728 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000e8a:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <MX_TIM14_Init+0x98>)
 8000e8c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4095;
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <MX_TIM14_Init+0x9c>)
 8000e9e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f004 f860 	bl	8004f74 <HAL_TIM_Base_Init>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000eb8:	f000 fad4 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f004 f8b0 	bl	8005024 <HAL_TIM_PWM_Init>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000ec8:	f000 facc 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2260      	movs	r2, #96	; 0x60
 8000ed0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f004 f9d2 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000ef4:	f000 fab6 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <MX_TIM14_Init+0x94>)
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 fbe8 	bl	80016d0 <HAL_TIM_MspPostInit>

}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b008      	add	sp, #32
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000188 	.word	0x20000188
 8000f0c:	40002000 	.word	0x40002000
 8000f10:	00000fff 	.word	0x00000fff

08000f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <MX_USART2_UART_Init+0x64>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f20:	22e1      	movs	r2, #225	; 0xe1
 8000f22:	0252      	lsls	r2, r2, #9
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <MX_USART2_UART_Init+0x60>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f004 ff98 	bl	8005e94 <HAL_UART_Init>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f68:	f000 fa7c 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	200001d4 	.word	0x200001d4
 8000f78:	40004400 	.word	0x40004400

08000f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f88:	2101      	movs	r1, #1
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_DMA_Init+0x38>)
 8000f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f92:	2201      	movs	r2, #1
 8000f94:	4013      	ands	r3, r2
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2009      	movs	r0, #9
 8000fa0:	f001 fe0e 	bl	8002bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa4:	2009      	movs	r0, #9
 8000fa6:	f001 fe20 	bl	8002bea <HAL_NVIC_EnableIRQ>

}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	240c      	movs	r4, #12
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2314      	movs	r3, #20
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f005 fbad 	bl	8006728 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	2202      	movs	r2, #2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fea:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000fec:	2104      	movs	r1, #4
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001004:	2101      	movs	r1, #1
 8001006:	430a      	orrs	r2, r1
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <MX_GPIO_Init+0x130>)
 800100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100e:	2201      	movs	r2, #1
 8001010:	4013      	ands	r3, r2
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_SET);
 8001016:	4935      	ldr	r1, [pc, #212]	; (80010ec <MX_GPIO_Init+0x134>)
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <MX_GPIO_Init+0x138>)
 800101a:	2201      	movs	r2, #1
 800101c:	0018      	movs	r0, r3
 800101e:	f002 f9b7 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	4833      	ldr	r0, [pc, #204]	; (80010f4 <MX_GPIO_Init+0x13c>)
 8001028:	2201      	movs	r2, #1
 800102a:	0019      	movs	r1, r3
 800102c:	f002 f9b0 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0;
 8001030:	193b      	adds	r3, r7, r4
 8001032:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <MX_GPIO_Init+0x134>)
 8001034:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	193b      	adds	r3, r7, r4
 8001038:	2201      	movs	r2, #1
 800103a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	193b      	adds	r3, r7, r4
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2203      	movs	r2, #3
 8001046:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	193b      	adds	r3, r7, r4
 800104a:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <MX_GPIO_Init+0x138>)
 800104c:	0019      	movs	r1, r3
 800104e:	0010      	movs	r0, r2
 8001050:	f002 f83a 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001054:	0021      	movs	r1, r4
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	0212      	lsls	r2, r2, #8
 800105c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	000c      	movs	r4, r1
 8001060:	193b      	adds	r3, r7, r4
 8001062:	2201      	movs	r2, #1
 8001064:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001066:	193b      	adds	r3, r7, r4
 8001068:	2201      	movs	r2, #1
 800106a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	193b      	adds	r3, r7, r4
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	193b      	adds	r3, r7, r4
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <MX_GPIO_Init+0x13c>)
 8001076:	0019      	movs	r1, r3
 8001078:	0010      	movs	r0, r2
 800107a:	f002 f825 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800107e:	193b      	adds	r3, r7, r4
 8001080:	2220      	movs	r2, #32
 8001082:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	193a      	adds	r2, r7, r4
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f002 f815 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800109e:	0021      	movs	r1, r4
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	22c0      	movs	r2, #192	; 0xc0
 80010a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2288      	movs	r2, #136	; 0x88
 80010aa:	0352      	lsls	r2, r2, #13
 80010ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	187a      	adds	r2, r7, r1
 80010b6:	23a0      	movs	r3, #160	; 0xa0
 80010b8:	05db      	lsls	r3, r3, #23
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 f803 	bl	80030c8 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_GPIO_Init+0x140>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_GPIO_Init+0x140>)
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0309      	lsls	r1, r1, #12
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2007      	movs	r0, #7
 80010d6:	f001 fd73 	bl	8002bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80010da:	2007      	movs	r0, #7
 80010dc:	f001 fd85 	bl	8002bea <HAL_NVIC_EnableIRQ>

}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b009      	add	sp, #36	; 0x24
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	40021000 	.word	0x40021000
 80010ec:	00000201 	.word	0x00000201
 80010f0:	50000400 	.word	0x50000400
 80010f4:	50000800 	.word	0x50000800
 80010f8:	40010000 	.word	0x40010000

080010fc <swap_endian>:
 *@brief Swaps endian from Big to little or vice versa for given data
 * @param int p
 * @retval int p_swapped
   */
 int swap_endian(int p)
 {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 	 uint16_t p_swapped = (p>>8) | (p<<8);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	121b      	asrs	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21a      	sxth	r2, r3
 8001114:	210e      	movs	r1, #14
 8001116:	187b      	adds	r3, r7, r1
 8001118:	801a      	strh	r2, [r3, #0]
 	 return p_swapped;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	881b      	ldrh	r3, [r3, #0]
 }
 800111e:	0018      	movs	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	b004      	add	sp, #16
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <write_to_register>:
 * @brief Write to given value to register of given device address
 * @param uint8_t device_address, uint8_t register_pointer, uint16_t register_value
 * @retval None
 */
 void write_to_register(uint8_t device_address,uint8_t register_pointer, uint16_t register_value)
 {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af04      	add	r7, sp, #16
 800112e:	0004      	movs	r4, r0
 8001130:	0008      	movs	r0, r1
 8001132:	0011      	movs	r1, r2
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	1c22      	adds	r2, r4, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	1dbb      	adds	r3, r7, #6
 800113c:	1c02      	adds	r2, r0, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	1c0a      	adds	r2, r1, #0
 8001144:	801a      	strh	r2, [r3, #0]
     HAL_StatusTypeDef status = HAL_OK;
 8001146:	250f      	movs	r5, #15
 8001148:	197b      	adds	r3, r7, r5
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
     uint16_t register_value_swapped = swap_endian(register_value);
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff ffd2 	bl	80010fc <swap_endian>
 8001158:	0003      	movs	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	240c      	movs	r4, #12
 800115e:	193b      	adds	r3, r7, r4
 8001160:	801a      	strh	r2, [r3, #0]
     HAL_I2C_Mem_Write(&hi2c2,(device_address<<1),register_pointer,1,&register_value_swapped,2,50);
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	18db      	adds	r3, r3, r3
 800116a:	b299      	uxth	r1, r3
 800116c:	1dbb      	adds	r3, r7, #6
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b29a      	uxth	r2, r3
 8001172:	4814      	ldr	r0, [pc, #80]	; (80011c4 <write_to_register+0x9c>)
 8001174:	2332      	movs	r3, #50	; 0x32
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2302      	movs	r3, #2
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	193b      	adds	r3, r7, r4
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	f002 faf5 	bl	8003770 <HAL_I2C_Mem_Write>
     /* Check the communication status */
     if(status != HAL_OK){
 8001186:	197b      	adds	r3, r7, r5
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d016      	beq.n	80011bc <write_to_register+0x94>
    	 MX_I2C2_Init();
 800118e:	f7ff fdd5 	bl	8000d3c <MX_I2C2_Init>
    	 HAL_Delay(100);
 8001192:	2064      	movs	r0, #100	; 0x64
 8001194:	f000 fc06 	bl	80019a4 <HAL_Delay>
    	 HAL_I2C_Mem_Write(&hi2c2,(device_address<<1),register_pointer,1,&register_value_swapped,2,50);
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	18db      	adds	r3, r3, r3
 80011a0:	b299      	uxth	r1, r3
 80011a2:	1dbb      	adds	r3, r7, #6
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <write_to_register+0x9c>)
 80011aa:	2332      	movs	r3, #50	; 0x32
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2302      	movs	r3, #2
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	f002 fada 	bl	8003770 <HAL_I2C_Mem_Write>
    	 // Error handling, for example re-initialization of the I2C peripheral
     }
 }
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b004      	add	sp, #16
 80011c2:	bdb0      	pop	{r4, r5, r7, pc}
 80011c4:	200000e8 	.word	0x200000e8

080011c8 <read_register>:
 * @brief read given register of given device function
 * @param uint8_t device_address uint8_t register_pointer
 * @retval uint16_t register_value_return
 */
 int16_t read_register(uint8_t device_address,uint8_t register_pointer)
 {
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	0002      	movs	r2, r0
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	1c0a      	adds	r2, r1, #0
 80011d8:	701a      	strb	r2, [r3, #0]
     HAL_StatusTypeDef status = HAL_OK;
 80011da:	240f      	movs	r4, #15
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
     uint16_t register_value_return;

     HAL_I2C_Mem_Read(&hi2c2,(device_address<<1),register_pointer,1,&register_value_return,2,500);
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	18db      	adds	r3, r3, r3
 80011ea:	b299      	uxth	r1, r3
 80011ec:	1dbb      	adds	r3, r7, #6
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	481c      	ldr	r0, [pc, #112]	; (8001264 <read_register+0x9c>)
 80011f4:	23fa      	movs	r3, #250	; 0xfa
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	2302      	movs	r3, #2
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	250c      	movs	r5, #12
 8001200:	197b      	adds	r3, r7, r5
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	f002 fbe1 	bl	80039cc <HAL_I2C_Mem_Read>
     /* Check the communication status */
     if(status != HAL_OK){
 800120a:	193b      	adds	r3, r7, r4
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <read_register+0x7a>
         	 MX_I2C2_Init();
 8001212:	f7ff fd93 	bl	8000d3c <MX_I2C2_Init>
         	 HAL_Delay(100);
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f000 fbc4 	bl	80019a4 <HAL_Delay>
         	 HAL_I2C_Mem_Read(&hi2c2,(device_address<<1),register_pointer,1,&register_value_return,2,500);
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	18db      	adds	r3, r3, r3
 8001224:	b299      	uxth	r1, r3
 8001226:	1dbb      	adds	r3, r7, #6
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b29a      	uxth	r2, r3
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <read_register+0x9c>)
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2302      	movs	r3, #2
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	197b      	adds	r3, r7, r5
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	f002 fbc5 	bl	80039cc <HAL_I2C_Mem_Read>
         	 // Error handling, for example re-initialization of the I2C peripheral
     }
     register_value_return = swap_endian(register_value_return);
 8001242:	240c      	movs	r4, #12
 8001244:	193b      	adds	r3, r7, r4
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff ff57 	bl	80010fc <swap_endian>
 800124e:	0003      	movs	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	193b      	adds	r3, r7, r4
 8001254:	801a      	strh	r2, [r3, #0]
     return register_value_return;
 8001256:	193b      	adds	r3, r7, r4
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	b21b      	sxth	r3, r3
 }
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b004      	add	sp, #16
 8001262:	bdb0      	pop	{r4, r5, r7, pc}
 8001264:	200000e8 	.word	0x200000e8

08001268 <write_to_reg_unspecified>:

 void write_to_reg_unspecified(uint8_t device_address, uint16_t register_value)
 {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af02      	add	r7, sp, #8
 800126e:	0002      	movs	r2, r0
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	1c0a      	adds	r2, r1, #0
 8001278:	801a      	strh	r2, [r3, #0]
     HAL_StatusTypeDef status = HAL_OK;
 800127a:	230f      	movs	r3, #15
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
     uint16_t register_value_swapped = swap_endian(register_value);
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ff38 	bl	80010fc <swap_endian>
 800128c:	0003      	movs	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	200c      	movs	r0, #12
 8001292:	183b      	adds	r3, r7, r0
 8001294:	801a      	strh	r2, [r3, #0]
     HAL_I2C_Master_Transmit(&hi2c2,(device_address<<1),&register_value_swapped,I2C_MEMADD_SIZE_16BIT,50);
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	18db      	adds	r3, r3, r3
 800129e:	b299      	uxth	r1, r3
 80012a0:	183a      	adds	r2, r7, r0
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <write_to_reg_unspecified+0x50>)
 80012a4:	2332      	movs	r3, #50	; 0x32
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2302      	movs	r3, #2
 80012aa:	f002 f959 	bl	8003560 <HAL_I2C_Master_Transmit>
     /* Check the communication status */
     if(status != HAL_OK)
     {
         // Error handling, for example re-initialization of the I2C peripheral
     }
 }
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	200000e8 	.word	0x200000e8

080012bc <ina_initialise>:

 /**
  * @brief writes calibration value to INA219s calibration register
  * @param address of INA219: uin8_t device_address
  */
 void ina_initialise(uint8_t device_address){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	0002      	movs	r2, r0
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	701a      	strb	r2, [r3, #0]
	   write_to_register(device_address,INA_CALIB_REG, INA_CAL);
 80012c8:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <ina_initialise+0x24>)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2105      	movs	r1, #5
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff29 	bl	8001128 <write_to_register>
	   //write_to_reg_specified(device_address, INA_CONFIG_REG, INA_CONFIG_VALUE);
 }
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	000015d9 	.word	0x000015d9

080012e4 <HAL_GPIO_EXTI_Falling_Callback>:

/**
 * @brief function called when interrupt triggered on rising edge
 * @param GPIO pin on which interrupt occurred
 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	0002      	movs	r2, r0
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	801a      	strh	r2, [r3, #0]

	switch(GPIO_Pin){
 80012f0:	1dbb      	adds	r3, r7, #6
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	2b40      	cmp	r3, #64	; 0x40
 80012f6:	d01e      	beq.n	8001336 <HAL_GPIO_EXTI_Falling_Callback+0x52>
 80012f8:	2b80      	cmp	r3, #128	; 0x80
 80012fa:	d165      	bne.n	80013c8 <HAL_GPIO_EXTI_Falling_Callback+0xe4>
	case SW1:
		switch (current_state){
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b04      	cmp	r3, #4
 8001302:	d002      	beq.n	800130a <HAL_GPIO_EXTI_Falling_Callback+0x26>
 8001304:	2b05      	cmp	r3, #5
 8001306:	d00c      	beq.n	8001322 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
 8001308:	e00e      	b.n	8001328 <HAL_GPIO_EXTI_Falling_Callback+0x44>
		case STEADY_STATE:
			current_state = CUTTING;
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 800130c:	2205      	movs	r2, #5
 800130e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Ready to cut",sizeof("\r\n Ready to cut"),10);
 8001310:	4930      	ldr	r1, [pc, #192]	; (80013d4 <HAL_GPIO_EXTI_Falling_Callback+0xf0>)
 8001312:	4831      	ldr	r0, [pc, #196]	; (80013d8 <HAL_GPIO_EXTI_Falling_Callback+0xf4>)
 8001314:	230a      	movs	r3, #10
 8001316:	2210      	movs	r2, #16
 8001318:	f004 fe12 	bl	8005f40 <HAL_UART_Transmit>
			HAL_Delay(10);
 800131c:	200a      	movs	r0, #10
 800131e:	f000 fb41 	bl	80019a4 <HAL_Delay>
		case CUTTING:
			current_state = COOLDOWN;
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 8001324:	2206      	movs	r2, #6
 8001326:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n NOT",sizeof("\r\n NOT"),10);
 8001328:	492c      	ldr	r1, [pc, #176]	; (80013dc <HAL_GPIO_EXTI_Falling_Callback+0xf8>)
 800132a:	482b      	ldr	r0, [pc, #172]	; (80013d8 <HAL_GPIO_EXTI_Falling_Callback+0xf4>)
 800132c:	230a      	movs	r3, #10
 800132e:	2207      	movs	r2, #7
 8001330:	f004 fe06 	bl	8005f40 <HAL_UART_Transmit>
		break;
 8001334:	e048      	b.n	80013c8 <HAL_GPIO_EXTI_Falling_Callback+0xe4>
	case SW2:
		switch (current_state){
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b04      	cmp	r3, #4
 800133c:	d83d      	bhi.n	80013ba <HAL_GPIO_EXTI_Falling_Callback+0xd6>
 800133e:	009a      	lsls	r2, r3, #2
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_GPIO_EXTI_Falling_Callback+0xfc>)
 8001342:	18d3      	adds	r3, r2, r3
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	469f      	mov	pc, r3
		case POWER_ON:
			HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Please Wait",sizeof("\r\n Please Wait"),10);
 8001348:	4926      	ldr	r1, [pc, #152]	; (80013e4 <HAL_GPIO_EXTI_Falling_Callback+0x100>)
 800134a:	4823      	ldr	r0, [pc, #140]	; (80013d8 <HAL_GPIO_EXTI_Falling_Callback+0xf4>)
 800134c:	230a      	movs	r3, #10
 800134e:	220f      	movs	r2, #15
 8001350:	f004 fdf6 	bl	8005f40 <HAL_UART_Transmit>
			current_state = POWER_ON;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10);
 800135a:	200a      	movs	r0, #10
 800135c:	f000 fb22 	bl	80019a4 <HAL_Delay>
			break;
 8001360:	e02b      	b.n	80013ba <HAL_GPIO_EXTI_Falling_Callback+0xd6>
		case INITIALISING:
			HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Please Wait",sizeof("\r\n Please Wait"),10);
 8001362:	4920      	ldr	r1, [pc, #128]	; (80013e4 <HAL_GPIO_EXTI_Falling_Callback+0x100>)
 8001364:	481c      	ldr	r0, [pc, #112]	; (80013d8 <HAL_GPIO_EXTI_Falling_Callback+0xf4>)
 8001366:	230a      	movs	r3, #10
 8001368:	220f      	movs	r2, #15
 800136a:	f004 fde9 	bl	8005f40 <HAL_UART_Transmit>
			current_state=INITIALISING;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f000 fb15 	bl	80019a4 <HAL_Delay>
			break;
 800137a:	e01e      	b.n	80013ba <HAL_GPIO_EXTI_Falling_Callback+0xd6>
		case INITIALISED:
			current_state = SETTLING_STATE;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 800137e:	2203      	movs	r2, #3
 8001380:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Heating to Setpoint",sizeof("\r\n Heating to Setpoint"),10);
 8001382:	4919      	ldr	r1, [pc, #100]	; (80013e8 <HAL_GPIO_EXTI_Falling_Callback+0x104>)
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <HAL_GPIO_EXTI_Falling_Callback+0xf4>)
 8001386:	230a      	movs	r3, #10
 8001388:	2217      	movs	r2, #23
 800138a:	f004 fdd9 	bl	8005f40 <HAL_UART_Transmit>
			HAL_Delay(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f000 fb08 	bl	80019a4 <HAL_Delay>
			break;
 8001394:	e011      	b.n	80013ba <HAL_GPIO_EXTI_Falling_Callback+0xd6>
		case SETTLING_STATE:
			current_state = INITIALISING;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Heating turned off",sizeof("\r\n Heating turned off"),10);
 800139c:	4913      	ldr	r1, [pc, #76]	; (80013ec <HAL_GPIO_EXTI_Falling_Callback+0x108>)
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <HAL_GPIO_EXTI_Falling_Callback+0xf4>)
 80013a0:	230a      	movs	r3, #10
 80013a2:	2216      	movs	r2, #22
 80013a4:	f004 fdcc 	bl	8005f40 <HAL_UART_Transmit>
		case STEADY_STATE:
			current_state = INITIALISING;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_GPIO_EXTI_Falling_Callback+0xec>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n Heating turned off",sizeof("\r\n Heating turned off"),10);
 80013ae:	490f      	ldr	r1, [pc, #60]	; (80013ec <HAL_GPIO_EXTI_Falling_Callback+0x108>)
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <HAL_GPIO_EXTI_Falling_Callback+0xf4>)
 80013b2:	230a      	movs	r3, #10
 80013b4:	2216      	movs	r2, #22
 80013b6:	f004 fdc3 	bl	8005f40 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n HERE",sizeof("\r\n HERE"),10);
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <HAL_GPIO_EXTI_Falling_Callback+0x10c>)
 80013bc:	4806      	ldr	r0, [pc, #24]	; (80013d8 <HAL_GPIO_EXTI_Falling_Callback+0xf4>)
 80013be:	230a      	movs	r3, #10
 80013c0:	2208      	movs	r2, #8
 80013c2:	f004 fdbd 	bl	8005f40 <HAL_UART_Transmit>
		break;
 80013c6:	46c0      	nop			; (mov r8, r8)
	}
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000268 	.word	0x20000268
 80013d4:	080068ac 	.word	0x080068ac
 80013d8:	200001d4 	.word	0x200001d4
 80013dc:	080068bc 	.word	0x080068bc
 80013e0:	0800694c 	.word	0x0800694c
 80013e4:	080068c4 	.word	0x080068c4
 80013e8:	080068d4 	.word	0x080068d4
 80013ec:	080068ec 	.word	0x080068ec
 80013f0:	08006904 	.word	0x08006904

080013f4 <HAL_ADC_ConvCpltCallback>:

/**
 * Function called when buffer allocated to ADC connected to potentiometer full
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
        // Read & Update The ADC Result
    	//TIM14->CCR1 = pot_reading;
    	temp_setpoint=pot_temp();
 80013fc:	f000 f80e 	bl	800141c <pot_temp>
 8001400:	0003      	movs	r3, r0
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff fb4c 	bl	8000aa0 <__aeabi_ui2f>
 8001408:	1c02      	adds	r2, r0, #0
 800140a:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_ADC_ConvCpltCallback+0x24>)
 800140c:	601a      	str	r2, [r3, #0]
		//temp_setpoint = pot_reading * scaling;
	}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	2000026c 	.word	0x2000026c

0800141c <pot_temp>:
  @brief	converts input from potentiometer to temperature set point
  * divides maximum pot reading = 4095 by maximum allowed temperature of heating element
  * @param
  * @retval uint8_t set point temperature
 */
uint16_t pot_temp(){
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
    	uint16_t set_temp = 0;
 8001422:	1dbb      	adds	r3, r7, #6
 8001424:	2200      	movs	r2, #0
 8001426:	801a      	strh	r2, [r3, #0]
    	float scaling = MAX_ALLOWED_TEMP/POT_MAX_READING;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <pot_temp+0x40>)
 800142a:	603b      	str	r3, [r7, #0]

    	set_temp = scaling*pot_reading;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <pot_temp+0x44>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff fae7 	bl	8000a04 <__aeabi_i2f>
 8001436:	1c03      	adds	r3, r0, #0
 8001438:	6839      	ldr	r1, [r7, #0]
 800143a:	1c18      	adds	r0, r3, #0
 800143c:	f7fe ffee 	bl	800041c <__aeabi_fmul>
 8001440:	1c03      	adds	r3, r0, #0
 8001442:	1dbc      	adds	r4, r7, #6
 8001444:	1c18      	adds	r0, r3, #0
 8001446:	f7fe ff21 	bl	800028c <__aeabi_f2uiz>
 800144a:	0003      	movs	r3, r0
 800144c:	8023      	strh	r3, [r4, #0]
    	return set_temp;
 800144e:	1dbb      	adds	r3, r7, #6
 8001450:	881b      	ldrh	r3, [r3, #0]

    }
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b003      	add	sp, #12
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	3eb4cb4d 	.word	0x3eb4cb4d
 8001460:	2000026a 	.word	0x2000026a

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_MspInit+0x44>)
 8001478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_MspInit+0x44>)
 800147c:	2101      	movs	r1, #1
 800147e:	430a      	orrs	r2, r1
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_MspInit+0x44>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2201      	movs	r2, #1
 8001488:	4013      	ands	r3, r2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_MspInit+0x44>)
 8001490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_MspInit+0x44>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0549      	lsls	r1, r1, #21
 8001498:	430a      	orrs	r2, r1
 800149a:	63da      	str	r2, [r3, #60]	; 0x3c
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_MspInit+0x44>)
 800149e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	055b      	lsls	r3, r3, #21
 80014a4:	4013      	ands	r3, r2
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b091      	sub	sp, #68	; 0x44
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	232c      	movs	r3, #44	; 0x2c
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	0018      	movs	r0, r3
 80014c6:	2314      	movs	r3, #20
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f005 f92c 	bl	8006728 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	2414      	movs	r4, #20
 80014d2:	193b      	adds	r3, r7, r4
 80014d4:	0018      	movs	r0, r3
 80014d6:	2318      	movs	r3, #24
 80014d8:	001a      	movs	r2, r3
 80014da:	2100      	movs	r1, #0
 80014dc:	f005 f924 	bl	8006728 <memset>
  if(hadc->Instance==ADC1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a35      	ldr	r2, [pc, #212]	; (80015bc <HAL_ADC_MspInit+0x104>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d164      	bne.n	80015b4 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	01d2      	lsls	r2, r2, #7
 80014f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	0018      	movs	r0, r3
 80014fc:	f003 fc14 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001504:	f7ff ffae 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_ADC_MspInit+0x108>)
 800150a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <HAL_ADC_MspInit+0x108>)
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	0349      	lsls	r1, r1, #13
 8001512:	430a      	orrs	r2, r1
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_ADC_MspInit+0x108>)
 8001518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	035b      	lsls	r3, r3, #13
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_ADC_MspInit+0x108>)
 8001526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_ADC_MspInit+0x108>)
 800152a:	2101      	movs	r1, #1
 800152c:	430a      	orrs	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_ADC_MspInit+0x108>)
 8001532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001534:	2201      	movs	r2, #1
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800153c:	212c      	movs	r1, #44	; 0x2c
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2202      	movs	r2, #2
 8001542:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2203      	movs	r2, #3
 8001548:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	187a      	adds	r2, r7, r1
 8001552:	23a0      	movs	r3, #160	; 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f001 fdb5 	bl	80030c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_ADC_MspInit+0x110>)
 8001562:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 8001566:	2205      	movs	r2, #5
 8001568:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	0052      	lsls	r2, r2, #1
 8001582:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	00d2      	lsls	r2, r2, #3
 800158a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 800158e:	2220      	movs	r2, #32
 8001590:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 800159a:	0018      	movs	r0, r3
 800159c:	f001 fb42 	bl	8002c24 <HAL_DMA_Init>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80015a4:	f7ff ff5e 	bl	8001464 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 80015ac:	651a      	str	r2, [r3, #80]	; 0x50
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_ADC_MspInit+0x10c>)
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b011      	add	sp, #68	; 0x44
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	40012400 	.word	0x40012400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	2000008c 	.word	0x2000008c
 80015c8:	40020008 	.word	0x40020008

080015cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b08b      	sub	sp, #44	; 0x2c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	2414      	movs	r4, #20
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	0018      	movs	r0, r3
 80015da:	2314      	movs	r3, #20
 80015dc:	001a      	movs	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f005 f8a2 	bl	8006728 <memset>
  if(hi2c->Instance==I2C2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_I2C_MspInit+0x90>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d131      	bne.n	8001652 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_I2C_MspInit+0x94>)
 80015f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_I2C_MspInit+0x94>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	430a      	orrs	r2, r1
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_I2C_MspInit+0x94>)
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	2201      	movs	r2, #1
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001606:	193b      	adds	r3, r7, r4
 8001608:	22c0      	movs	r2, #192	; 0xc0
 800160a:	0152      	lsls	r2, r2, #5
 800160c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	0021      	movs	r1, r4
 8001610:	187b      	adds	r3, r7, r1
 8001612:	2212      	movs	r2, #18
 8001614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2206      	movs	r2, #6
 8001626:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	187a      	adds	r2, r7, r1
 800162a:	23a0      	movs	r3, #160	; 0xa0
 800162c:	05db      	lsls	r3, r3, #23
 800162e:	0011      	movs	r1, r2
 8001630:	0018      	movs	r0, r3
 8001632:	f001 fd49 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_I2C_MspInit+0x94>)
 8001638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_I2C_MspInit+0x94>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	03c9      	lsls	r1, r1, #15
 8001640:	430a      	orrs	r2, r1
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_I2C_MspInit+0x94>)
 8001646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	03db      	lsls	r3, r3, #15
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b00b      	add	sp, #44	; 0x2c
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40005800 	.word	0x40005800
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_TIM_Base_MspInit+0x60>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10e      	bne.n	8001694 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_TIM_Base_MspInit+0x64>)
 8001678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_TIM_Base_MspInit+0x64>)
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	0109      	lsls	r1, r1, #4
 8001680:	430a      	orrs	r2, r1
 8001682:	641a      	str	r2, [r3, #64]	; 0x40
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_TIM_Base_MspInit+0x64>)
 8001686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4013      	ands	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001692:	e012      	b.n	80016ba <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <HAL_TIM_Base_MspInit+0x68>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10d      	bne.n	80016ba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_TIM_Base_MspInit+0x64>)
 80016a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_TIM_Base_MspInit+0x64>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0209      	lsls	r1, r1, #8
 80016a8:	430a      	orrs	r2, r1
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_TIM_Base_MspInit+0x64>)
 80016ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40012c00 	.word	0x40012c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40002000 	.word	0x40002000

080016d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	240c      	movs	r4, #12
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	0018      	movs	r0, r3
 80016de:	2314      	movs	r3, #20
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f005 f820 	bl	8006728 <memset>
  if(htim->Instance==TIM14)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_TIM_MspPostInit+0x70>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d122      	bne.n	8001738 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_TIM_MspPostInit+0x74>)
 80016f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_TIM_MspPostInit+0x74>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_TIM_MspPostInit+0x74>)
 8001700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001702:	2201      	movs	r2, #1
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800170a:	0021      	movs	r1, r4
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2210      	movs	r2, #16
 8001710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2202      	movs	r2, #2
 8001716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2204      	movs	r2, #4
 8001728:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	187a      	adds	r2, r7, r1
 800172c:	23a0      	movs	r3, #160	; 0xa0
 800172e:	05db      	lsls	r3, r3, #23
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f001 fcc8 	bl	80030c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b009      	add	sp, #36	; 0x24
 800173e:	bd90      	pop	{r4, r7, pc}
 8001740:	40002000 	.word	0x40002000
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08b      	sub	sp, #44	; 0x2c
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	2414      	movs	r4, #20
 8001752:	193b      	adds	r3, r7, r4
 8001754:	0018      	movs	r0, r3
 8001756:	2314      	movs	r3, #20
 8001758:	001a      	movs	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	f004 ffe4 	bl	8006728 <memset>
  if(huart->Instance==USART2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_UART_MspInit+0x8c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d130      	bne.n	80017cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_UART_MspInit+0x90>)
 800176c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_UART_MspInit+0x90>)
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0289      	lsls	r1, r1, #10
 8001774:	430a      	orrs	r2, r1
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_UART_MspInit+0x90>)
 800177a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	029b      	lsls	r3, r3, #10
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_UART_MspInit+0x90>)
 8001788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_UART_MspInit+0x90>)
 800178c:	2101      	movs	r1, #1
 800178e:	430a      	orrs	r2, r1
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_UART_MspInit+0x90>)
 8001794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800179e:	0021      	movs	r1, r4
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2202      	movs	r2, #2
 80017aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2201      	movs	r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	187a      	adds	r2, r7, r1
 80017c0:	23a0      	movs	r3, #160	; 0xa0
 80017c2:	05db      	lsls	r3, r3, #23
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f001 fc7e 	bl	80030c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b00b      	add	sp, #44	; 0x2c
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	40004400 	.word	0x40004400
 80017d8:	40021000 	.word	0x40021000

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 f8b4 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800180e:	2040      	movs	r0, #64	; 0x40
 8001810:	f001 fddc 	bl	80033cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001814:	2080      	movs	r0, #128	; 0x80
 8001816:	f001 fdd9 	bl	80033cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <DMA1_Channel1_IRQHandler+0x14>)
 8001826:	0018      	movs	r0, r3
 8001828:	f001 fb0c 	bl	8002e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	2000008c 	.word	0x2000008c

08001838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001846:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001848:	f7ff fff6 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <LoopForever+0x6>)
  ldr r1, =_edata
 800184e:	490d      	ldr	r1, [pc, #52]	; (8001884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <LoopForever+0xe>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001864:	4c0a      	ldr	r4, [pc, #40]	; (8001890 <LoopForever+0x16>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001872:	f004 ff35 	bl	80066e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001876:	f7ff f973 	bl	8000b60 <main>

0800187a <LoopForever>:

LoopForever:
  b LoopForever
 800187a:	e7fe      	b.n	800187a <LoopForever>
  ldr   r0, =_estack
 800187c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001888:	08006a34 	.word	0x08006a34
  ldr r2, =_sbss
 800188c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001890:	20000274 	.word	0x20000274

08001894 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_IRQHandler>
	...

08001898 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_Init+0x3c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_Init+0x3c>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0049      	lsls	r1, r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b2:	2003      	movs	r0, #3
 80018b4:	f000 f810 	bl	80018d8 <HAL_InitTick>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018bc:	1dfb      	adds	r3, r7, #7
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e001      	b.n	80018c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fdd4 	bl	8001470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c8:	1dfb      	adds	r3, r7, #7
 80018ca:	781b      	ldrb	r3, [r3, #0]
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e0:	230f      	movs	r3, #15
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_InitTick+0x88>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d02b      	beq.n	8001948 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_InitTick+0x8c>)
 80018f2:	681c      	ldr	r4, [r3, #0]
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_InitTick+0x88>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	0019      	movs	r1, r3
 80018fa:	23fa      	movs	r3, #250	; 0xfa
 80018fc:	0098      	lsls	r0, r3, #2
 80018fe:	f7fe fbff 	bl	8000100 <__udivsi3>
 8001902:	0003      	movs	r3, r0
 8001904:	0019      	movs	r1, r3
 8001906:	0020      	movs	r0, r4
 8001908:	f7fe fbfa 	bl	8000100 <__udivsi3>
 800190c:	0003      	movs	r3, r0
 800190e:	0018      	movs	r0, r3
 8001910:	f001 f97b 	bl	8002c0a <HAL_SYSTICK_Config>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d112      	bne.n	800193e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d80a      	bhi.n	8001934 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	2301      	movs	r3, #1
 8001922:	425b      	negs	r3, r3
 8001924:	2200      	movs	r2, #0
 8001926:	0018      	movs	r0, r3
 8001928:	f001 f94a 	bl	8002bc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_InitTick+0x90>)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e00d      	b.n	8001950 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001934:	230f      	movs	r3, #15
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e008      	b.n	8001950 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800193e:	230f      	movs	r3, #15
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e003      	b.n	8001950 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001948:	230f      	movs	r3, #15
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001950:	230f      	movs	r3, #15
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	781b      	ldrb	r3, [r3, #0]
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b005      	add	sp, #20
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	20000008 	.word	0x20000008
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_IncTick+0x1c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	001a      	movs	r2, r3
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_IncTick+0x20>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	18d2      	adds	r2, r2, r3
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_IncTick+0x20>)
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	20000008 	.word	0x20000008
 800198c:	20000270 	.word	0x20000270

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <HAL_GetTick+0x10>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	20000270 	.word	0x20000270

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff fff0 	bl	8001990 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	001a      	movs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	189b      	adds	r3, r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	f7ff ffe0 	bl	8001990 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	20000008 	.word	0x20000008

080019ec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80019fc:	401a      	ands	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	fe3fffff 	.word	0xfe3fffff

08001a14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	23e0      	movs	r3, #224	; 0xe0
 8001a22:	045b      	lsls	r3, r3, #17
 8001a24:	4013      	ands	r3, r2
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	2104      	movs	r1, #4
 8001a42:	400a      	ands	r2, r1
 8001a44:	2107      	movs	r1, #7
 8001a46:	4091      	lsls	r1, r2
 8001a48:	000a      	movs	r2, r1
 8001a4a:	43d2      	mvns	r2, r2
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2104      	movs	r1, #4
 8001a52:	400b      	ands	r3, r1
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4099      	lsls	r1, r3
 8001a58:	000b      	movs	r3, r1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b004      	add	sp, #16
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	2104      	movs	r1, #4
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	2107      	movs	r1, #7
 8001a7e:	4091      	lsls	r1, r2
 8001a80:	000a      	movs	r2, r1
 8001a82:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2104      	movs	r1, #4
 8001a88:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001a8a:	40da      	lsrs	r2, r3
 8001a8c:	0013      	movs	r3, r2
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	23c0      	movs	r3, #192	; 0xc0
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	211f      	movs	r1, #31
 8001acc:	400a      	ands	r2, r1
 8001ace:	210f      	movs	r1, #15
 8001ad0:	4091      	lsls	r1, r2
 8001ad2:	000a      	movs	r2, r1
 8001ad4:	43d2      	mvns	r2, r2
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	210f      	movs	r1, #15
 8001ade:	4019      	ands	r1, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	201f      	movs	r0, #31
 8001ae4:	4003      	ands	r3, r0
 8001ae6:	4099      	lsls	r1, r3
 8001ae8:	000b      	movs	r3, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b004      	add	sp, #16
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	035b      	lsls	r3, r3, #13
 8001b0a:	0b5b      	lsrs	r3, r3, #13
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	0352      	lsls	r2, r2, #13
 8001b2c:	0b52      	lsrs	r2, r2, #13
 8001b2e:	43d2      	mvns	r2, r2
 8001b30:	401a      	ands	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	0212      	lsls	r2, r2, #8
 8001b54:	43d2      	mvns	r2, r2
 8001b56:	401a      	ands	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
 8001b60:	4904      	ldr	r1, [pc, #16]	; (8001b74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001b62:	400b      	ands	r3, r1
 8001b64:	431a      	orrs	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b004      	add	sp, #16
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	07ffff00 	.word	0x07ffff00

08001b78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <LL_ADC_EnableInternalRegulator+0x24>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	0552      	lsls	r2, r2, #21
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	6fffffe8 	.word	0x6fffffe8

08001ba0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	055b      	lsls	r3, r3, #21
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	055b      	lsls	r3, r3, #21
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d101      	bne.n	8001bbe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <LL_ADC_Enable+0x20>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2201      	movs	r2, #1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	7fffffe8 	.word	0x7fffffe8

08001bec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <LL_ADC_Disable+0x20>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	7fffffe8 	.word	0x7fffffe8

08001c10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <LL_ADC_IsEnabled+0x18>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_ADC_IsEnabled+0x1a>
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_IsDisableOngoing+0x18>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_ADC_IsDisableOngoing+0x1a>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <LL_ADC_REG_StartConversion+0x20>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	2204      	movs	r2, #4
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	7fffffe8 	.word	0x7fffffe8

08001c78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2204      	movs	r2, #4
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d101      	bne.n	8001c90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca4:	231f      	movs	r3, #31
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e17f      	b.n	8001fc2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7ff fbf3 	bl	80014b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2254      	movs	r2, #84	; 0x54
 8001cdc:	2100      	movs	r1, #0
 8001cde:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7ff ff5b 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7ff ff40 	bl	8001b78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf8:	4bb4      	ldr	r3, [pc, #720]	; (8001fcc <HAL_ADC_Init+0x330>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	49b4      	ldr	r1, [pc, #720]	; (8001fd0 <HAL_ADC_Init+0x334>)
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7fe f9fe 	bl	8000100 <__udivsi3>
 8001d04:	0003      	movs	r3, r0
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff ff3e 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d24:	1e03      	subs	r3, r0, #0
 8001d26:	d10f      	bne.n	8001d48 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	2201      	movs	r2, #1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d40:	231f      	movs	r3, #31
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff ff93 	bl	8001c78 <LL_ADC_REG_IsConversionOngoing>
 8001d52:	0003      	movs	r3, r0
 8001d54:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d000      	beq.n	8001d62 <HAL_ADC_Init+0xc6>
 8001d60:	e122      	b.n	8001fa8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d000      	beq.n	8001d6a <HAL_ADC_Init+0xce>
 8001d68:	e11e      	b.n	8001fa8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	4a99      	ldr	r2, [pc, #612]	; (8001fd4 <HAL_ADC_Init+0x338>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	2202      	movs	r2, #2
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff ff46 	bl	8001c10 <LL_ADC_IsEnabled>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d000      	beq.n	8001d8a <HAL_ADC_Init+0xee>
 8001d88:	e0ad      	b.n	8001ee6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7e1b      	ldrb	r3, [r3, #24]
 8001d92:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001d94:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7e5b      	ldrb	r3, [r3, #25]
 8001d9a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d9c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7e9b      	ldrb	r3, [r3, #26]
 8001da2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001da4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_ADC_Init+0x118>
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	015b      	lsls	r3, r3, #5
 8001db2:	e000      	b.n	8001db6 <HAL_ADC_Init+0x11a>
 8001db4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001db6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001dbc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da04      	bge.n	8001dd0 <HAL_ADC_Init+0x134>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	e001      	b.n	8001dd4 <HAL_ADC_Init+0x138>
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001dd4:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	212c      	movs	r1, #44	; 0x2c
 8001dda:	5c5b      	ldrb	r3, [r3, r1]
 8001ddc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001dde:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	5c9b      	ldrb	r3, [r3, r2]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d115      	bne.n	8001e1c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7e9b      	ldrb	r3, [r3, #26]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	0252      	lsls	r2, r2, #9
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e00b      	b.n	8001e1c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	2220      	movs	r2, #32
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2201      	movs	r2, #1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00a      	beq.n	8001e3a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e28:	23e0      	movs	r3, #224	; 0xe0
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e32:	4313      	orrs	r3, r2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a65      	ldr	r2, [pc, #404]	; (8001fd8 <HAL_ADC_Init+0x33c>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0f9b      	lsrs	r3, r3, #30
 8001e56:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	223c      	movs	r2, #60	; 0x3c
 8001e68:	5c9b      	ldrb	r3, [r3, r2]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d111      	bne.n	8001e92 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0f9b      	lsrs	r3, r3, #30
 8001e74:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001e7a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001e80:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001e86:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4a50      	ldr	r2, [pc, #320]	; (8001fdc <HAL_ADC_Init+0x340>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	23c0      	movs	r3, #192	; 0xc0
 8001eae:	061b      	lsls	r3, r3, #24
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d018      	beq.n	8001ee6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	05db      	lsls	r3, r3, #23
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d012      	beq.n	8001ee6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	061b      	lsls	r3, r3, #24
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d00c      	beq.n	8001ee6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ecc:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_ADC_Init+0x344>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a44      	ldr	r2, [pc, #272]	; (8001fe4 <HAL_ADC_Init+0x348>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	23f0      	movs	r3, #240	; 0xf0
 8001edc:	039b      	lsls	r3, r3, #14
 8001ede:	401a      	ands	r2, r3
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_ADC_Init+0x344>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eee:	001a      	movs	r2, r3
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f7ff fd9c 	bl	8001a2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	493a      	ldr	r1, [pc, #232]	; (8001fe8 <HAL_ADC_Init+0x34c>)
 8001f00:	001a      	movs	r2, r3
 8001f02:	f7ff fd94 	bl	8001a2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2110      	movs	r1, #16
 8001f1a:	4249      	negs	r1, r1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f20:	e018      	b.n	8001f54 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	039b      	lsls	r3, r3, #14
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d112      	bne.n	8001f54 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	221c      	movs	r2, #28
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2210      	movs	r2, #16
 8001f42:	4252      	negs	r2, r2
 8001f44:	409a      	lsls	r2, r3
 8001f46:	0011      	movs	r1, r2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff fd84 	bl	8001a68 <LL_ADC_GetSamplingTimeCommonChannels>
 8001f60:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d10b      	bne.n	8001f82 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	2203      	movs	r2, #3
 8001f76:	4393      	bics	r3, r2
 8001f78:	2201      	movs	r2, #1
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001f80:	e01c      	b.n	8001fbc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	2212      	movs	r2, #18
 8001f88:	4393      	bics	r3, r2
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	2201      	movs	r2, #1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001f9e:	231f      	movs	r3, #31
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fa6:	e009      	b.n	8001fbc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	2210      	movs	r2, #16
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fb4:	231f      	movs	r3, #31
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001fbc:	231f      	movs	r3, #31
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b008      	add	sp, #32
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	00030d40 	.word	0x00030d40
 8001fd4:	fffffefd 	.word	0xfffffefd
 8001fd8:	fffe0201 	.word	0xfffe0201
 8001fdc:	1ffffc02 	.word	0x1ffffc02
 8001fe0:	40012708 	.word	0x40012708
 8001fe4:	ffc3ffff 	.word	0xffc3ffff
 8001fe8:	07ffff04 	.word	0x07ffff04

08001fec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fec:	b5b0      	push	{r4, r5, r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7ff fe3b 	bl	8001c78 <LL_ADC_REG_IsConversionOngoing>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d16c      	bne.n	80020e0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2254      	movs	r2, #84	; 0x54
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ADC_Start_DMA+0x28>
 8002010:	2302      	movs	r3, #2
 8002012:	e06c      	b.n	80020ee <HAL_ADC_Start_DMA+0x102>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2254      	movs	r2, #84	; 0x54
 8002018:	2101      	movs	r1, #1
 800201a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	d113      	bne.n	8002050 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff fdef 	bl	8001c10 <LL_ADC_IsEnabled>
 8002032:	1e03      	subs	r3, r0, #0
 8002034:	d004      	beq.n	8002040 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff fdd6 	bl	8001bec <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002050:	2517      	movs	r5, #23
 8002052:	197c      	adds	r4, r7, r5
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 fa3e 	bl	80024d8 <ADC_Enable>
 800205c:	0003      	movs	r3, r0
 800205e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002060:	002c      	movs	r4, r5
 8002062:	193b      	adds	r3, r7, r4
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d13e      	bne.n	80020e8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <HAL_ADC_Start_DMA+0x10c>)
 8002070:	4013      	ands	r3, r2
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	0052      	lsls	r2, r2, #1
 8002076:	431a      	orrs	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_ADC_Start_DMA+0x110>)
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208e:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_ADC_Start_DMA+0x114>)
 8002090:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002096:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_ADC_Start_DMA+0x118>)
 8002098:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	221c      	movs	r2, #28
 80020a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2254      	movs	r2, #84	; 0x54
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2110      	movs	r1, #16
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3340      	adds	r3, #64	; 0x40
 80020c4:	0019      	movs	r1, r3
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	193c      	adds	r4, r7, r4
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f000 fe34 	bl	8002d38 <HAL_DMA_Start_IT>
 80020d0:	0003      	movs	r3, r0
 80020d2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0018      	movs	r0, r3
 80020da:	f7ff fdbb 	bl	8001c54 <LL_ADC_REG_StartConversion>
 80020de:	e003      	b.n	80020e8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020e0:	2317      	movs	r3, #23
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2202      	movs	r2, #2
 80020e6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80020e8:	2317      	movs	r3, #23
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b006      	add	sp, #24
 80020f4:	bdb0      	pop	{r4, r5, r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	fffff0fe 	.word	0xfffff0fe
 80020fc:	080026a1 	.word	0x080026a1
 8002100:	08002769 	.word	0x08002769
 8002104:	08002787 	.word	0x08002787

08002108 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002132:	2317      	movs	r3, #23
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2254      	movs	r2, #84	; 0x54
 8002142:	5c9b      	ldrb	r3, [r3, r2]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_ADC_ConfigChannel+0x24>
 8002148:	2302      	movs	r3, #2
 800214a:	e1c0      	b.n	80024ce <HAL_ADC_ConfigChannel+0x3a6>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2254      	movs	r2, #84	; 0x54
 8002150:	2101      	movs	r1, #1
 8002152:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff fd8d 	bl	8001c78 <LL_ADC_REG_IsConversionOngoing>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d000      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x3c>
 8002162:	e1a3      	b.n	80024ac <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d100      	bne.n	800216e <HAL_ADC_ConfigChannel+0x46>
 800216c:	e143      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	429a      	cmp	r2, r3
 8002178:	d004      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800217e:	4ac1      	ldr	r2, [pc, #772]	; (8002484 <HAL_ADC_ConfigChannel+0x35c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d108      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0019      	movs	r1, r3
 800218e:	0010      	movs	r0, r2
 8002190:	f7ff fcb2 	bl	8001af8 <LL_ADC_REG_SetSequencerChAdd>
 8002194:	e0c9      	b.n	800232a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	211f      	movs	r1, #31
 80021a0:	400b      	ands	r3, r1
 80021a2:	210f      	movs	r1, #15
 80021a4:	4099      	lsls	r1, r3
 80021a6:	000b      	movs	r3, r1
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	035b      	lsls	r3, r3, #13
 80021b4:	0b5b      	lsrs	r3, r3, #13
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x9c>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	221f      	movs	r2, #31
 80021c0:	4013      	ands	r3, r2
 80021c2:	e098      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d000      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0xa8>
 80021ce:	e091      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x1cc>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	d000      	beq.n	80021dc <HAL_ADC_ConfigChannel+0xb4>
 80021da:	e089      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x1c8>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	d000      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0xc0>
 80021e6:	e081      	b.n	80022ec <HAL_ADC_ConfigChannel+0x1c4>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2208      	movs	r2, #8
 80021ee:	4013      	ands	r3, r2
 80021f0:	d000      	beq.n	80021f4 <HAL_ADC_ConfigChannel+0xcc>
 80021f2:	e079      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x1c0>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2210      	movs	r2, #16
 80021fa:	4013      	ands	r3, r2
 80021fc:	d000      	beq.n	8002200 <HAL_ADC_ConfigChannel+0xd8>
 80021fe:	e071      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x1bc>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2220      	movs	r2, #32
 8002206:	4013      	ands	r3, r2
 8002208:	d000      	beq.n	800220c <HAL_ADC_ConfigChannel+0xe4>
 800220a:	e069      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x1b8>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2240      	movs	r2, #64	; 0x40
 8002212:	4013      	ands	r3, r2
 8002214:	d000      	beq.n	8002218 <HAL_ADC_ConfigChannel+0xf0>
 8002216:	e061      	b.n	80022dc <HAL_ADC_ConfigChannel+0x1b4>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	4013      	ands	r3, r2
 8002220:	d000      	beq.n	8002224 <HAL_ADC_ConfigChannel+0xfc>
 8002222:	e059      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x1b0>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d151      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1ac>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d149      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1a8>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4013      	ands	r3, r2
 8002246:	d141      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x1a4>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	4013      	ands	r3, r2
 8002252:	d139      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1a0>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	015b      	lsls	r3, r3, #5
 800225c:	4013      	ands	r3, r2
 800225e:	d131      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x19c>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	019b      	lsls	r3, r3, #6
 8002268:	4013      	ands	r3, r2
 800226a:	d129      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x198>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	01db      	lsls	r3, r3, #7
 8002274:	4013      	ands	r3, r2
 8002276:	d121      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x194>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	4013      	ands	r3, r2
 8002282:	d119      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x190>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	025b      	lsls	r3, r3, #9
 800228c:	4013      	ands	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x18c>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	4013      	ands	r3, r2
 800229a:	d109      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x188>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	02db      	lsls	r3, r3, #11
 80022a4:	4013      	ands	r3, r2
 80022a6:	d001      	beq.n	80022ac <HAL_ADC_ConfigChannel+0x184>
 80022a8:	2312      	movs	r3, #18
 80022aa:	e024      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022ac:	2300      	movs	r3, #0
 80022ae:	e022      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022b0:	2311      	movs	r3, #17
 80022b2:	e020      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022b4:	2310      	movs	r3, #16
 80022b6:	e01e      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022b8:	230f      	movs	r3, #15
 80022ba:	e01c      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022bc:	230e      	movs	r3, #14
 80022be:	e01a      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022c0:	230d      	movs	r3, #13
 80022c2:	e018      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022c4:	230c      	movs	r3, #12
 80022c6:	e016      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022c8:	230b      	movs	r3, #11
 80022ca:	e014      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022cc:	230a      	movs	r3, #10
 80022ce:	e012      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022d0:	2309      	movs	r3, #9
 80022d2:	e010      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022d4:	2308      	movs	r3, #8
 80022d6:	e00e      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022d8:	2307      	movs	r3, #7
 80022da:	e00c      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022dc:	2306      	movs	r3, #6
 80022de:	e00a      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022e0:	2305      	movs	r3, #5
 80022e2:	e008      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022e4:	2304      	movs	r3, #4
 80022e6:	e006      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022e8:	2303      	movs	r3, #3
 80022ea:	e004      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ce>
 80022f4:	2300      	movs	r3, #0
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6852      	ldr	r2, [r2, #4]
 80022fa:	201f      	movs	r0, #31
 80022fc:	4002      	ands	r2, r0
 80022fe:	4093      	lsls	r3, r2
 8002300:	000a      	movs	r2, r1
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	429a      	cmp	r2, r3
 8002316:	d808      	bhi.n	800232a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	001a      	movs	r2, r3
 8002326:	f7ff fbc7 	bl	8001ab8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	001a      	movs	r2, r3
 8002338:	f7ff fc02 	bl	8001b40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db00      	blt.n	8002346 <HAL_ADC_ConfigChannel+0x21e>
 8002344:	e0bc      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002346:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_ADC_ConfigChannel+0x360>)
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff fb63 	bl	8001a14 <LL_ADC_GetCommonPathInternalCh>
 800234e:	0003      	movs	r3, r0
 8002350:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a4d      	ldr	r2, [pc, #308]	; (800248c <HAL_ADC_ConfigChannel+0x364>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d122      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002364:	d11d      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	0412      	lsls	r2, r2, #16
 800236c:	4313      	orrs	r3, r2
 800236e:	4a46      	ldr	r2, [pc, #280]	; (8002488 <HAL_ADC_ConfigChannel+0x360>)
 8002370:	0019      	movs	r1, r3
 8002372:	0010      	movs	r0, r2
 8002374:	f7ff fb3a 	bl	80019ec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002378:	4b45      	ldr	r3, [pc, #276]	; (8002490 <HAL_ADC_ConfigChannel+0x368>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4945      	ldr	r1, [pc, #276]	; (8002494 <HAL_ADC_ConfigChannel+0x36c>)
 800237e:	0018      	movs	r0, r3
 8002380:	f7fd febe 	bl	8000100 <__udivsi3>
 8002384:	0003      	movs	r3, r0
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	0013      	movs	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	189b      	adds	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002392:	e002      	b.n	800239a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3b01      	subs	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f9      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023a0:	e08e      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a3c      	ldr	r2, [pc, #240]	; (8002498 <HAL_ADC_ConfigChannel+0x370>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d10e      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	045b      	lsls	r3, r3, #17
 80023b2:	4013      	ands	r3, r2
 80023b4:	d109      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	0452      	lsls	r2, r2, #17
 80023bc:	4313      	orrs	r3, r2
 80023be:	4a32      	ldr	r2, [pc, #200]	; (8002488 <HAL_ADC_ConfigChannel+0x360>)
 80023c0:	0019      	movs	r1, r3
 80023c2:	0010      	movs	r0, r2
 80023c4:	f7ff fb12 	bl	80019ec <LL_ADC_SetCommonPathInternalCh>
 80023c8:	e07a      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a33      	ldr	r2, [pc, #204]	; (800249c <HAL_ADC_ConfigChannel+0x374>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d000      	beq.n	80023d6 <HAL_ADC_ConfigChannel+0x2ae>
 80023d4:	e074      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	03db      	lsls	r3, r3, #15
 80023dc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80023de:	d000      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x2ba>
 80023e0:	e06e      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	03d2      	lsls	r2, r2, #15
 80023e8:	4313      	orrs	r3, r2
 80023ea:	4a27      	ldr	r2, [pc, #156]	; (8002488 <HAL_ADC_ConfigChannel+0x360>)
 80023ec:	0019      	movs	r1, r3
 80023ee:	0010      	movs	r0, r2
 80023f0:	f7ff fafc 	bl	80019ec <LL_ADC_SetCommonPathInternalCh>
 80023f4:	e064      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	429a      	cmp	r2, r3
 8002400:	d004      	beq.n	800240c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_ADC_ConfigChannel+0x35c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d107      	bne.n	800241c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0019      	movs	r1, r3
 8002416:	0010      	movs	r0, r2
 8002418:	f7ff fb7f 	bl	8001b1a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da4d      	bge.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_ADC_ConfigChannel+0x360>)
 8002426:	0018      	movs	r0, r3
 8002428:	f7ff faf4 	bl	8001a14 <LL_ADC_GetCommonPathInternalCh>
 800242c:	0003      	movs	r3, r0
 800242e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a15      	ldr	r2, [pc, #84]	; (800248c <HAL_ADC_ConfigChannel+0x364>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d108      	bne.n	800244c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <HAL_ADC_ConfigChannel+0x378>)
 800243e:	4013      	ands	r3, r2
 8002440:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_ADC_ConfigChannel+0x360>)
 8002442:	0019      	movs	r1, r3
 8002444:	0010      	movs	r0, r2
 8002446:	f7ff fad1 	bl	80019ec <LL_ADC_SetCommonPathInternalCh>
 800244a:	e039      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a11      	ldr	r2, [pc, #68]	; (8002498 <HAL_ADC_ConfigChannel+0x370>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d108      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <HAL_ADC_ConfigChannel+0x37c>)
 800245a:	4013      	ands	r3, r2
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_ADC_ConfigChannel+0x360>)
 800245e:	0019      	movs	r1, r3
 8002460:	0010      	movs	r0, r2
 8002462:	f7ff fac3 	bl	80019ec <LL_ADC_SetCommonPathInternalCh>
 8002466:	e02b      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0b      	ldr	r2, [pc, #44]	; (800249c <HAL_ADC_ConfigChannel+0x374>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d126      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <HAL_ADC_ConfigChannel+0x380>)
 8002476:	4013      	ands	r3, r2
 8002478:	4a03      	ldr	r2, [pc, #12]	; (8002488 <HAL_ADC_ConfigChannel+0x360>)
 800247a:	0019      	movs	r1, r3
 800247c:	0010      	movs	r0, r2
 800247e:	f7ff fab5 	bl	80019ec <LL_ADC_SetCommonPathInternalCh>
 8002482:	e01d      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x398>
 8002484:	80000004 	.word	0x80000004
 8002488:	40012708 	.word	0x40012708
 800248c:	b0001000 	.word	0xb0001000
 8002490:	20000000 	.word	0x20000000
 8002494:	00030d40 	.word	0x00030d40
 8002498:	b8004000 	.word	0xb8004000
 800249c:	b4002000 	.word	0xb4002000
 80024a0:	ff7fffff 	.word	0xff7fffff
 80024a4:	feffffff 	.word	0xfeffffff
 80024a8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	2220      	movs	r2, #32
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024b8:	2317      	movs	r3, #23
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2254      	movs	r2, #84	; 0x54
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80024c8:	2317      	movs	r3, #23
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b006      	add	sp, #24
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)

080024d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff fb91 	bl	8001c10 <LL_ADC_IsEnabled>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d000      	beq.n	80024f4 <ADC_Enable+0x1c>
 80024f2:	e069      	b.n	80025c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4a36      	ldr	r2, [pc, #216]	; (80025d4 <ADC_Enable+0xfc>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	d00d      	beq.n	800251c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	2210      	movs	r2, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	2201      	movs	r2, #1
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e056      	b.n	80025ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff fb51 	bl	8001bc8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <ADC_Enable+0x100>)
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff fa73 	bl	8001a14 <LL_ADC_GetCommonPathInternalCh>
 800252e:	0002      	movs	r2, r0
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	4013      	ands	r3, r2
 8002536:	d00f      	beq.n	8002558 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <ADC_Enable+0x104>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4928      	ldr	r1, [pc, #160]	; (80025e0 <ADC_Enable+0x108>)
 800253e:	0018      	movs	r0, r3
 8002540:	f7fd fdde 	bl	8000100 <__udivsi3>
 8002544:	0003      	movs	r3, r0
 8002546:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002548:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800254a:	e002      	b.n	8002552 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3b01      	subs	r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7e5b      	ldrb	r3, [r3, #25]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d033      	beq.n	80025c8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002560:	f7ff fa16 	bl	8001990 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002568:	e027      	b.n	80025ba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0018      	movs	r0, r3
 8002570:	f7ff fb4e 	bl	8001c10 <LL_ADC_IsEnabled>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d104      	bne.n	8002582 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff fb23 	bl	8001bc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002582:	f7ff fa05 	bl	8001990 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d914      	bls.n	80025ba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	4013      	ands	r3, r2
 800259a:	2b01      	cmp	r3, #1
 800259c:	d00d      	beq.n	80025ba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	2210      	movs	r2, #16
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	2201      	movs	r2, #1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e007      	b.n	80025ca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d1d0      	bne.n	800256a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	80000017 	.word	0x80000017
 80025d8:	40012708 	.word	0x40012708
 80025dc:	20000000 	.word	0x20000000
 80025e0:	00030d40 	.word	0x00030d40

080025e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fb1e 	bl	8001c32 <LL_ADC_IsDisableOngoing>
 80025f6:	0003      	movs	r3, r0
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0018      	movs	r0, r3
 8002600:	f7ff fb06 	bl	8001c10 <LL_ADC_IsEnabled>
 8002604:	1e03      	subs	r3, r0, #0
 8002606:	d046      	beq.n	8002696 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d143      	bne.n	8002696 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2205      	movs	r2, #5
 8002616:	4013      	ands	r3, r2
 8002618:	2b01      	cmp	r3, #1
 800261a:	d10d      	bne.n	8002638 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff fae3 	bl	8001bec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2203      	movs	r2, #3
 800262c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800262e:	f7ff f9af 	bl	8001990 <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002636:	e028      	b.n	800268a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	2210      	movs	r2, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	2201      	movs	r2, #1
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e021      	b.n	8002698 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002654:	f7ff f99c 	bl	8001990 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d913      	bls.n	800268a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	d00d      	beq.n	800268a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	2210      	movs	r2, #16
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2201      	movs	r2, #1
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e006      	b.n	8002698 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2201      	movs	r2, #1
 8002692:	4013      	ands	r3, r2
 8002694:	d1de      	bne.n	8002654 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b004      	add	sp, #16
 800269e:	bd80      	pop	{r7, pc}

080026a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	2250      	movs	r2, #80	; 0x50
 80026b4:	4013      	ands	r3, r2
 80026b6:	d141      	bne.n	800273c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff f9e3 	bl	8001a96 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026d0:	1e03      	subs	r3, r0, #0
 80026d2:	d02e      	beq.n	8002732 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	7e9b      	ldrb	r3, [r3, #26]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d12a      	bne.n	8002732 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2208      	movs	r2, #8
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d123      	bne.n	8002732 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7ff fac2 	bl	8001c78 <LL_ADC_REG_IsConversionOngoing>
 80026f4:	1e03      	subs	r3, r0, #0
 80026f6:	d110      	bne.n	800271a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	210c      	movs	r1, #12
 8002704:	438a      	bics	r2, r1
 8002706:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <ADC_DMAConvCplt+0xc4>)
 800270e:	4013      	ands	r3, r2
 8002710:	2201      	movs	r2, #1
 8002712:	431a      	orrs	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	659a      	str	r2, [r3, #88]	; 0x58
 8002718:	e00b      	b.n	8002732 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	2220      	movs	r2, #32
 8002720:	431a      	orrs	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	2201      	movs	r2, #1
 800272c:	431a      	orrs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	0018      	movs	r0, r3
 8002736:	f7fe fe5d 	bl	80013f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800273a:	e00f      	b.n	800275c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	2210      	movs	r2, #16
 8002742:	4013      	ands	r3, r2
 8002744:	d004      	beq.n	8002750 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	0018      	movs	r0, r3
 800274a:	f7ff fce5 	bl	8002118 <HAL_ADC_ErrorCallback>
}
 800274e:	e005      	b.n	800275c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	0010      	movs	r0, r2
 800275a:	4798      	blx	r3
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bd80      	pop	{r7, pc}
 8002764:	fffffefe 	.word	0xfffffefe

08002768 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	0018      	movs	r0, r3
 800277a:	f7ff fcc5 	bl	8002108 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b004      	add	sp, #16
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	2240      	movs	r2, #64	; 0x40
 800279a:	431a      	orrs	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	2204      	movs	r2, #4
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7ff fcb2 	bl	8002118 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}

080027bc <LL_ADC_SetCalibrationFactor>:
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	22b4      	movs	r2, #180	; 0xb4
 80027ca:	589b      	ldr	r3, [r3, r2]
 80027cc:	227f      	movs	r2, #127	; 0x7f
 80027ce:	4393      	bics	r3, r2
 80027d0:	001a      	movs	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	21b4      	movs	r1, #180	; 0xb4
 80027da:	505a      	str	r2, [r3, r1]
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <LL_ADC_GetCalibrationFactor>:
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	22b4      	movs	r2, #180	; 0xb4
 80027f0:	589b      	ldr	r3, [r3, r2]
 80027f2:	227f      	movs	r2, #127	; 0x7f
 80027f4:	4013      	ands	r3, r2
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b002      	add	sp, #8
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <LL_ADC_Enable>:
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <LL_ADC_Enable+0x20>)
 800280e:	4013      	ands	r3, r2
 8002810:	2201      	movs	r2, #1
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b002      	add	sp, #8
 800281e:	bd80      	pop	{r7, pc}
 8002820:	7fffffe8 	.word	0x7fffffe8

08002824 <LL_ADC_Disable>:
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <LL_ADC_Disable+0x20>)
 8002832:	4013      	ands	r3, r2
 8002834:	2202      	movs	r2, #2
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}
 8002844:	7fffffe8 	.word	0x7fffffe8

08002848 <LL_ADC_IsEnabled>:
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <LL_ADC_IsEnabled+0x18>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <LL_ADC_IsEnabled+0x1a>
 8002860:	2300      	movs	r3, #0
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b002      	add	sp, #8
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <LL_ADC_StartCalibration>:
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a05      	ldr	r2, [pc, #20]	; (8002890 <LL_ADC_StartCalibration+0x24>)
 800287a:	4013      	ands	r3, r2
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	0612      	lsls	r2, r2, #24
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	609a      	str	r2, [r3, #8]
}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b002      	add	sp, #8
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	7fffffe8 	.word	0x7fffffe8

08002894 <LL_ADC_IsCalibrationOnGoing>:
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	0fdb      	lsrs	r3, r3, #31
 80028a2:	07da      	lsls	r2, r3, #31
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	061b      	lsls	r3, r3, #24
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d101      	bne.n	80028b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b002      	add	sp, #8
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2254      	movs	r2, #84	; 0x54
 80028d0:	5c9b      	ldrb	r3, [r3, r2]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_ADCEx_Calibration_Start+0x1e>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0ba      	b.n	8002a50 <HAL_ADCEx_Calibration_Start+0x194>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2254      	movs	r2, #84	; 0x54
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80028e2:	2317      	movs	r3, #23
 80028e4:	18fc      	adds	r4, r7, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff fe7b 	bl	80025e4 <ADC_Disable>
 80028ee:	0003      	movs	r3, r0
 80028f0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7ff ffa6 	bl	8002848 <LL_ADC_IsEnabled>
 80028fc:	1e03      	subs	r3, r0, #0
 80028fe:	d000      	beq.n	8002902 <HAL_ADCEx_Calibration_Start+0x46>
 8002900:	e099      	b.n	8002a36 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a54      	ldr	r2, [pc, #336]	; (8002a58 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002908:	4013      	ands	r3, r2
 800290a:	2202      	movs	r2, #2
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_ADCEx_Calibration_Start+0x1a0>)
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	494d      	ldr	r1, [pc, #308]	; (8002a60 <HAL_ADCEx_Calibration_Start+0x1a4>)
 800292a:	400a      	ands	r2, r1
 800292c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e02d      	b.n	8002990 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff ff97 	bl	800286c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800293e:	e014      	b.n	800296a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	3301      	adds	r3, #1
 8002944:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4a46      	ldr	r2, [pc, #280]	; (8002a64 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d90d      	bls.n	800296a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	2212      	movs	r2, #18
 8002954:	4393      	bics	r3, r2
 8002956:	2210      	movs	r2, #16
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2254      	movs	r2, #84	; 0x54
 8002962:	2100      	movs	r1, #0
 8002964:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e072      	b.n	8002a50 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0018      	movs	r0, r3
 8002970:	f7ff ff90 	bl	8002894 <LL_ADC_IsCalibrationOnGoing>
 8002974:	1e03      	subs	r3, r0, #0
 8002976:	d1e3      	bne.n	8002940 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff ff31 	bl	80027e4 <LL_ADC_GetCalibrationFactor>
 8002982:	0002      	movs	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	189b      	adds	r3, r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b07      	cmp	r3, #7
 8002994:	d9ce      	bls.n	8002934 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002996:	69f9      	ldr	r1, [r7, #28]
 8002998:	69b8      	ldr	r0, [r7, #24]
 800299a:	f7fd fbb1 	bl	8000100 <__udivsi3>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7ff ff2a 	bl	8002800 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	0011      	movs	r1, r2
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7ff ff01 	bl	80027bc <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7ff ff30 	bl	8002824 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029c4:	f7fe ffe4 	bl	8001990 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029cc:	e01b      	b.n	8002a06 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029ce:	f7fe ffdf 	bl	8001990 <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d914      	bls.n	8002a06 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff ff31 	bl	8002848 <LL_ADC_IsEnabled>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d00d      	beq.n	8002a06 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	2210      	movs	r2, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2201      	movs	r2, #1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e024      	b.n	8002a50 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff ff1c 	bl	8002848 <LL_ADC_IsEnabled>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d1dc      	bne.n	80029ce <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	2203      	movs	r2, #3
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	; 0x58
 8002a34:	e005      	b.n	8002a42 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2254      	movs	r2, #84	; 0x54
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002a4a:	2317      	movs	r3, #23
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	781b      	ldrb	r3, [r3, #0]
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b009      	add	sp, #36	; 0x24
 8002a56:	bd90      	pop	{r4, r7, pc}
 8002a58:	fffffefd 	.word	0xfffffefd
 8002a5c:	00008003 	.word	0x00008003
 8002a60:	ffff7ffc 	.word	0xffff7ffc
 8002a64:	0002f1ff 	.word	0x0002f1ff

08002a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	0002      	movs	r2, r0
 8002a70:	1dfb      	adds	r3, r7, #7
 8002a72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	1dfb      	adds	r3, r7, #7
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b7f      	cmp	r3, #127	; 0x7f
 8002a7a:	d809      	bhi.n	8002a90 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7c:	1dfb      	adds	r3, r7, #7
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	001a      	movs	r2, r3
 8002a82:	231f      	movs	r3, #31
 8002a84:	401a      	ands	r2, r3
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <__NVIC_EnableIRQ+0x30>)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4091      	lsls	r1, r2
 8002a8c:	000a      	movs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	e000e100 	.word	0xe000e100

08002a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	1dfb      	adds	r3, r7, #7
 8002aa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b7f      	cmp	r3, #127	; 0x7f
 8002ab0:	d828      	bhi.n	8002b04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <__NVIC_SetPriority+0xd4>)
 8002ab4:	1dfb      	adds	r3, r7, #7
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	089b      	lsrs	r3, r3, #2
 8002abc:	33c0      	adds	r3, #192	; 0xc0
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	589b      	ldr	r3, [r3, r2]
 8002ac2:	1dfa      	adds	r2, r7, #7
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	2203      	movs	r2, #3
 8002aca:	400a      	ands	r2, r1
 8002acc:	00d2      	lsls	r2, r2, #3
 8002ace:	21ff      	movs	r1, #255	; 0xff
 8002ad0:	4091      	lsls	r1, r2
 8002ad2:	000a      	movs	r2, r1
 8002ad4:	43d2      	mvns	r2, r2
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	22ff      	movs	r2, #255	; 0xff
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	2303      	movs	r3, #3
 8002aea:	4003      	ands	r3, r0
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002af0:	481f      	ldr	r0, [pc, #124]	; (8002b70 <__NVIC_SetPriority+0xd4>)
 8002af2:	1dfb      	adds	r3, r7, #7
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	430a      	orrs	r2, r1
 8002afc:	33c0      	adds	r3, #192	; 0xc0
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b02:	e031      	b.n	8002b68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b04:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <__NVIC_SetPriority+0xd8>)
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	400b      	ands	r3, r1
 8002b10:	3b08      	subs	r3, #8
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3306      	adds	r3, #6
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	18d3      	adds	r3, r2, r3
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1dfa      	adds	r2, r7, #7
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	0011      	movs	r1, r2
 8002b24:	2203      	movs	r2, #3
 8002b26:	400a      	ands	r2, r1
 8002b28:	00d2      	lsls	r2, r2, #3
 8002b2a:	21ff      	movs	r1, #255	; 0xff
 8002b2c:	4091      	lsls	r1, r2
 8002b2e:	000a      	movs	r2, r1
 8002b30:	43d2      	mvns	r2, r2
 8002b32:	401a      	ands	r2, r3
 8002b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	22ff      	movs	r2, #255	; 0xff
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	0018      	movs	r0, r3
 8002b44:	2303      	movs	r3, #3
 8002b46:	4003      	ands	r3, r0
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <__NVIC_SetPriority+0xd8>)
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	001c      	movs	r4, r3
 8002b54:	230f      	movs	r3, #15
 8002b56:	4023      	ands	r3, r4
 8002b58:	3b08      	subs	r3, #8
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	3306      	adds	r3, #6
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	18c3      	adds	r3, r0, r3
 8002b64:	3304      	adds	r3, #4
 8002b66:	601a      	str	r2, [r3, #0]
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b003      	add	sp, #12
 8002b6e:	bd90      	pop	{r4, r7, pc}
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	045b      	lsls	r3, r3, #17
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d301      	bcc.n	8002b90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e010      	b.n	8002bb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <SysTick_Config+0x44>)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	3a01      	subs	r2, #1
 8002b96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b98:	2301      	movs	r3, #1
 8002b9a:	425b      	negs	r3, r3
 8002b9c:	2103      	movs	r1, #3
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff ff7c 	bl	8002a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <SysTick_Config+0x44>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <SysTick_Config+0x44>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	210f      	movs	r1, #15
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	1c02      	adds	r2, r0, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff ff5d 	bl	8002a9c <__NVIC_SetPriority>
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7ff ff33 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7ff ffaf 	bl	8002b78 <SysTick_Config>
 8002c1a:	0003      	movs	r3, r0
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b002      	add	sp, #8
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e077      	b.n	8002d26 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a3d      	ldr	r2, [pc, #244]	; (8002d30 <HAL_DMA_Init+0x10c>)
 8002c3c:	4694      	mov	ip, r2
 8002c3e:	4463      	add	r3, ip
 8002c40:	2114      	movs	r1, #20
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7fd fa5c 	bl	8000100 <__udivsi3>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	009a      	lsls	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2225      	movs	r2, #37	; 0x25
 8002c54:	2102      	movs	r1, #2
 8002c56:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4934      	ldr	r1, [pc, #208]	; (8002d34 <HAL_DMA_Init+0x110>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f9c1 	bl	8003028 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	01db      	lsls	r3, r3, #7
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d102      	bne.n	8002cb8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	213f      	movs	r1, #63	; 0x3f
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d011      	beq.n	8002cfc <HAL_DMA_Init+0xd8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d80d      	bhi.n	8002cfc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f9cc 	bl	8003080 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	e008      	b.n	8002d0e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2225      	movs	r2, #37	; 0x25
 8002d18:	2101      	movs	r1, #1
 8002d1a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	bffdfff8 	.word	0xbffdfff8
 8002d34:	ffff800f 	.word	0xffff800f

08002d38 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2317      	movs	r3, #23
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2224      	movs	r2, #36	; 0x24
 8002d52:	5c9b      	ldrb	r3, [r3, r2]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_DMA_Start_IT+0x24>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e06f      	b.n	8002e3c <HAL_DMA_Start_IT+0x104>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	2101      	movs	r1, #1
 8002d62:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2225      	movs	r2, #37	; 0x25
 8002d68:	5c9b      	ldrb	r3, [r3, r2]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d157      	bne.n	8002e20 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2225      	movs	r2, #37	; 0x25
 8002d74:	2102      	movs	r1, #2
 8002d76:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f907 	bl	8002fa8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	210e      	movs	r1, #14
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e00f      	b.n	8002dd4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	438a      	bics	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	210a      	movs	r1, #10
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	025b      	lsls	r3, r3, #9
 8002dde:	4013      	ands	r3, r2
 8002de0:	d008      	beq.n	8002df4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	0049      	lsls	r1, r1, #1
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	0049      	lsls	r1, r1, #1
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e00a      	b.n	8002e36 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2224      	movs	r2, #36	; 0x24
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002e2e:	2317      	movs	r3, #23
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002e36:	2317      	movs	r3, #23
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	781b      	ldrb	r3, [r3, #0]
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b006      	add	sp, #24
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002e4c:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <HAL_DMA_IRQHandler+0x160>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	221c      	movs	r2, #28
 8002e60:	4013      	ands	r3, r2
 8002e62:	2204      	movs	r2, #4
 8002e64:	409a      	lsls	r2, r3
 8002e66:	0013      	movs	r3, r2
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d027      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x7a>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2204      	movs	r2, #4
 8002e72:	4013      	ands	r3, r2
 8002e74:	d023      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d107      	bne.n	8002e92 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	438a      	bics	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002e92:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <HAL_DMA_IRQHandler+0x160>)
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	221c      	movs	r2, #28
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <HAL_DMA_IRQHandler+0x160>)
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d100      	bne.n	8002eb2 <HAL_DMA_IRQHandler+0x6e>
 8002eb0:	e073      	b.n	8002f9a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	0010      	movs	r0, r2
 8002eba:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002ebc:	e06d      	b.n	8002f9a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	221c      	movs	r2, #28
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	0013      	movs	r3, r2
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d02e      	beq.n	8002f30 <HAL_DMA_IRQHandler+0xec>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d02a      	beq.n	8002f30 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d10b      	bne.n	8002efe <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	210a      	movs	r1, #10
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2225      	movs	r2, #37	; 0x25
 8002efa:	2101      	movs	r1, #1
 8002efc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_DMA_IRQHandler+0x160>)
 8002f00:	6859      	ldr	r1, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	221c      	movs	r2, #28
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_DMA_IRQHandler+0x160>)
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2224      	movs	r2, #36	; 0x24
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03a      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	0010      	movs	r0, r2
 8002f2c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002f2e:	e034      	b.n	8002f9a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	221c      	movs	r2, #28
 8002f36:	4013      	ands	r3, r2
 8002f38:	2208      	movs	r2, #8
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4013      	ands	r3, r2
 8002f42:	d02b      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x158>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2208      	movs	r2, #8
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d027      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	210e      	movs	r1, #14
 8002f58:	438a      	bics	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_DMA_IRQHandler+0x160>)
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	221c      	movs	r2, #28
 8002f66:	4013      	ands	r3, r2
 8002f68:	2201      	movs	r2, #1
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_DMA_IRQHandler+0x160>)
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2225      	movs	r2, #37	; 0x25
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2224      	movs	r2, #36	; 0x24
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	0010      	movs	r0, r2
 8002f98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46c0      	nop			; (mov r8, r8)
}
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40020000 	.word	0x40020000

08002fa8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002fd0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002fd2:	4b14      	ldr	r3, [pc, #80]	; (8003024 <DMA_SetConfig+0x7c>)
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	221c      	movs	r2, #28
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2201      	movs	r2, #1
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <DMA_SetConfig+0x7c>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d108      	bne.n	800300a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003008:	e007      	b.n	800301a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	60da      	str	r2, [r3, #12]
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40020000 	.word	0x40020000

08003028 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	4a10      	ldr	r2, [pc, #64]	; (8003078 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003038:	4694      	mov	ip, r2
 800303a:	4463      	add	r3, ip
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	001a      	movs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	001a      	movs	r2, r3
 800304a:	23ff      	movs	r3, #255	; 0xff
 800304c:	4013      	ands	r3, r2
 800304e:	3b08      	subs	r3, #8
 8003050:	2114      	movs	r1, #20
 8003052:	0018      	movs	r0, r3
 8003054:	f7fd f854 	bl	8000100 <__udivsi3>
 8003058:	0003      	movs	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a07      	ldr	r2, [pc, #28]	; (800307c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003060:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	221f      	movs	r2, #31
 8003066:	4013      	ands	r3, r2
 8003068:	2201      	movs	r2, #1
 800306a:	409a      	lsls	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b004      	add	sp, #16
 8003076:	bd80      	pop	{r7, pc}
 8003078:	10008200 	.word	0x10008200
 800307c:	40020880 	.word	0x40020880

08003080 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	223f      	movs	r2, #63	; 0x3f
 800308e:	4013      	ands	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003096:	4694      	mov	ip, r2
 8003098:	4463      	add	r3, ip
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	001a      	movs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	2203      	movs	r2, #3
 80030ae:	4013      	ands	r3, r2
 80030b0:	2201      	movs	r2, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	1000823f 	.word	0x1000823f
 80030c4:	40020940 	.word	0x40020940

080030c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d6:	e147      	b.n	8003368 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2101      	movs	r1, #1
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4091      	lsls	r1, r2
 80030e2:	000a      	movs	r2, r1
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d100      	bne.n	80030f0 <HAL_GPIO_Init+0x28>
 80030ee:	e138      	b.n	8003362 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2203      	movs	r2, #3
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d005      	beq.n	8003108 <HAL_GPIO_Init+0x40>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2203      	movs	r2, #3
 8003102:	4013      	ands	r3, r2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d130      	bne.n	800316a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	409a      	lsls	r2, r3
 8003116:	0013      	movs	r3, r2
 8003118:	43da      	mvns	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	0013      	movs	r3, r2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800313e:	2201      	movs	r2, #1
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	409a      	lsls	r2, r3
 8003144:	0013      	movs	r3, r2
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	2201      	movs	r2, #1
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
 800315c:	0013      	movs	r3, r2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2203      	movs	r2, #3
 8003170:	4013      	ands	r3, r2
 8003172:	2b03      	cmp	r3, #3
 8003174:	d017      	beq.n	80031a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	409a      	lsls	r2, r3
 8003184:	0013      	movs	r3, r2
 8003186:	43da      	mvns	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	0013      	movs	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2203      	movs	r2, #3
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d123      	bne.n	80031fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	08da      	lsrs	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	0092      	lsls	r2, r2, #2
 80031bc:	58d3      	ldr	r3, [r2, r3]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2207      	movs	r2, #7
 80031c4:	4013      	ands	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	220f      	movs	r2, #15
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	43da      	mvns	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2107      	movs	r1, #7
 80031de:	400b      	ands	r3, r1
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	409a      	lsls	r2, r3
 80031e4:	0013      	movs	r3, r2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3208      	adds	r2, #8
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	6939      	ldr	r1, [r7, #16]
 80031f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	2203      	movs	r2, #3
 8003206:	409a      	lsls	r2, r3
 8003208:	0013      	movs	r3, r2
 800320a:	43da      	mvns	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2203      	movs	r2, #3
 8003218:	401a      	ands	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	23c0      	movs	r3, #192	; 0xc0
 8003234:	029b      	lsls	r3, r3, #10
 8003236:	4013      	ands	r3, r2
 8003238:	d100      	bne.n	800323c <HAL_GPIO_Init+0x174>
 800323a:	e092      	b.n	8003362 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800323c:	4a50      	ldr	r2, [pc, #320]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3318      	adds	r3, #24
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	589b      	ldr	r3, [r3, r2]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2203      	movs	r2, #3
 800324e:	4013      	ands	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	220f      	movs	r2, #15
 8003254:	409a      	lsls	r2, r3
 8003256:	0013      	movs	r3, r2
 8003258:	43da      	mvns	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	23a0      	movs	r3, #160	; 0xa0
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	429a      	cmp	r2, r3
 8003268:	d013      	beq.n	8003292 <HAL_GPIO_Init+0x1ca>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a45      	ldr	r2, [pc, #276]	; (8003384 <HAL_GPIO_Init+0x2bc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00d      	beq.n	800328e <HAL_GPIO_Init+0x1c6>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a44      	ldr	r2, [pc, #272]	; (8003388 <HAL_GPIO_Init+0x2c0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x1c2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a43      	ldr	r2, [pc, #268]	; (800338c <HAL_GPIO_Init+0x2c4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_GPIO_Init+0x1be>
 8003282:	2303      	movs	r3, #3
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x1cc>
 8003286:	2305      	movs	r3, #5
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x1cc>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x1cc>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x1cc>
 8003292:	2300      	movs	r3, #0
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	2103      	movs	r1, #3
 8003298:	400a      	ands	r2, r1
 800329a:	00d2      	lsls	r2, r2, #3
 800329c:	4093      	lsls	r3, r2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80032a4:	4936      	ldr	r1, [pc, #216]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3318      	adds	r3, #24
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032b2:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	035b      	lsls	r3, r3, #13
 80032ca:	4013      	ands	r3, r2
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	039b      	lsls	r3, r3, #14
 80032f4:	4013      	ands	r3, r2
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003306:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 8003308:	2384      	movs	r3, #132	; 0x84
 800330a:	58d3      	ldr	r3, [r2, r3]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43da      	mvns	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	4013      	ands	r3, r2
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800332c:	4914      	ldr	r1, [pc, #80]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 800332e:	2284      	movs	r2, #132	; 0x84
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003334:	4a12      	ldr	r2, [pc, #72]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	58d3      	ldr	r3, [r2, r3]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43da      	mvns	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	025b      	lsls	r3, r3, #9
 800334e:	4013      	ands	r3, r2
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800335a:	4909      	ldr	r1, [pc, #36]	; (8003380 <HAL_GPIO_Init+0x2b8>)
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3301      	adds	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	40da      	lsrs	r2, r3
 8003370:	1e13      	subs	r3, r2, #0
 8003372:	d000      	beq.n	8003376 <HAL_GPIO_Init+0x2ae>
 8003374:	e6b0      	b.n	80030d8 <HAL_GPIO_Init+0x10>
  }
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b006      	add	sp, #24
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021800 	.word	0x40021800
 8003384:	50000400 	.word	0x50000400
 8003388:	50000800 	.word	0x50000800
 800338c:	50000c00 	.word	0x50000c00

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	0008      	movs	r0, r1
 800339a:	0011      	movs	r1, r2
 800339c:	1cbb      	adds	r3, r7, #2
 800339e:	1c02      	adds	r2, r0, #0
 80033a0:	801a      	strh	r2, [r3, #0]
 80033a2:	1c7b      	adds	r3, r7, #1
 80033a4:	1c0a      	adds	r2, r1, #0
 80033a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a8:	1c7b      	adds	r3, r7, #1
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033b0:	1cbb      	adds	r3, r7, #2
 80033b2:	881a      	ldrh	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033b8:	e003      	b.n	80033c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ba:	1cbb      	adds	r3, r7, #2
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	0002      	movs	r2, r0
 80033d4:	1dbb      	adds	r3, r7, #6
 80033d6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	1dba      	adds	r2, r7, #6
 80033de:	8812      	ldrh	r2, [r2, #0]
 80033e0:	4013      	ands	r3, r2
 80033e2:	d008      	beq.n	80033f6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033e6:	1dba      	adds	r2, r7, #6
 80033e8:	8812      	ldrh	r2, [r2, #0]
 80033ea:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80033ec:	1dbb      	adds	r3, r7, #6
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 f815 	bl	8003420 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	1dba      	adds	r2, r7, #6
 80033fc:	8812      	ldrh	r2, [r2, #0]
 80033fe:	4013      	ands	r3, r2
 8003400:	d008      	beq.n	8003414 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003404:	1dba      	adds	r2, r7, #6
 8003406:	8812      	ldrh	r2, [r2, #0]
 8003408:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800340a:	1dbb      	adds	r3, r7, #6
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	0018      	movs	r0, r3
 8003410:	f7fd ff68 	bl	80012e4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	b002      	add	sp, #8
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021800 	.word	0x40021800

08003420 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	0002      	movs	r2, r0
 8003428:	1dbb      	adds	r3, r7, #6
 800342a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e082      	b.n	800354c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2241      	movs	r2, #65	; 0x41
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d107      	bne.n	8003462 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2240      	movs	r2, #64	; 0x40
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f7fe f8b5 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2241      	movs	r2, #65	; 0x41
 8003466:	2124      	movs	r1, #36	; 0x24
 8003468:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2101      	movs	r1, #1
 8003476:	438a      	bics	r2, r1
 8003478:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4934      	ldr	r1, [pc, #208]	; (8003554 <HAL_I2C_Init+0x120>)
 8003484:	400a      	ands	r2, r1
 8003486:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4931      	ldr	r1, [pc, #196]	; (8003558 <HAL_I2C_Init+0x124>)
 8003494:	400a      	ands	r2, r1
 8003496:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d108      	bne.n	80034b2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	0209      	lsls	r1, r1, #8
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e007      	b.n	80034c2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2184      	movs	r1, #132	; 0x84
 80034bc:	0209      	lsls	r1, r1, #8
 80034be:	430a      	orrs	r2, r1
 80034c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d104      	bne.n	80034d4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	491f      	ldr	r1, [pc, #124]	; (800355c <HAL_I2C_Init+0x128>)
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	491a      	ldr	r1, [pc, #104]	; (8003558 <HAL_I2C_Init+0x124>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69d9      	ldr	r1, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2241      	movs	r2, #65	; 0x41
 8003538:	2120      	movs	r1, #32
 800353a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2242      	movs	r2, #66	; 0x42
 8003546:	2100      	movs	r1, #0
 8003548:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}
 8003554:	f0ffffff 	.word	0xf0ffffff
 8003558:	ffff7fff 	.word	0xffff7fff
 800355c:	02008000 	.word	0x02008000

08003560 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	0008      	movs	r0, r1
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	0019      	movs	r1, r3
 800356e:	230a      	movs	r3, #10
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	1c02      	adds	r2, r0, #0
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	2308      	movs	r3, #8
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	1c0a      	adds	r2, r1, #0
 800357c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2241      	movs	r2, #65	; 0x41
 8003582:	5c9b      	ldrb	r3, [r3, r2]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b20      	cmp	r3, #32
 8003588:	d000      	beq.n	800358c <HAL_I2C_Master_Transmit+0x2c>
 800358a:	e0e7      	b.n	800375c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	5c9b      	ldrb	r3, [r3, r2]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_I2C_Master_Transmit+0x3a>
 8003596:	2302      	movs	r3, #2
 8003598:	e0e1      	b.n	800375e <HAL_I2C_Master_Transmit+0x1fe>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2240      	movs	r2, #64	; 0x40
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035a2:	f7fe f9f5 	bl	8001990 <HAL_GetTick>
 80035a6:	0003      	movs	r3, r0
 80035a8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	0219      	lsls	r1, r3, #8
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2319      	movs	r3, #25
 80035b6:	2201      	movs	r2, #1
 80035b8:	f000 fc24 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0cc      	b.n	800375e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2241      	movs	r2, #65	; 0x41
 80035c8:	2121      	movs	r1, #33	; 0x21
 80035ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2242      	movs	r2, #66	; 0x42
 80035d0:	2110      	movs	r1, #16
 80035d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2208      	movs	r2, #8
 80035e4:	18ba      	adds	r2, r7, r2
 80035e6:	8812      	ldrh	r2, [r2, #0]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2bff      	cmp	r3, #255	; 0xff
 80035f8:	d911      	bls.n	800361e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	22ff      	movs	r2, #255	; 0xff
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	b2da      	uxtb	r2, r3
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	045c      	lsls	r4, r3, #17
 800360a:	230a      	movs	r3, #10
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	8819      	ldrh	r1, [r3, #0]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	4b55      	ldr	r3, [pc, #340]	; (8003768 <HAL_I2C_Master_Transmit+0x208>)
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	0023      	movs	r3, r4
 8003618:	f000 fdae 	bl	8004178 <I2C_TransferConfig>
 800361c:	e075      	b.n	800370a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	b2da      	uxtb	r2, r3
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	049c      	lsls	r4, r3, #18
 8003632:	230a      	movs	r3, #10
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	8819      	ldrh	r1, [r3, #0]
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <HAL_I2C_Master_Transmit+0x208>)
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	0023      	movs	r3, r4
 8003640:	f000 fd9a 	bl	8004178 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003644:	e061      	b.n	800370a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	0018      	movs	r0, r3
 800364e:	f000 fc18 	bl	8003e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e081      	b.n	800375e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03a      	beq.n	800370a <HAL_I2C_Master_Transmit+0x1aa>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d136      	bne.n	800370a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800369c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	0013      	movs	r3, r2
 80036a6:	2200      	movs	r2, #0
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	f000 fbab 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	1e03      	subs	r3, r0, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e053      	b.n	800375e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2bff      	cmp	r3, #255	; 0xff
 80036be:	d911      	bls.n	80036e4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	045c      	lsls	r4, r3, #17
 80036d0:	230a      	movs	r3, #10
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	8819      	ldrh	r1, [r3, #0]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	2300      	movs	r3, #0
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	0023      	movs	r3, r4
 80036de:	f000 fd4b 	bl	8004178 <I2C_TransferConfig>
 80036e2:	e012      	b.n	800370a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	049c      	lsls	r4, r3, #18
 80036f8:	230a      	movs	r3, #10
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	8819      	ldrh	r1, [r3, #0]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	2300      	movs	r3, #0
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	0023      	movs	r3, r4
 8003706:	f000 fd37 	bl	8004178 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d198      	bne.n	8003646 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fbf0 	bl	8003f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e01a      	b.n	800375e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2220      	movs	r2, #32
 800372e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	490c      	ldr	r1, [pc, #48]	; (800376c <HAL_I2C_Master_Transmit+0x20c>)
 800373c:	400a      	ands	r2, r1
 800373e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2241      	movs	r2, #65	; 0x41
 8003744:	2120      	movs	r1, #32
 8003746:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2242      	movs	r2, #66	; 0x42
 800374c:	2100      	movs	r1, #0
 800374e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b007      	add	sp, #28
 8003764:	bd90      	pop	{r4, r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	80002000 	.word	0x80002000
 800376c:	fe00e800 	.word	0xfe00e800

08003770 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	000c      	movs	r4, r1
 800377a:	0010      	movs	r0, r2
 800377c:	0019      	movs	r1, r3
 800377e:	230a      	movs	r3, #10
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	1c22      	adds	r2, r4, #0
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	2308      	movs	r3, #8
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	1c02      	adds	r2, r0, #0
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	1dbb      	adds	r3, r7, #6
 8003790:	1c0a      	adds	r2, r1, #0
 8003792:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2241      	movs	r2, #65	; 0x41
 8003798:	5c9b      	ldrb	r3, [r3, r2]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	d000      	beq.n	80037a2 <HAL_I2C_Mem_Write+0x32>
 80037a0:	e10c      	b.n	80039bc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d004      	beq.n	80037b2 <HAL_I2C_Mem_Write+0x42>
 80037a8:	232c      	movs	r3, #44	; 0x2c
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d105      	bne.n	80037be <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0ff      	b.n	80039be <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	5c9b      	ldrb	r3, [r3, r2]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_I2C_Mem_Write+0x5c>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e0f8      	b.n	80039be <HAL_I2C_Mem_Write+0x24e>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	2101      	movs	r1, #1
 80037d2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037d4:	f7fe f8dc 	bl	8001990 <HAL_GetTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	0219      	lsls	r1, r3, #8
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	2319      	movs	r3, #25
 80037e8:	2201      	movs	r2, #1
 80037ea:	f000 fb0b 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0e3      	b.n	80039be <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2241      	movs	r2, #65	; 0x41
 80037fa:	2121      	movs	r1, #33	; 0x21
 80037fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2242      	movs	r2, #66	; 0x42
 8003802:	2140      	movs	r1, #64	; 0x40
 8003804:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003810:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	222c      	movs	r2, #44	; 0x2c
 8003816:	18ba      	adds	r2, r7, r2
 8003818:	8812      	ldrh	r2, [r2, #0]
 800381a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003822:	1dbb      	adds	r3, r7, #6
 8003824:	881c      	ldrh	r4, [r3, #0]
 8003826:	2308      	movs	r3, #8
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	230a      	movs	r3, #10
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	8819      	ldrh	r1, [r3, #0]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	0023      	movs	r3, r4
 800383e:	f000 f9f9 	bl	8003c34 <I2C_RequestMemoryWrite>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d005      	beq.n	8003852 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	2100      	movs	r1, #0
 800384c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0b5      	b.n	80039be <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	2bff      	cmp	r3, #255	; 0xff
 800385a:	d911      	bls.n	8003880 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	22ff      	movs	r2, #255	; 0xff
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	b2da      	uxtb	r2, r3
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	045c      	lsls	r4, r3, #17
 800386c:	230a      	movs	r3, #10
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	8819      	ldrh	r1, [r3, #0]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	2300      	movs	r3, #0
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	0023      	movs	r3, r4
 800387a:	f000 fc7d 	bl	8004178 <I2C_TransferConfig>
 800387e:	e012      	b.n	80038a6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	b2da      	uxtb	r2, r3
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	049c      	lsls	r4, r3, #18
 8003894:	230a      	movs	r3, #10
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	8819      	ldrh	r1, [r3, #0]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	2300      	movs	r3, #0
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	0023      	movs	r3, r4
 80038a2:	f000 fc69 	bl	8004178 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f000 fae8 	bl	8003e82 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e081      	b.n	80039be <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d03a      	beq.n	800396a <HAL_I2C_Mem_Write+0x1fa>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d136      	bne.n	800396a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	0013      	movs	r3, r2
 8003906:	2200      	movs	r2, #0
 8003908:	2180      	movs	r1, #128	; 0x80
 800390a:	f000 fa7b 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e053      	b.n	80039be <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2bff      	cmp	r3, #255	; 0xff
 800391e:	d911      	bls.n	8003944 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	22ff      	movs	r2, #255	; 0xff
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	b2da      	uxtb	r2, r3
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	045c      	lsls	r4, r3, #17
 8003930:	230a      	movs	r3, #10
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	8819      	ldrh	r1, [r3, #0]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	2300      	movs	r3, #0
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	0023      	movs	r3, r4
 800393e:	f000 fc1b 	bl	8004178 <I2C_TransferConfig>
 8003942:	e012      	b.n	800396a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	b2da      	uxtb	r2, r3
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	049c      	lsls	r4, r3, #18
 8003958:	230a      	movs	r3, #10
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	8819      	ldrh	r1, [r3, #0]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	2300      	movs	r3, #0
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	0023      	movs	r3, r4
 8003966:	f000 fc07 	bl	8004178 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d198      	bne.n	80038a6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	0018      	movs	r0, r3
 800397c:	f000 fac0 	bl	8003f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003980:	1e03      	subs	r3, r0, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e01a      	b.n	80039be <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2220      	movs	r2, #32
 800398e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	490b      	ldr	r1, [pc, #44]	; (80039c8 <HAL_I2C_Mem_Write+0x258>)
 800399c:	400a      	ands	r2, r1
 800399e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2241      	movs	r2, #65	; 0x41
 80039a4:	2120      	movs	r1, #32
 80039a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2242      	movs	r2, #66	; 0x42
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b007      	add	sp, #28
 80039c4:	bd90      	pop	{r4, r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	fe00e800 	.word	0xfe00e800

080039cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b089      	sub	sp, #36	; 0x24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	000c      	movs	r4, r1
 80039d6:	0010      	movs	r0, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	230a      	movs	r3, #10
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	1c22      	adds	r2, r4, #0
 80039e0:	801a      	strh	r2, [r3, #0]
 80039e2:	2308      	movs	r3, #8
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	1c02      	adds	r2, r0, #0
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	1dbb      	adds	r3, r7, #6
 80039ec:	1c0a      	adds	r2, r1, #0
 80039ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2241      	movs	r2, #65	; 0x41
 80039f4:	5c9b      	ldrb	r3, [r3, r2]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d000      	beq.n	80039fe <HAL_I2C_Mem_Read+0x32>
 80039fc:	e110      	b.n	8003c20 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_I2C_Mem_Read+0x42>
 8003a04:	232c      	movs	r3, #44	; 0x2c
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d105      	bne.n	8003a1a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e103      	b.n	8003c22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	5c9b      	ldrb	r3, [r3, r2]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_I2C_Mem_Read+0x5c>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e0fc      	b.n	8003c22 <HAL_I2C_Mem_Read+0x256>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a30:	f7fd ffae 	bl	8001990 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	0219      	lsls	r1, r3, #8
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2319      	movs	r3, #25
 8003a44:	2201      	movs	r2, #1
 8003a46:	f000 f9dd 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0e7      	b.n	8003c22 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2241      	movs	r2, #65	; 0x41
 8003a56:	2122      	movs	r1, #34	; 0x22
 8003a58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2242      	movs	r2, #66	; 0x42
 8003a5e:	2140      	movs	r1, #64	; 0x40
 8003a60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	222c      	movs	r2, #44	; 0x2c
 8003a72:	18ba      	adds	r2, r7, r2
 8003a74:	8812      	ldrh	r2, [r2, #0]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a7e:	1dbb      	adds	r3, r7, #6
 8003a80:	881c      	ldrh	r4, [r3, #0]
 8003a82:	2308      	movs	r3, #8
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	230a      	movs	r3, #10
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	8819      	ldrh	r1, [r3, #0]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	0023      	movs	r3, r4
 8003a9a:	f000 f92f 	bl	8003cfc <I2C_RequestMemoryRead>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2240      	movs	r2, #64	; 0x40
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0b9      	b.n	8003c22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2bff      	cmp	r3, #255	; 0xff
 8003ab6:	d911      	bls.n	8003adc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	045c      	lsls	r4, r3, #17
 8003ac8:	230a      	movs	r3, #10
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	8819      	ldrh	r1, [r3, #0]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <HAL_I2C_Mem_Read+0x260>)
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	0023      	movs	r3, r4
 8003ad6:	f000 fb4f 	bl	8004178 <I2C_TransferConfig>
 8003ada:	e012      	b.n	8003b02 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	049c      	lsls	r4, r3, #18
 8003af0:	230a      	movs	r3, #10
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	8819      	ldrh	r1, [r3, #0]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <HAL_I2C_Mem_Read+0x260>)
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	0023      	movs	r3, r4
 8003afe:	f000 fb3b 	bl	8004178 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	0013      	movs	r3, r2
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2104      	movs	r1, #4
 8003b10:	f000 f978 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	1e03      	subs	r3, r0, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e082      	b.n	8003c22 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d03a      	beq.n	8003bce <HAL_I2C_Mem_Read+0x202>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d136      	bne.n	8003bce <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	0013      	movs	r3, r2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	f000 f949 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e053      	b.n	8003c22 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2bff      	cmp	r3, #255	; 0xff
 8003b82:	d911      	bls.n	8003ba8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	22ff      	movs	r2, #255	; 0xff
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	045c      	lsls	r4, r3, #17
 8003b94:	230a      	movs	r3, #10
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	8819      	ldrh	r1, [r3, #0]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	0023      	movs	r3, r4
 8003ba2:	f000 fae9 	bl	8004178 <I2C_TransferConfig>
 8003ba6:	e012      	b.n	8003bce <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	049c      	lsls	r4, r3, #18
 8003bbc:	230a      	movs	r3, #10
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	8819      	ldrh	r1, [r3, #0]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	0023      	movs	r3, r4
 8003bca:	f000 fad5 	bl	8004178 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d194      	bne.n	8003b02 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f98e 	bl	8003f00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e01a      	b.n	8003c22 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	490c      	ldr	r1, [pc, #48]	; (8003c30 <HAL_I2C_Mem_Read+0x264>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2241      	movs	r2, #65	; 0x41
 8003c08:	2120      	movs	r1, #32
 8003c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2242      	movs	r2, #66	; 0x42
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2240      	movs	r2, #64	; 0x40
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b007      	add	sp, #28
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	80002400 	.word	0x80002400
 8003c30:	fe00e800 	.word	0xfe00e800

08003c34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c34:	b5b0      	push	{r4, r5, r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	000c      	movs	r4, r1
 8003c3e:	0010      	movs	r0, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	250a      	movs	r5, #10
 8003c44:	197b      	adds	r3, r7, r5
 8003c46:	1c22      	adds	r2, r4, #0
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	1c02      	adds	r2, r0, #0
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	1dbb      	adds	r3, r7, #6
 8003c54:	1c0a      	adds	r2, r1, #0
 8003c56:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c58:	1dbb      	adds	r3, r7, #6
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	045c      	lsls	r4, r3, #17
 8003c62:	197b      	adds	r3, r7, r5
 8003c64:	8819      	ldrh	r1, [r3, #0]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <I2C_RequestMemoryWrite+0xc4>)
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	0023      	movs	r3, r4
 8003c6e:	f000 fa83 	bl	8004178 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	6a39      	ldr	r1, [r7, #32]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f000 f902 	bl	8003e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c7e:	1e03      	subs	r3, r0, #0
 8003c80:	d001      	beq.n	8003c86 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e033      	b.n	8003cee <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c86:	1dbb      	adds	r3, r7, #6
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8e:	2308      	movs	r3, #8
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c9c:	e019      	b.n	8003cd2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	6a39      	ldr	r1, [r7, #32]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 f8e3 	bl	8003e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e014      	b.n	8003cee <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	0013      	movs	r3, r2
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	f000 f890 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	1e03      	subs	r3, r0, #0
 8003ce6:	d001      	beq.n	8003cec <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b004      	add	sp, #16
 8003cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	80002000 	.word	0x80002000

08003cfc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003cfc:	b5b0      	push	{r4, r5, r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	000c      	movs	r4, r1
 8003d06:	0010      	movs	r0, r2
 8003d08:	0019      	movs	r1, r3
 8003d0a:	250a      	movs	r5, #10
 8003d0c:	197b      	adds	r3, r7, r5
 8003d0e:	1c22      	adds	r2, r4, #0
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	2308      	movs	r3, #8
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	1c02      	adds	r2, r0, #0
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	1dbb      	adds	r3, r7, #6
 8003d1c:	1c0a      	adds	r2, r1, #0
 8003d1e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d20:	1dbb      	adds	r3, r7, #6
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	197b      	adds	r3, r7, r5
 8003d28:	8819      	ldrh	r1, [r3, #0]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <I2C_RequestMemoryRead+0xc0>)
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	f000 fa21 	bl	8004178 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	6a39      	ldr	r1, [r7, #32]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f000 f8a0 	bl	8003e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d42:	1e03      	subs	r3, r0, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e033      	b.n	8003db2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d4a:	1dbb      	adds	r3, r7, #6
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d107      	bne.n	8003d62 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d52:	2308      	movs	r3, #8
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d60:	e019      	b.n	8003d96 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d62:	2308      	movs	r3, #8
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d76:	6a39      	ldr	r1, [r7, #32]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f000 f881 	bl	8003e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d001      	beq.n	8003d88 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e014      	b.n	8003db2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d88:	2308      	movs	r3, #8
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a3a      	ldr	r2, [r7, #32]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	0013      	movs	r3, r2
 8003da0:	2200      	movs	r2, #0
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	f000 f82e 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d001      	beq.n	8003db0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	80002000 	.word	0x80002000

08003dc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d103      	bne.n	8003dde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2201      	movs	r2, #1
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d007      	beq.n	8003dfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2101      	movs	r1, #1
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	619a      	str	r2, [r3, #24]
  }
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	1dfb      	adds	r3, r7, #7
 8003e12:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	e021      	b.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	d01e      	beq.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1c:	f7fd fdb8 	bl	8001990 <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d302      	bcc.n	8003e32 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d113      	bne.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	2220      	movs	r2, #32
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2241      	movs	r2, #65	; 0x41
 8003e42:	2120      	movs	r1, #32
 8003e44:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2242      	movs	r2, #66	; 0x42
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2240      	movs	r2, #64	; 0x40
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00f      	b.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	425a      	negs	r2, r3
 8003e6a:	4153      	adcs	r3, r2
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	001a      	movs	r2, r3
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d0ce      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b004      	add	sp, #16
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e8e:	e02b      	b.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	0018      	movs	r0, r3
 8003e98:	f000 f86e 	bl	8003f78 <I2C_IsErrorOccurred>
 8003e9c:	1e03      	subs	r3, r0, #0
 8003e9e:	d001      	beq.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e029      	b.n	8003ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	d01e      	beq.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eaa:	f7fd fd71 	bl	8001990 <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d302      	bcc.n	8003ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d113      	bne.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2241      	movs	r2, #65	; 0x41
 8003ed0:	2120      	movs	r1, #32
 8003ed2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2242      	movs	r2, #66	; 0x42
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e007      	b.n	8003ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d1cc      	bne.n	8003e90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f0c:	e028      	b.n	8003f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f000 f82f 	bl	8003f78 <I2C_IsErrorOccurred>
 8003f1a:	1e03      	subs	r3, r0, #0
 8003f1c:	d001      	beq.n	8003f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e026      	b.n	8003f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f22:	f7fd fd35 	bl	8001990 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d302      	bcc.n	8003f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d113      	bne.n	8003f60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2241      	movs	r2, #65	; 0x41
 8003f48:	2120      	movs	r1, #32
 8003f4a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2242      	movs	r2, #66	; 0x42
 8003f50:	2100      	movs	r1, #0
 8003f52:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2240      	movs	r2, #64	; 0x40
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e007      	b.n	8003f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2220      	movs	r2, #32
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d1cf      	bne.n	8003f0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b004      	add	sp, #16
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b08b      	sub	sp, #44	; 0x2c
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f84:	2327      	movs	r3, #39	; 0x27
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <I2C_IsErrorOccurred+0x2e>
 8003fa4:	e082      	b.n	80040ac <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2210      	movs	r2, #16
 8003fac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fae:	e060      	b.n	8004072 <I2C_IsErrorOccurred+0xfa>
 8003fb0:	2427      	movs	r4, #39	; 0x27
 8003fb2:	193b      	adds	r3, r7, r4
 8003fb4:	193a      	adds	r2, r7, r4
 8003fb6:	7812      	ldrb	r2, [r2, #0]
 8003fb8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	d058      	beq.n	8004072 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7fd fce6 	bl	8001990 <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d306      	bcc.n	8003fde <I2C_IsErrorOccurred+0x66>
 8003fd0:	193b      	adds	r3, r7, r4
 8003fd2:	193a      	adds	r2, r7, r4
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d149      	bne.n	8004072 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	01db      	lsls	r3, r3, #7
 8003fe8:	4013      	ands	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fec:	2013      	movs	r0, #19
 8003fee:	183b      	adds	r3, r7, r0
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	2142      	movs	r1, #66	; 0x42
 8003ff4:	5c52      	ldrb	r2, [r2, r1]
 8003ff6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	401a      	ands	r2, r3
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	429a      	cmp	r2, r3
 800400a:	d126      	bne.n	800405a <I2C_IsErrorOccurred+0xe2>
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	01db      	lsls	r3, r3, #7
 8004012:	429a      	cmp	r2, r3
 8004014:	d021      	beq.n	800405a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004016:	183b      	adds	r3, r7, r0
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b20      	cmp	r3, #32
 800401c:	d01d      	beq.n	800405a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	01c9      	lsls	r1, r1, #7
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004030:	f7fd fcae 	bl	8001990 <HAL_GetTick>
 8004034:	0003      	movs	r3, r0
 8004036:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004038:	e00f      	b.n	800405a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800403a:	f7fd fca9 	bl	8001990 <HAL_GetTick>
 800403e:	0002      	movs	r2, r0
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b19      	cmp	r3, #25
 8004046:	d908      	bls.n	800405a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	2220      	movs	r2, #32
 800404c:	4313      	orrs	r3, r2
 800404e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004050:	2327      	movs	r3, #39	; 0x27
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2201      	movs	r2, #1
 8004056:	701a      	strb	r2, [r3, #0]

              break;
 8004058:	e00b      	b.n	8004072 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2220      	movs	r2, #32
 8004062:	4013      	ands	r3, r2
 8004064:	2127      	movs	r1, #39	; 0x27
 8004066:	187a      	adds	r2, r7, r1
 8004068:	1879      	adds	r1, r7, r1
 800406a:	7809      	ldrb	r1, [r1, #0]
 800406c:	7011      	strb	r1, [r2, #0]
 800406e:	2b20      	cmp	r3, #32
 8004070:	d1e3      	bne.n	800403a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2220      	movs	r2, #32
 800407a:	4013      	ands	r3, r2
 800407c:	2b20      	cmp	r3, #32
 800407e:	d004      	beq.n	800408a <I2C_IsErrorOccurred+0x112>
 8004080:	2327      	movs	r3, #39	; 0x27
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d092      	beq.n	8003fb0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800408a:	2327      	movs	r3, #39	; 0x27
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d103      	bne.n	800409c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2220      	movs	r2, #32
 800409a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2204      	movs	r2, #4
 80040a0:	4313      	orrs	r3, r2
 80040a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040a4:	2327      	movs	r3, #39	; 0x27
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4013      	ands	r3, r2
 80040bc:	d00c      	beq.n	80040d8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	0052      	lsls	r2, r2, #1
 80040ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040d0:	2327      	movs	r3, #39	; 0x27
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4013      	ands	r3, r2
 80040e0:	d00c      	beq.n	80040fc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2208      	movs	r2, #8
 80040e6:	4313      	orrs	r3, r2
 80040e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	00d2      	lsls	r2, r2, #3
 80040f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040f4:	2327      	movs	r3, #39	; 0x27
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	2380      	movs	r3, #128	; 0x80
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4013      	ands	r3, r2
 8004104:	d00c      	beq.n	8004120 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	2202      	movs	r2, #2
 800410a:	4313      	orrs	r3, r2
 800410c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	0092      	lsls	r2, r2, #2
 8004116:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004118:	2327      	movs	r3, #39	; 0x27
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004120:	2327      	movs	r3, #39	; 0x27
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01d      	beq.n	8004166 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fe47 	bl	8003dc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	490d      	ldr	r1, [pc, #52]	; (8004174 <I2C_IsErrorOccurred+0x1fc>)
 800413e:	400a      	ands	r2, r1
 8004140:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2241      	movs	r2, #65	; 0x41
 8004152:	2120      	movs	r1, #32
 8004154:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2242      	movs	r2, #66	; 0x42
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004166:	2327      	movs	r3, #39	; 0x27
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	781b      	ldrb	r3, [r3, #0]
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b00b      	add	sp, #44	; 0x2c
 8004172:	bd90      	pop	{r4, r7, pc}
 8004174:	fe00e800 	.word	0xfe00e800

08004178 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	0008      	movs	r0, r1
 8004182:	0011      	movs	r1, r2
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	240a      	movs	r4, #10
 8004188:	193b      	adds	r3, r7, r4
 800418a:	1c02      	adds	r2, r0, #0
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	2009      	movs	r0, #9
 8004190:	183b      	adds	r3, r7, r0
 8004192:	1c0a      	adds	r2, r1, #0
 8004194:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004196:	193b      	adds	r3, r7, r4
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	059b      	lsls	r3, r3, #22
 800419c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800419e:	183b      	adds	r3, r7, r0
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	0419      	lsls	r1, r3, #16
 80041a4:	23ff      	movs	r3, #255	; 0xff
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041aa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	4313      	orrs	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c2:	0d51      	lsrs	r1, r2, #21
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	00d2      	lsls	r2, r2, #3
 80041c8:	400a      	ands	r2, r1
 80041ca:	4907      	ldr	r1, [pc, #28]	; (80041e8 <I2C_TransferConfig+0x70>)
 80041cc:	430a      	orrs	r2, r1
 80041ce:	43d2      	mvns	r2, r2
 80041d0:	401a      	ands	r2, r3
 80041d2:	0011      	movs	r1, r2
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b007      	add	sp, #28
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	03ff63ff 	.word	0x03ff63ff

080041ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2241      	movs	r2, #65	; 0x41
 80041fa:	5c9b      	ldrb	r3, [r3, r2]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d138      	bne.n	8004274 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2240      	movs	r2, #64	; 0x40
 8004206:	5c9b      	ldrb	r3, [r3, r2]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800420c:	2302      	movs	r3, #2
 800420e:	e032      	b.n	8004276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	2101      	movs	r1, #1
 8004216:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2241      	movs	r2, #65	; 0x41
 800421c:	2124      	movs	r1, #36	; 0x24
 800421e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2101      	movs	r1, #1
 800422c:	438a      	bics	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4911      	ldr	r1, [pc, #68]	; (8004280 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800423c:	400a      	ands	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2101      	movs	r1, #1
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2241      	movs	r2, #65	; 0x41
 8004264:	2120      	movs	r1, #32
 8004266:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b002      	add	sp, #8
 800427c:	bd80      	pop	{r7, pc}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	ffffefff 	.word	0xffffefff

08004284 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2241      	movs	r2, #65	; 0x41
 8004292:	5c9b      	ldrb	r3, [r3, r2]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b20      	cmp	r3, #32
 8004298:	d139      	bne.n	800430e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	5c9b      	ldrb	r3, [r3, r2]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e033      	b.n	8004310 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2240      	movs	r2, #64	; 0x40
 80042ac:	2101      	movs	r1, #1
 80042ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2241      	movs	r2, #65	; 0x41
 80042b4:	2124      	movs	r1, #36	; 0x24
 80042b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2101      	movs	r1, #1
 80042c4:	438a      	bics	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a11      	ldr	r2, [pc, #68]	; (8004318 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2101      	movs	r1, #1
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2241      	movs	r2, #65	; 0x41
 80042fe:	2120      	movs	r1, #32
 8004300:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2240      	movs	r2, #64	; 0x40
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800430e:	2302      	movs	r3, #2
  }
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b004      	add	sp, #16
 8004316:	bd80      	pop	{r7, pc}
 8004318:	fffff0ff 	.word	0xfffff0ff

0800431c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800432a:	4013      	ands	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	4b17      	ldr	r3, [pc, #92]	; (800438c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	430a      	orrs	r2, r1
 8004334:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	429a      	cmp	r2, r3
 800433e:	d11f      	bne.n	8004380 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	0013      	movs	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	189b      	adds	r3, r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4912      	ldr	r1, [pc, #72]	; (8004398 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800434e:	0018      	movs	r0, r3
 8004350:	f7fb fed6 	bl	8000100 <__udivsi3>
 8004354:	0003      	movs	r3, r0
 8004356:	3301      	adds	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800435a:	e008      	b.n	800436e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3b01      	subs	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e001      	b.n	800436e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e009      	b.n	8004382 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	401a      	ands	r2, r3
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	429a      	cmp	r2, r3
 800437e:	d0ed      	beq.n	800435c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b004      	add	sp, #16
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	40007000 	.word	0x40007000
 8004390:	fffff9ff 	.word	0xfffff9ff
 8004394:	20000000 	.word	0x20000000
 8004398:	000f4240 	.word	0x000f4240

0800439c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	23e0      	movs	r3, #224	; 0xe0
 80043a6:	01db      	lsls	r3, r3, #7
 80043a8:	4013      	ands	r3, r2
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40021000 	.word	0x40021000

080043b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e2f3      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2201      	movs	r2, #1
 80043cc:	4013      	ands	r3, r2
 80043ce:	d100      	bne.n	80043d2 <HAL_RCC_OscConfig+0x1e>
 80043d0:	e07c      	b.n	80044cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	4bc3      	ldr	r3, [pc, #780]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2238      	movs	r2, #56	; 0x38
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043dc:	4bc0      	ldr	r3, [pc, #768]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2203      	movs	r2, #3
 80043e2:	4013      	ands	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d102      	bne.n	80043f2 <HAL_RCC_OscConfig+0x3e>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d10b      	bne.n	8004410 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f8:	4bb9      	ldr	r3, [pc, #740]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	4013      	ands	r3, r2
 8004402:	d062      	beq.n	80044ca <HAL_RCC_OscConfig+0x116>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d15e      	bne.n	80044ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e2ce      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	025b      	lsls	r3, r3, #9
 8004418:	429a      	cmp	r2, r3
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x78>
 800441c:	4bb0      	ldr	r3, [pc, #704]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4baf      	ldr	r3, [pc, #700]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0249      	lsls	r1, r1, #9
 8004426:	430a      	orrs	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e020      	b.n	800446e <HAL_RCC_OscConfig+0xba>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	23a0      	movs	r3, #160	; 0xa0
 8004432:	02db      	lsls	r3, r3, #11
 8004434:	429a      	cmp	r2, r3
 8004436:	d10e      	bne.n	8004456 <HAL_RCC_OscConfig+0xa2>
 8004438:	4ba9      	ldr	r3, [pc, #676]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4ba8      	ldr	r3, [pc, #672]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800443e:	2180      	movs	r1, #128	; 0x80
 8004440:	02c9      	lsls	r1, r1, #11
 8004442:	430a      	orrs	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	4ba6      	ldr	r3, [pc, #664]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4ba5      	ldr	r3, [pc, #660]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0249      	lsls	r1, r1, #9
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e00b      	b.n	800446e <HAL_RCC_OscConfig+0xba>
 8004456:	4ba2      	ldr	r3, [pc, #648]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4ba1      	ldr	r3, [pc, #644]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800445c:	49a1      	ldr	r1, [pc, #644]	; (80046e4 <HAL_RCC_OscConfig+0x330>)
 800445e:	400a      	ands	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	4b9f      	ldr	r3, [pc, #636]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b9e      	ldr	r3, [pc, #632]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004468:	499f      	ldr	r1, [pc, #636]	; (80046e8 <HAL_RCC_OscConfig+0x334>)
 800446a:	400a      	ands	r2, r1
 800446c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d014      	beq.n	80044a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fd fa8b 	bl	8001990 <HAL_GetTick>
 800447a:	0003      	movs	r3, r0
 800447c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004480:	f7fd fa86 	bl	8001990 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e28d      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004492:	4b93      	ldr	r3, [pc, #588]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	029b      	lsls	r3, r3, #10
 800449a:	4013      	ands	r3, r2
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0xcc>
 800449e:	e015      	b.n	80044cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd fa76 	bl	8001990 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044aa:	f7fd fa71 	bl	8001990 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	; 0x64
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e278      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044bc:	4b88      	ldr	r3, [pc, #544]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	029b      	lsls	r3, r3, #10
 80044c4:	4013      	ands	r3, r2
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0xf6>
 80044c8:	e000      	b.n	80044cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2202      	movs	r2, #2
 80044d2:	4013      	ands	r3, r2
 80044d4:	d100      	bne.n	80044d8 <HAL_RCC_OscConfig+0x124>
 80044d6:	e099      	b.n	800460c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d8:	4b81      	ldr	r3, [pc, #516]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2238      	movs	r2, #56	; 0x38
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e2:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2203      	movs	r2, #3
 80044e8:	4013      	ands	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_OscConfig+0x144>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d002      	beq.n	80044fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d135      	bne.n	800456a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044fe:	4b78      	ldr	r3, [pc, #480]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4013      	ands	r3, r2
 8004508:	d005      	beq.n	8004516 <HAL_RCC_OscConfig+0x162>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e24b      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004516:	4b72      	ldr	r3, [pc, #456]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4a74      	ldr	r2, [pc, #464]	; (80046ec <HAL_RCC_OscConfig+0x338>)
 800451c:	4013      	ands	r3, r2
 800451e:	0019      	movs	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	021a      	lsls	r2, r3, #8
 8004526:	4b6e      	ldr	r3, [pc, #440]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d112      	bne.n	8004558 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004532:	4b6b      	ldr	r3, [pc, #428]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6e      	ldr	r2, [pc, #440]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004546:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	0adb      	lsrs	r3, r3, #11
 800454c:	2207      	movs	r2, #7
 800454e:	4013      	ands	r3, r2
 8004550:	4a68      	ldr	r2, [pc, #416]	; (80046f4 <HAL_RCC_OscConfig+0x340>)
 8004552:	40da      	lsrs	r2, r3
 8004554:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_RCC_OscConfig+0x344>)
 8004556:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004558:	4b68      	ldr	r3, [pc, #416]	; (80046fc <HAL_RCC_OscConfig+0x348>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0018      	movs	r0, r3
 800455e:	f7fd f9bb 	bl	80018d8 <HAL_InitTick>
 8004562:	1e03      	subs	r3, r0, #0
 8004564:	d051      	beq.n	800460a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e221      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d030      	beq.n	80045d4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004572:	4b5b      	ldr	r3, [pc, #364]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a5e      	ldr	r2, [pc, #376]	; (80046f0 <HAL_RCC_OscConfig+0x33c>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	4b57      	ldr	r3, [pc, #348]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004586:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b55      	ldr	r3, [pc, #340]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	0049      	lsls	r1, r1, #1
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd f9fc 	bl	8001990 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800459e:	f7fd f9f7 	bl	8001990 <HAL_GetTick>
 80045a2:	0002      	movs	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e1fe      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b0:	4b4b      	ldr	r3, [pc, #300]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4013      	ands	r3, r2
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045bc:	4b48      	ldr	r3, [pc, #288]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a4a      	ldr	r2, [pc, #296]	; (80046ec <HAL_RCC_OscConfig+0x338>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	0019      	movs	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	021a      	lsls	r2, r3, #8
 80045cc:	4b44      	ldr	r3, [pc, #272]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e01b      	b.n	800460c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80045d4:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80045da:	4949      	ldr	r1, [pc, #292]	; (8004700 <HAL_RCC_OscConfig+0x34c>)
 80045dc:	400a      	ands	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fd f9d6 	bl	8001990 <HAL_GetTick>
 80045e4:	0003      	movs	r3, r0
 80045e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fd f9d1 	bl	8001990 <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1d8      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045fc:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4013      	ands	r3, r2
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x236>
 8004608:	e000      	b.n	800460c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2208      	movs	r2, #8
 8004612:	4013      	ands	r3, r2
 8004614:	d047      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004616:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2238      	movs	r2, #56	; 0x38
 800461c:	4013      	ands	r3, r2
 800461e:	2b18      	cmp	r3, #24
 8004620:	d10a      	bne.n	8004638 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004622:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004626:	2202      	movs	r2, #2
 8004628:	4013      	ands	r3, r2
 800462a:	d03c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2f2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d138      	bne.n	80046a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e1ba      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d019      	beq.n	8004674 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004642:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004646:	2101      	movs	r1, #1
 8004648:	430a      	orrs	r2, r1
 800464a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd f9a0 	bl	8001990 <HAL_GetTick>
 8004650:	0003      	movs	r3, r0
 8004652:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004656:	f7fd f99b 	bl	8001990 <HAL_GetTick>
 800465a:	0002      	movs	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e1a2      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800466a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466c:	2202      	movs	r2, #2
 800466e:	4013      	ands	r3, r2
 8004670:	d0f1      	beq.n	8004656 <HAL_RCC_OscConfig+0x2a2>
 8004672:	e018      	b.n	80046a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 8004676:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800467a:	2101      	movs	r1, #1
 800467c:	438a      	bics	r2, r1
 800467e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd f986 	bl	8001990 <HAL_GetTick>
 8004684:	0003      	movs	r3, r0
 8004686:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468a:	f7fd f981 	bl	8001990 <HAL_GetTick>
 800468e:	0002      	movs	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e188      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	2202      	movs	r2, #2
 80046a2:	4013      	ands	r3, r2
 80046a4:	d1f1      	bne.n	800468a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2204      	movs	r2, #4
 80046ac:	4013      	ands	r3, r2
 80046ae:	d100      	bne.n	80046b2 <HAL_RCC_OscConfig+0x2fe>
 80046b0:	e0c6      	b.n	8004840 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b2:	231f      	movs	r3, #31
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2238      	movs	r2, #56	; 0x38
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d11e      	bne.n	8004704 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_RCC_OscConfig+0x32c>)
 80046c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ca:	2202      	movs	r2, #2
 80046cc:	4013      	ands	r3, r2
 80046ce:	d100      	bne.n	80046d2 <HAL_RCC_OscConfig+0x31e>
 80046d0:	e0b6      	b.n	8004840 <HAL_RCC_OscConfig+0x48c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d000      	beq.n	80046dc <HAL_RCC_OscConfig+0x328>
 80046da:	e0b1      	b.n	8004840 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e166      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
 80046e0:	40021000 	.word	0x40021000
 80046e4:	fffeffff 	.word	0xfffeffff
 80046e8:	fffbffff 	.word	0xfffbffff
 80046ec:	ffff80ff 	.word	0xffff80ff
 80046f0:	ffffc7ff 	.word	0xffffc7ff
 80046f4:	00f42400 	.word	0x00f42400
 80046f8:	20000000 	.word	0x20000000
 80046fc:	20000004 	.word	0x20000004
 8004700:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004704:	4bac      	ldr	r3, [pc, #688]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	055b      	lsls	r3, r3, #21
 800470c:	4013      	ands	r3, r2
 800470e:	d101      	bne.n	8004714 <HAL_RCC_OscConfig+0x360>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x362>
 8004714:	2300      	movs	r3, #0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d011      	beq.n	800473e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	4ba7      	ldr	r3, [pc, #668]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800471c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471e:	4ba6      	ldr	r3, [pc, #664]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	0549      	lsls	r1, r1, #21
 8004724:	430a      	orrs	r2, r1
 8004726:	63da      	str	r2, [r3, #60]	; 0x3c
 8004728:	4ba3      	ldr	r3, [pc, #652]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800472a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	055b      	lsls	r3, r3, #21
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004736:	231f      	movs	r3, #31
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	2201      	movs	r2, #1
 800473c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473e:	4b9f      	ldr	r3, [pc, #636]	; (80049bc <HAL_RCC_OscConfig+0x608>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4013      	ands	r3, r2
 8004748:	d11a      	bne.n	8004780 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800474a:	4b9c      	ldr	r3, [pc, #624]	; (80049bc <HAL_RCC_OscConfig+0x608>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b9b      	ldr	r3, [pc, #620]	; (80049bc <HAL_RCC_OscConfig+0x608>)
 8004750:	2180      	movs	r1, #128	; 0x80
 8004752:	0049      	lsls	r1, r1, #1
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004758:	f7fd f91a 	bl	8001990 <HAL_GetTick>
 800475c:	0003      	movs	r3, r0
 800475e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004762:	f7fd f915 	bl	8001990 <HAL_GetTick>
 8004766:	0002      	movs	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e11c      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004774:	4b91      	ldr	r3, [pc, #580]	; (80049bc <HAL_RCC_OscConfig+0x608>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4013      	ands	r3, r2
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d106      	bne.n	8004796 <HAL_RCC_OscConfig+0x3e2>
 8004788:	4b8b      	ldr	r3, [pc, #556]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800478a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800478c:	4b8a      	ldr	r3, [pc, #552]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800478e:	2101      	movs	r1, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	65da      	str	r2, [r3, #92]	; 0x5c
 8004794:	e01c      	b.n	80047d0 <HAL_RCC_OscConfig+0x41c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b05      	cmp	r3, #5
 800479c:	d10c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x404>
 800479e:	4b86      	ldr	r3, [pc, #536]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047a2:	4b85      	ldr	r3, [pc, #532]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047a4:	2104      	movs	r1, #4
 80047a6:	430a      	orrs	r2, r1
 80047a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80047aa:	4b83      	ldr	r3, [pc, #524]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047ae:	4b82      	ldr	r3, [pc, #520]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047b0:	2101      	movs	r1, #1
 80047b2:	430a      	orrs	r2, r1
 80047b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80047b6:	e00b      	b.n	80047d0 <HAL_RCC_OscConfig+0x41c>
 80047b8:	4b7f      	ldr	r3, [pc, #508]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047bc:	4b7e      	ldr	r3, [pc, #504]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047be:	2101      	movs	r1, #1
 80047c0:	438a      	bics	r2, r1
 80047c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80047c4:	4b7c      	ldr	r3, [pc, #496]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047c8:	4b7b      	ldr	r3, [pc, #492]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047ca:	2104      	movs	r1, #4
 80047cc:	438a      	bics	r2, r1
 80047ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d014      	beq.n	8004802 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fd f8da 	bl	8001990 <HAL_GetTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e0:	e009      	b.n	80047f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fd f8d5 	bl	8001990 <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	4a74      	ldr	r2, [pc, #464]	; (80049c0 <HAL_RCC_OscConfig+0x60c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e0db      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f6:	4b70      	ldr	r3, [pc, #448]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80047f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fa:	2202      	movs	r2, #2
 80047fc:	4013      	ands	r3, r2
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x42e>
 8004800:	e013      	b.n	800482a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fd f8c5 	bl	8001990 <HAL_GetTick>
 8004806:	0003      	movs	r3, r0
 8004808:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800480a:	e009      	b.n	8004820 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fd f8c0 	bl	8001990 <HAL_GetTick>
 8004810:	0002      	movs	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	4a6a      	ldr	r2, [pc, #424]	; (80049c0 <HAL_RCC_OscConfig+0x60c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0c6      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004820:	4b65      	ldr	r3, [pc, #404]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004824:	2202      	movs	r2, #2
 8004826:	4013      	ands	r3, r2
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800482a:	231f      	movs	r3, #31
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d105      	bne.n	8004840 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004834:	4b60      	ldr	r3, [pc, #384]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004838:	4b5f      	ldr	r3, [pc, #380]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800483a:	4962      	ldr	r1, [pc, #392]	; (80049c4 <HAL_RCC_OscConfig+0x610>)
 800483c:	400a      	ands	r2, r1
 800483e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d100      	bne.n	800484a <HAL_RCC_OscConfig+0x496>
 8004848:	e0b0      	b.n	80049ac <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484a:	4b5b      	ldr	r3, [pc, #364]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2238      	movs	r2, #56	; 0x38
 8004850:	4013      	ands	r3, r2
 8004852:	2b10      	cmp	r3, #16
 8004854:	d100      	bne.n	8004858 <HAL_RCC_OscConfig+0x4a4>
 8004856:	e078      	b.n	800494a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d153      	bne.n	8004908 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004860:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b54      	ldr	r3, [pc, #336]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004866:	4958      	ldr	r1, [pc, #352]	; (80049c8 <HAL_RCC_OscConfig+0x614>)
 8004868:	400a      	ands	r2, r1
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fd f890 	bl	8001990 <HAL_GetTick>
 8004870:	0003      	movs	r3, r0
 8004872:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fd f88b 	bl	8001990 <HAL_GetTick>
 800487a:	0002      	movs	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e092      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004888:	4b4b      	ldr	r3, [pc, #300]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	049b      	lsls	r3, r3, #18
 8004890:	4013      	ands	r3, r2
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004894:	4b48      	ldr	r3, [pc, #288]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4a4c      	ldr	r2, [pc, #304]	; (80049cc <HAL_RCC_OscConfig+0x618>)
 800489a:	4013      	ands	r3, r2
 800489c:	0019      	movs	r1, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1a      	ldr	r2, [r3, #32]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	431a      	orrs	r2, r3
 80048bc:	4b3e      	ldr	r3, [pc, #248]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80048be:	430a      	orrs	r2, r1
 80048c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c2:	4b3d      	ldr	r3, [pc, #244]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b3c      	ldr	r3, [pc, #240]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	0449      	lsls	r1, r1, #17
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	4b38      	ldr	r3, [pc, #224]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	0549      	lsls	r1, r1, #21
 80048da:	430a      	orrs	r2, r1
 80048dc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048de:	f7fd f857 	bl	8001990 <HAL_GetTick>
 80048e2:	0003      	movs	r3, r0
 80048e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fd f852 	bl	8001990 <HAL_GetTick>
 80048ec:	0002      	movs	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e059      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fa:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	049b      	lsls	r3, r3, #18
 8004902:	4013      	ands	r3, r2
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x534>
 8004906:	e051      	b.n	80049ac <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004908:	4b2b      	ldr	r3, [pc, #172]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800490e:	492e      	ldr	r1, [pc, #184]	; (80049c8 <HAL_RCC_OscConfig+0x614>)
 8004910:	400a      	ands	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd f83c 	bl	8001990 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491e:	f7fd f837 	bl	8001990 <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e03e      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004930:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	049b      	lsls	r3, r3, #18
 8004938:	4013      	ands	r3, r2
 800493a:	d1f0      	bne.n	800491e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800493c:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004942:	4923      	ldr	r1, [pc, #140]	; (80049d0 <HAL_RCC_OscConfig+0x61c>)
 8004944:	400a      	ands	r2, r1
 8004946:	60da      	str	r2, [r3, #12]
 8004948:	e030      	b.n	80049ac <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e02b      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004956:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <HAL_RCC_OscConfig+0x604>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2203      	movs	r2, #3
 8004960:	401a      	ands	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	429a      	cmp	r2, r3
 8004968:	d11e      	bne.n	80049a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2270      	movs	r2, #112	; 0x70
 800496e:	401a      	ands	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d117      	bne.n	80049a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	23fe      	movs	r3, #254	; 0xfe
 800497c:	01db      	lsls	r3, r3, #7
 800497e:	401a      	ands	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d10e      	bne.n	80049a8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	23f8      	movs	r3, #248	; 0xf8
 800498e:	039b      	lsls	r3, r3, #14
 8004990:	401a      	ands	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d106      	bne.n	80049a8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	0f5b      	lsrs	r3, r3, #29
 800499e:	075a      	lsls	r2, r3, #29
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b008      	add	sp, #32
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40007000 	.word	0x40007000
 80049c0:	00001388 	.word	0x00001388
 80049c4:	efffffff 	.word	0xefffffff
 80049c8:	feffffff 	.word	0xfeffffff
 80049cc:	1fc1808c 	.word	0x1fc1808c
 80049d0:	effefffc 	.word	0xeffefffc

080049d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0e9      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e8:	4b76      	ldr	r3, [pc, #472]	; (8004bc4 <HAL_RCC_ClockConfig+0x1f0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2207      	movs	r2, #7
 80049ee:	4013      	ands	r3, r2
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d91e      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f6:	4b73      	ldr	r3, [pc, #460]	; (8004bc4 <HAL_RCC_ClockConfig+0x1f0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2207      	movs	r2, #7
 80049fc:	4393      	bics	r3, r2
 80049fe:	0019      	movs	r1, r3
 8004a00:	4b70      	ldr	r3, [pc, #448]	; (8004bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a08:	f7fc ffc2 	bl	8001990 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a10:	e009      	b.n	8004a26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a12:	f7fc ffbd 	bl	8001990 <HAL_GetTick>
 8004a16:	0002      	movs	r2, r0
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	4a6a      	ldr	r2, [pc, #424]	; (8004bc8 <HAL_RCC_ClockConfig+0x1f4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e0ca      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a26:	4b67      	ldr	r3, [pc, #412]	; (8004bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2207      	movs	r2, #7
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1ee      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d015      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2204      	movs	r2, #4
 8004a44:	4013      	ands	r3, r2
 8004a46:	d006      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a48:	4b60      	ldr	r3, [pc, #384]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	4b5f      	ldr	r3, [pc, #380]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004a4e:	21e0      	movs	r1, #224	; 0xe0
 8004a50:	01c9      	lsls	r1, r1, #7
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a56:	4b5d      	ldr	r3, [pc, #372]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4a5d      	ldr	r2, [pc, #372]	; (8004bd0 <HAL_RCC_ClockConfig+0x1fc>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004a66:	430a      	orrs	r2, r1
 8004a68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4013      	ands	r3, r2
 8004a72:	d057      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	029b      	lsls	r3, r3, #10
 8004a84:	4013      	ands	r3, r2
 8004a86:	d12b      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e097      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a94:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	049b      	lsls	r3, r3, #18
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d11f      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e08b      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aac:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d113      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e07f      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ac4:	4b41      	ldr	r3, [pc, #260]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	2202      	movs	r2, #2
 8004aca:	4013      	ands	r3, r2
 8004acc:	d108      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e074      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad2:	4b3e      	ldr	r3, [pc, #248]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e06d      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ae0:	4b3a      	ldr	r3, [pc, #232]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	4393      	bics	r3, r2
 8004ae8:	0019      	movs	r1, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	4b37      	ldr	r3, [pc, #220]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004af0:	430a      	orrs	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fc ff4c 	bl	8001990 <HAL_GetTick>
 8004af8:	0003      	movs	r3, r0
 8004afa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afc:	e009      	b.n	8004b12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afe:	f7fc ff47 	bl	8001990 <HAL_GetTick>
 8004b02:	0002      	movs	r2, r0
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	4a2f      	ldr	r2, [pc, #188]	; (8004bc8 <HAL_RCC_ClockConfig+0x1f4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e054      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2e      	ldr	r3, [pc, #184]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2238      	movs	r2, #56	; 0x38
 8004b18:	401a      	ands	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1ec      	bne.n	8004afe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2207      	movs	r2, #7
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d21e      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2207      	movs	r2, #7
 8004b38:	4393      	bics	r3, r2
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b44:	f7fc ff24 	bl	8001990 <HAL_GetTick>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b4c:	e009      	b.n	8004b62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4e:	f7fc ff1f 	bl	8001990 <HAL_GetTick>
 8004b52:	0002      	movs	r2, r0
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	4a1b      	ldr	r2, [pc, #108]	; (8004bc8 <HAL_RCC_ClockConfig+0x1f4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e02c      	b.n	8004bbc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b62:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2207      	movs	r2, #7
 8004b68:	4013      	ands	r3, r2
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1ee      	bne.n	8004b4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2204      	movs	r2, #4
 8004b76:	4013      	ands	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_RCC_ClockConfig+0x200>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004b8e:	f000 f829 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004b92:	0001      	movs	r1, r0
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <HAL_RCC_ClockConfig+0x1f8>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	220f      	movs	r2, #15
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <HAL_RCC_ClockConfig+0x204>)
 8004ba0:	0092      	lsls	r2, r2, #2
 8004ba2:	58d3      	ldr	r3, [r2, r3]
 8004ba4:	221f      	movs	r2, #31
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	000a      	movs	r2, r1
 8004baa:	40da      	lsrs	r2, r3
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCC_ClockConfig+0x208>)
 8004bae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCC_ClockConfig+0x20c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7fc fe8f 	bl	80018d8 <HAL_InitTick>
 8004bba:	0003      	movs	r3, r0
}
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b004      	add	sp, #16
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40022000 	.word	0x40022000
 8004bc8:	00001388 	.word	0x00001388
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	fffff0ff 	.word	0xfffff0ff
 8004bd4:	ffff8fff 	.word	0xffff8fff
 8004bd8:	08006960 	.word	0x08006960
 8004bdc:	20000000 	.word	0x20000000
 8004be0:	20000004 	.word	0x20000004

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bea:	4b3c      	ldr	r3, [pc, #240]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2238      	movs	r2, #56	; 0x38
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d10f      	bne.n	8004c14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004bf4:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	0adb      	lsrs	r3, r3, #11
 8004bfa:	2207      	movs	r2, #7
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2201      	movs	r2, #1
 8004c00:	409a      	lsls	r2, r3
 8004c02:	0013      	movs	r3, r2
 8004c04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	4835      	ldr	r0, [pc, #212]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c0a:	f7fb fa79 	bl	8000100 <__udivsi3>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	e05d      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c14:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2238      	movs	r2, #56	; 0x38
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d102      	bne.n	8004c26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c20:	4b30      	ldr	r3, [pc, #192]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	e054      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c26:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2238      	movs	r2, #56	; 0x38
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d138      	bne.n	8004ca4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c32:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2203      	movs	r2, #3
 8004c38:	4013      	ands	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	2207      	movs	r2, #7
 8004c44:	4013      	ands	r3, r2
 8004c46:	3301      	adds	r3, #1
 8004c48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4824      	ldr	r0, [pc, #144]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c54:	f7fb fa54 	bl	8000100 <__udivsi3>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	0a1b      	lsrs	r3, r3, #8
 8004c62:	227f      	movs	r2, #127	; 0x7f
 8004c64:	4013      	ands	r3, r2
 8004c66:	434b      	muls	r3, r1
 8004c68:	617b      	str	r3, [r7, #20]
        break;
 8004c6a:	e00d      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	481c      	ldr	r0, [pc, #112]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c70:	f7fb fa46 	bl	8000100 <__udivsi3>
 8004c74:	0003      	movs	r3, r0
 8004c76:	0019      	movs	r1, r3
 8004c78:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	227f      	movs	r2, #127	; 0x7f
 8004c80:	4013      	ands	r3, r2
 8004c82:	434b      	muls	r3, r1
 8004c84:	617b      	str	r3, [r7, #20]
        break;
 8004c86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004c88:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	0f5b      	lsrs	r3, r3, #29
 8004c8e:	2207      	movs	r2, #7
 8004c90:	4013      	ands	r3, r2
 8004c92:	3301      	adds	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	6978      	ldr	r0, [r7, #20]
 8004c9a:	f7fb fa31 	bl	8000100 <__udivsi3>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e015      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2238      	movs	r2, #56	; 0x38
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d103      	bne.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004cb8:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2238      	movs	r2, #56	; 0x38
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b18      	cmp	r3, #24
 8004cc2:	d103      	bne.n	8004ccc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004cc4:	23fa      	movs	r3, #250	; 0xfa
 8004cc6:	01db      	lsls	r3, r3, #7
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	e001      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004cd0:	693b      	ldr	r3, [r7, #16]
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b006      	add	sp, #24
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	00f42400 	.word	0x00f42400
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b02      	ldr	r3, [pc, #8]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	20000000 	.word	0x20000000

08004cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cfc:	b5b0      	push	{r4, r5, r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d00:	f7ff fff2 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d04:	0004      	movs	r4, r0
 8004d06:	f7ff fb49 	bl	800439c <LL_RCC_GetAPB1Prescaler>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	0b1a      	lsrs	r2, r3, #12
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d10:	0092      	lsls	r2, r2, #2
 8004d12:	58d3      	ldr	r3, [r2, r3]
 8004d14:	221f      	movs	r2, #31
 8004d16:	4013      	ands	r3, r2
 8004d18:	40dc      	lsrs	r4, r3
 8004d1a:	0023      	movs	r3, r4
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bdb0      	pop	{r4, r5, r7, pc}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	080069a0 	.word	0x080069a0

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004d30:	2313      	movs	r3, #19
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d38:	2312      	movs	r3, #18
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	029b      	lsls	r3, r3, #10
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004d4c:	e0a3      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4e:	2011      	movs	r0, #17
 8004d50:	183b      	adds	r3, r7, r0
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d56:	4b7f      	ldr	r3, [pc, #508]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	055b      	lsls	r3, r3, #21
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d110      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d62:	4b7c      	ldr	r3, [pc, #496]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d66:	4b7b      	ldr	r3, [pc, #492]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d68:	2180      	movs	r1, #128	; 0x80
 8004d6a:	0549      	lsls	r1, r1, #21
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d70:	4b78      	ldr	r3, [pc, #480]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	055b      	lsls	r3, r3, #21
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d7e:	183b      	adds	r3, r7, r0
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d84:	4b74      	ldr	r3, [pc, #464]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b73      	ldr	r3, [pc, #460]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	0049      	lsls	r1, r1, #1
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d92:	f7fc fdfd 	bl	8001990 <HAL_GetTick>
 8004d96:	0003      	movs	r3, r0
 8004d98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d9a:	e00b      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9c:	f7fc fdf8 	bl	8001990 <HAL_GetTick>
 8004da0:	0002      	movs	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d904      	bls.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004daa:	2313      	movs	r3, #19
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	2203      	movs	r2, #3
 8004db0:	701a      	strb	r2, [r3, #0]
        break;
 8004db2:	e005      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d0ed      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004dc0:	2313      	movs	r3, #19
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d154      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dca:	4b62      	ldr	r3, [pc, #392]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dce:	23c0      	movs	r3, #192	; 0xc0
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d019      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d014      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004de6:	4b5b      	ldr	r3, [pc, #364]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dea:	4a5c      	ldr	r2, [pc, #368]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004df0:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004df4:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	0249      	lsls	r1, r1, #9
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dfe:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e02:	4b54      	ldr	r3, [pc, #336]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e04:	4956      	ldr	r1, [pc, #344]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004e06:	400a      	ands	r2, r1
 8004e08:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e0a:	4b52      	ldr	r3, [pc, #328]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2201      	movs	r2, #1
 8004e14:	4013      	ands	r3, r2
 8004e16:	d016      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fc fdba 	bl	8001990 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e20:	e00c      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fc fdb5 	bl	8001990 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	4a4d      	ldr	r2, [pc, #308]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d904      	bls.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004e32:	2313      	movs	r3, #19
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	2203      	movs	r2, #3
 8004e38:	701a      	strb	r2, [r3, #0]
            break;
 8004e3a:	e004      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e3c:	4b45      	ldr	r3, [pc, #276]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e40:	2202      	movs	r2, #2
 8004e42:	4013      	ands	r3, r2
 8004e44:	d0ed      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004e46:	2313      	movs	r3, #19
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e50:	4b40      	ldr	r3, [pc, #256]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	4a41      	ldr	r2, [pc, #260]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	0019      	movs	r1, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e60:	430a      	orrs	r2, r1
 8004e62:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e64:	e00c      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e66:	2312      	movs	r3, #18
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	2213      	movs	r2, #19
 8004e6c:	18ba      	adds	r2, r7, r2
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e005      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	2312      	movs	r3, #18
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2213      	movs	r2, #19
 8004e7a:	18ba      	adds	r2, r7, r2
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e80:	2311      	movs	r3, #17
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e8a:	4b32      	ldr	r3, [pc, #200]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8e:	4b31      	ldr	r3, [pc, #196]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e90:	4935      	ldr	r1, [pc, #212]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea0:	4b2c      	ldr	r3, [pc, #176]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	4393      	bics	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ebe:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	4b21      	ldr	r3, [pc, #132]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	01db      	lsls	r3, r3, #7
 8004eda:	4013      	ands	r3, r2
 8004edc:	d015      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ede:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	0899      	lsrs	r1, r3, #2
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004eec:	430a      	orrs	r2, r1
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	05db      	lsls	r3, r3, #23
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d106      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	0249      	lsls	r1, r1, #9
 8004f06:	430a      	orrs	r2, r1
 8004f08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	4013      	ands	r3, r2
 8004f14:	d016      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f16:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f26:	430a      	orrs	r2, r1
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	01db      	lsls	r3, r3, #7
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d106      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f36:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	0249      	lsls	r1, r1, #9
 8004f40:	430a      	orrs	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f44:	2312      	movs	r3, #18
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	781b      	ldrb	r3, [r3, #0]
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b006      	add	sp, #24
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	fffffcff 	.word	0xfffffcff
 8004f60:	fffeffff 	.word	0xfffeffff
 8004f64:	00001388 	.word	0x00001388
 8004f68:	efffffff 	.word	0xefffffff
 8004f6c:	ffffcfff 	.word	0xffffcfff
 8004f70:	ffff3fff 	.word	0xffff3fff

08004f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e04a      	b.n	800501c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	223d      	movs	r2, #61	; 0x3d
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	223c      	movs	r2, #60	; 0x3c
 8004f96:	2100      	movs	r1, #0
 8004f98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fc fb61 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	223d      	movs	r2, #61	; 0x3d
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	f000 fb43 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2248      	movs	r2, #72	; 0x48
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	223e      	movs	r2, #62	; 0x3e
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	223f      	movs	r2, #63	; 0x3f
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2240      	movs	r2, #64	; 0x40
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	5499      	strb	r1, [r3, r2]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2241      	movs	r2, #65	; 0x41
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2242      	movs	r2, #66	; 0x42
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2243      	movs	r2, #67	; 0x43
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2244      	movs	r2, #68	; 0x44
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2245      	movs	r2, #69	; 0x45
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2246      	movs	r2, #70	; 0x46
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2247      	movs	r2, #71	; 0x47
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	223d      	movs	r2, #61	; 0x3d
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	0018      	movs	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	b002      	add	sp, #8
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e04a      	b.n	80050cc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	223d      	movs	r2, #61	; 0x3d
 800503a:	5c9b      	ldrb	r3, [r3, r2]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	223c      	movs	r2, #60	; 0x3c
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	0018      	movs	r0, r3
 800504e:	f000 f841 	bl	80050d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	223d      	movs	r2, #61	; 0x3d
 8005056:	2102      	movs	r1, #2
 8005058:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3304      	adds	r3, #4
 8005062:	0019      	movs	r1, r3
 8005064:	0010      	movs	r0, r2
 8005066:	f000 faeb 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2248      	movs	r2, #72	; 0x48
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	223e      	movs	r2, #62	; 0x3e
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	223f      	movs	r2, #63	; 0x3f
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2240      	movs	r2, #64	; 0x40
 8005086:	2101      	movs	r1, #1
 8005088:	5499      	strb	r1, [r3, r2]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2241      	movs	r2, #65	; 0x41
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2242      	movs	r2, #66	; 0x42
 8005096:	2101      	movs	r1, #1
 8005098:	5499      	strb	r1, [r3, r2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2243      	movs	r2, #67	; 0x43
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2244      	movs	r2, #68	; 0x44
 80050a6:	2101      	movs	r1, #1
 80050a8:	5499      	strb	r1, [r3, r2]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2245      	movs	r2, #69	; 0x45
 80050ae:	2101      	movs	r1, #1
 80050b0:	5499      	strb	r1, [r3, r2]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2246      	movs	r2, #70	; 0x46
 80050b6:	2101      	movs	r1, #1
 80050b8:	5499      	strb	r1, [r3, r2]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2247      	movs	r2, #71	; 0x47
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	223d      	movs	r2, #61	; 0x3d
 80050c6:	2101      	movs	r1, #1
 80050c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b002      	add	sp, #8
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d108      	bne.n	8005106 <HAL_TIM_PWM_Start+0x22>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	223e      	movs	r2, #62	; 0x3e
 80050f8:	5c9b      	ldrb	r3, [r3, r2]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	1e5a      	subs	r2, r3, #1
 8005100:	4193      	sbcs	r3, r2
 8005102:	b2db      	uxtb	r3, r3
 8005104:	e037      	b.n	8005176 <HAL_TIM_PWM_Start+0x92>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d108      	bne.n	800511e <HAL_TIM_PWM_Start+0x3a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	223f      	movs	r2, #63	; 0x3f
 8005110:	5c9b      	ldrb	r3, [r3, r2]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	4193      	sbcs	r3, r2
 800511a:	b2db      	uxtb	r3, r3
 800511c:	e02b      	b.n	8005176 <HAL_TIM_PWM_Start+0x92>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d108      	bne.n	8005136 <HAL_TIM_PWM_Start+0x52>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2240      	movs	r2, #64	; 0x40
 8005128:	5c9b      	ldrb	r3, [r3, r2]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	1e5a      	subs	r2, r3, #1
 8005130:	4193      	sbcs	r3, r2
 8005132:	b2db      	uxtb	r3, r3
 8005134:	e01f      	b.n	8005176 <HAL_TIM_PWM_Start+0x92>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b0c      	cmp	r3, #12
 800513a:	d108      	bne.n	800514e <HAL_TIM_PWM_Start+0x6a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2241      	movs	r2, #65	; 0x41
 8005140:	5c9b      	ldrb	r3, [r3, r2]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	1e5a      	subs	r2, r3, #1
 8005148:	4193      	sbcs	r3, r2
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e013      	b.n	8005176 <HAL_TIM_PWM_Start+0x92>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b10      	cmp	r3, #16
 8005152:	d108      	bne.n	8005166 <HAL_TIM_PWM_Start+0x82>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2242      	movs	r2, #66	; 0x42
 8005158:	5c9b      	ldrb	r3, [r3, r2]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	1e5a      	subs	r2, r3, #1
 8005160:	4193      	sbcs	r3, r2
 8005162:	b2db      	uxtb	r3, r3
 8005164:	e007      	b.n	8005176 <HAL_TIM_PWM_Start+0x92>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2243      	movs	r2, #67	; 0x43
 800516a:	5c9b      	ldrb	r3, [r3, r2]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	1e5a      	subs	r2, r3, #1
 8005172:	4193      	sbcs	r3, r2
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e07b      	b.n	8005276 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <HAL_TIM_PWM_Start+0xaa>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	223e      	movs	r2, #62	; 0x3e
 8005188:	2102      	movs	r1, #2
 800518a:	5499      	strb	r1, [r3, r2]
 800518c:	e023      	b.n	80051d6 <HAL_TIM_PWM_Start+0xf2>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d104      	bne.n	800519e <HAL_TIM_PWM_Start+0xba>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	223f      	movs	r2, #63	; 0x3f
 8005198:	2102      	movs	r1, #2
 800519a:	5499      	strb	r1, [r3, r2]
 800519c:	e01b      	b.n	80051d6 <HAL_TIM_PWM_Start+0xf2>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_PWM_Start+0xca>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2240      	movs	r2, #64	; 0x40
 80051a8:	2102      	movs	r1, #2
 80051aa:	5499      	strb	r1, [r3, r2]
 80051ac:	e013      	b.n	80051d6 <HAL_TIM_PWM_Start+0xf2>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0xda>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2241      	movs	r2, #65	; 0x41
 80051b8:	2102      	movs	r1, #2
 80051ba:	5499      	strb	r1, [r3, r2]
 80051bc:	e00b      	b.n	80051d6 <HAL_TIM_PWM_Start+0xf2>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_PWM_Start+0xea>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2242      	movs	r2, #66	; 0x42
 80051c8:	2102      	movs	r1, #2
 80051ca:	5499      	strb	r1, [r3, r2]
 80051cc:	e003      	b.n	80051d6 <HAL_TIM_PWM_Start+0xf2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2243      	movs	r2, #67	; 0x43
 80051d2:	2102      	movs	r1, #2
 80051d4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	2201      	movs	r2, #1
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 fdd2 	bl	8005d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a25      	ldr	r2, [pc, #148]	; (8005280 <HAL_TIM_PWM_Start+0x19c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d009      	beq.n	8005202 <HAL_TIM_PWM_Start+0x11e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a24      	ldr	r2, [pc, #144]	; (8005284 <HAL_TIM_PWM_Start+0x1a0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_TIM_PWM_Start+0x11e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a22      	ldr	r2, [pc, #136]	; (8005288 <HAL_TIM_PWM_Start+0x1a4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <HAL_TIM_PWM_Start+0x122>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <HAL_TIM_PWM_Start+0x124>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2180      	movs	r1, #128	; 0x80
 8005218:	0209      	lsls	r1, r1, #8
 800521a:	430a      	orrs	r2, r1
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a17      	ldr	r2, [pc, #92]	; (8005280 <HAL_TIM_PWM_Start+0x19c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d004      	beq.n	8005232 <HAL_TIM_PWM_Start+0x14e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a17      	ldr	r2, [pc, #92]	; (800528c <HAL_TIM_PWM_Start+0x1a8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d116      	bne.n	8005260 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a15      	ldr	r2, [pc, #84]	; (8005290 <HAL_TIM_PWM_Start+0x1ac>)
 800523a:	4013      	ands	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b06      	cmp	r3, #6
 8005242:	d016      	beq.n	8005272 <HAL_TIM_PWM_Start+0x18e>
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	2380      	movs	r3, #128	; 0x80
 8005248:	025b      	lsls	r3, r3, #9
 800524a:	429a      	cmp	r2, r3
 800524c:	d011      	beq.n	8005272 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2101      	movs	r1, #1
 800525a:	430a      	orrs	r2, r1
 800525c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525e:	e008      	b.n	8005272 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2101      	movs	r1, #1
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e000      	b.n	8005274 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005272:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b004      	add	sp, #16
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	40012c00 	.word	0x40012c00
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800
 800528c:	40000400 	.word	0x40000400
 8005290:	00010007 	.word	0x00010007

08005294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	2317      	movs	r3, #23
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	223c      	movs	r2, #60	; 0x3c
 80052ac:	5c9b      	ldrb	r3, [r3, r2]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e0e5      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	223c      	movs	r2, #60	; 0x3c
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b14      	cmp	r3, #20
 80052c2:	d900      	bls.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80052c4:	e0d1      	b.n	800546a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	009a      	lsls	r2, r3, #2
 80052ca:	4b70      	ldr	r3, [pc, #448]	; (800548c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	0011      	movs	r1, r2
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 fa1c 	bl	8005718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2108      	movs	r1, #8
 80052ec:	430a      	orrs	r2, r1
 80052ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2104      	movs	r1, #4
 80052fc:	438a      	bics	r2, r1
 80052fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6999      	ldr	r1, [r3, #24]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	619a      	str	r2, [r3, #24]
      break;
 8005312:	e0af      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	0011      	movs	r1, r2
 800531c:	0018      	movs	r0, r3
 800531e:	f000 fa7b 	bl	8005818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699a      	ldr	r2, [r3, #24]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2180      	movs	r1, #128	; 0x80
 800532e:	0109      	lsls	r1, r1, #4
 8005330:	430a      	orrs	r2, r1
 8005332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4954      	ldr	r1, [pc, #336]	; (8005490 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005340:	400a      	ands	r2, r1
 8005342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6999      	ldr	r1, [r3, #24]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	619a      	str	r2, [r3, #24]
      break;
 8005358:	e08c      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	0011      	movs	r1, r2
 8005362:	0018      	movs	r0, r3
 8005364:	f000 fad6 	bl	8005914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2108      	movs	r1, #8
 8005374:	430a      	orrs	r2, r1
 8005376:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2104      	movs	r1, #4
 8005384:	438a      	bics	r2, r1
 8005386:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69d9      	ldr	r1, [r3, #28]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	61da      	str	r2, [r3, #28]
      break;
 800539a:	e06b      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	0011      	movs	r1, r2
 80053a4:	0018      	movs	r0, r3
 80053a6:	f000 fb37 	bl	8005a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2180      	movs	r1, #128	; 0x80
 80053b6:	0109      	lsls	r1, r1, #4
 80053b8:	430a      	orrs	r2, r1
 80053ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4932      	ldr	r1, [pc, #200]	; (8005490 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053c8:	400a      	ands	r2, r1
 80053ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69d9      	ldr	r1, [r3, #28]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	61da      	str	r2, [r3, #28]
      break;
 80053e0:	e048      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	0011      	movs	r1, r2
 80053ea:	0018      	movs	r0, r3
 80053ec:	f000 fb78 	bl	8005ae0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2108      	movs	r1, #8
 80053fc:	430a      	orrs	r2, r1
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2104      	movs	r1, #4
 800540c:	438a      	bics	r2, r1
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005422:	e027      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	0011      	movs	r1, r2
 800542c:	0018      	movs	r0, r3
 800542e:	f000 fbb1 	bl	8005b94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	0109      	lsls	r1, r1, #4
 8005440:	430a      	orrs	r2, r1
 8005442:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4910      	ldr	r1, [pc, #64]	; (8005490 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005450:	400a      	ands	r2, r1
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	021a      	lsls	r2, r3, #8
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005468:	e004      	b.n	8005474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800546a:	2317      	movs	r3, #23
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
      break;
 8005472:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	223c      	movs	r2, #60	; 0x3c
 8005478:	2100      	movs	r1, #0
 800547a:	5499      	strb	r1, [r3, r2]

  return status;
 800547c:	2317      	movs	r3, #23
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	781b      	ldrb	r3, [r3, #0]
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b006      	add	sp, #24
 8005488:	bd80      	pop	{r7, pc}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	080069c0 	.word	0x080069c0
 8005490:	fffffbff 	.word	0xfffffbff

08005494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	230f      	movs	r3, #15
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	223c      	movs	r2, #60	; 0x3c
 80054aa:	5c9b      	ldrb	r3, [r3, r2]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_ConfigClockSource+0x20>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e0bc      	b.n	800562e <HAL_TIM_ConfigClockSource+0x19a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	223c      	movs	r2, #60	; 0x3c
 80054b8:	2101      	movs	r1, #1
 80054ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	223d      	movs	r2, #61	; 0x3d
 80054c0:	2102      	movs	r1, #2
 80054c2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4a5a      	ldr	r2, [pc, #360]	; (8005638 <HAL_TIM_ConfigClockSource+0x1a4>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a59      	ldr	r2, [pc, #356]	; (800563c <HAL_TIM_ConfigClockSource+0x1a8>)
 80054d8:	4013      	ands	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2280      	movs	r2, #128	; 0x80
 80054ea:	0192      	lsls	r2, r2, #6
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d040      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0xde>
 80054f0:	2280      	movs	r2, #128	; 0x80
 80054f2:	0192      	lsls	r2, r2, #6
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d900      	bls.n	80054fa <HAL_TIM_ConfigClockSource+0x66>
 80054f8:	e088      	b.n	800560c <HAL_TIM_ConfigClockSource+0x178>
 80054fa:	2280      	movs	r2, #128	; 0x80
 80054fc:	0152      	lsls	r2, r2, #5
 80054fe:	4293      	cmp	r3, r2
 8005500:	d100      	bne.n	8005504 <HAL_TIM_ConfigClockSource+0x70>
 8005502:	e088      	b.n	8005616 <HAL_TIM_ConfigClockSource+0x182>
 8005504:	2280      	movs	r2, #128	; 0x80
 8005506:	0152      	lsls	r2, r2, #5
 8005508:	4293      	cmp	r3, r2
 800550a:	d900      	bls.n	800550e <HAL_TIM_ConfigClockSource+0x7a>
 800550c:	e07e      	b.n	800560c <HAL_TIM_ConfigClockSource+0x178>
 800550e:	2b70      	cmp	r3, #112	; 0x70
 8005510:	d018      	beq.n	8005544 <HAL_TIM_ConfigClockSource+0xb0>
 8005512:	d900      	bls.n	8005516 <HAL_TIM_ConfigClockSource+0x82>
 8005514:	e07a      	b.n	800560c <HAL_TIM_ConfigClockSource+0x178>
 8005516:	2b60      	cmp	r3, #96	; 0x60
 8005518:	d04f      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x126>
 800551a:	d900      	bls.n	800551e <HAL_TIM_ConfigClockSource+0x8a>
 800551c:	e076      	b.n	800560c <HAL_TIM_ConfigClockSource+0x178>
 800551e:	2b50      	cmp	r3, #80	; 0x50
 8005520:	d03b      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x106>
 8005522:	d900      	bls.n	8005526 <HAL_TIM_ConfigClockSource+0x92>
 8005524:	e072      	b.n	800560c <HAL_TIM_ConfigClockSource+0x178>
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d057      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x146>
 800552a:	d900      	bls.n	800552e <HAL_TIM_ConfigClockSource+0x9a>
 800552c:	e06e      	b.n	800560c <HAL_TIM_ConfigClockSource+0x178>
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d063      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x166>
 8005532:	d86b      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x178>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d060      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x166>
 8005538:	d868      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x178>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d05d      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x166>
 800553e:	2b10      	cmp	r3, #16
 8005540:	d05b      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x166>
 8005542:	e063      	b.n	800560c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	6899      	ldr	r1, [r3, #8]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f000 fbf8 	bl	8005d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2277      	movs	r2, #119	; 0x77
 8005564:	4313      	orrs	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]
      break;
 8005570:	e052      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6899      	ldr	r1, [r3, #8]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f000 fbe1 	bl	8005d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2180      	movs	r1, #128	; 0x80
 8005592:	01c9      	lsls	r1, r1, #7
 8005594:	430a      	orrs	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
      break;
 8005598:	e03e      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	001a      	movs	r2, r3
 80055a8:	f000 fb52 	bl	8005c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2150      	movs	r1, #80	; 0x50
 80055b2:	0018      	movs	r0, r3
 80055b4:	f000 fbac 	bl	8005d10 <TIM_ITRx_SetConfig>
      break;
 80055b8:	e02e      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	001a      	movs	r2, r3
 80055c8:	f000 fb70 	bl	8005cac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2160      	movs	r1, #96	; 0x60
 80055d2:	0018      	movs	r0, r3
 80055d4:	f000 fb9c 	bl	8005d10 <TIM_ITRx_SetConfig>
      break;
 80055d8:	e01e      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	001a      	movs	r2, r3
 80055e8:	f000 fb32 	bl	8005c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2140      	movs	r1, #64	; 0x40
 80055f2:	0018      	movs	r0, r3
 80055f4:	f000 fb8c 	bl	8005d10 <TIM_ITRx_SetConfig>
      break;
 80055f8:	e00e      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	0019      	movs	r1, r3
 8005604:	0010      	movs	r0, r2
 8005606:	f000 fb83 	bl	8005d10 <TIM_ITRx_SetConfig>
      break;
 800560a:	e005      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800560c:	230f      	movs	r3, #15
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
      break;
 8005614:	e000      	b.n	8005618 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005616:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	223d      	movs	r2, #61	; 0x3d
 800561c:	2101      	movs	r1, #1
 800561e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	223c      	movs	r2, #60	; 0x3c
 8005624:	2100      	movs	r1, #0
 8005626:	5499      	strb	r1, [r3, r2]

  return status;
 8005628:	230f      	movs	r3, #15
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	781b      	ldrb	r3, [r3, #0]
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b004      	add	sp, #16
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	ffceff88 	.word	0xffceff88
 800563c:	ffff00ff 	.word	0xffff00ff

08005640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <TIM_Base_SetConfig+0xc0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0x20>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <TIM_Base_SetConfig+0xc4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d108      	bne.n	8005672 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2270      	movs	r2, #112	; 0x70
 8005664:	4393      	bics	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a22      	ldr	r2, [pc, #136]	; (8005700 <TIM_Base_SetConfig+0xc0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00f      	beq.n	800569a <TIM_Base_SetConfig+0x5a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a21      	ldr	r2, [pc, #132]	; (8005704 <TIM_Base_SetConfig+0xc4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00b      	beq.n	800569a <TIM_Base_SetConfig+0x5a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a20      	ldr	r2, [pc, #128]	; (8005708 <TIM_Base_SetConfig+0xc8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_Base_SetConfig+0x5a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <TIM_Base_SetConfig+0xcc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_Base_SetConfig+0x5a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <TIM_Base_SetConfig+0xd0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d108      	bne.n	80056ac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <TIM_Base_SetConfig+0xd4>)
 800569e:	4013      	ands	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	4393      	bics	r3, r2
 80056b2:	001a      	movs	r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <TIM_Base_SetConfig+0xc0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d007      	beq.n	80056ea <TIM_Base_SetConfig+0xaa>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <TIM_Base_SetConfig+0xcc>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_Base_SetConfig+0xaa>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a0a      	ldr	r2, [pc, #40]	; (8005710 <TIM_Base_SetConfig+0xd0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d103      	bne.n	80056f2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	615a      	str	r2, [r3, #20]
}
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b004      	add	sp, #16
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40012c00 	.word	0x40012c00
 8005704:	40000400 	.word	0x40000400
 8005708:	40002000 	.word	0x40002000
 800570c:	40014400 	.word	0x40014400
 8005710:	40014800 	.word	0x40014800
 8005714:	fffffcff 	.word	0xfffffcff

08005718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	2201      	movs	r2, #1
 8005728:	4393      	bics	r3, r2
 800572a:	001a      	movs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a2e      	ldr	r2, [pc, #184]	; (8005800 <TIM_OC1_SetConfig+0xe8>)
 8005746:	4013      	ands	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2203      	movs	r2, #3
 800574e:	4393      	bics	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2202      	movs	r2, #2
 8005760:	4393      	bics	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a24      	ldr	r2, [pc, #144]	; (8005804 <TIM_OC1_SetConfig+0xec>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_OC1_SetConfig+0x6e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a23      	ldr	r2, [pc, #140]	; (8005808 <TIM_OC1_SetConfig+0xf0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_OC1_SetConfig+0x6e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a22      	ldr	r2, [pc, #136]	; (800580c <TIM_OC1_SetConfig+0xf4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2208      	movs	r2, #8
 800578a:	4393      	bics	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2204      	movs	r2, #4
 800579c:	4393      	bics	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a18      	ldr	r2, [pc, #96]	; (8005804 <TIM_OC1_SetConfig+0xec>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <TIM_OC1_SetConfig+0xa0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <TIM_OC1_SetConfig+0xf0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC1_SetConfig+0xa0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a16      	ldr	r2, [pc, #88]	; (800580c <TIM_OC1_SetConfig+0xf4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d111      	bne.n	80057dc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <TIM_OC1_SetConfig+0xf8>)
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4a14      	ldr	r2, [pc, #80]	; (8005814 <TIM_OC1_SetConfig+0xfc>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b006      	add	sp, #24
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	fffeff8f 	.word	0xfffeff8f
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800
 8005810:	fffffeff 	.word	0xfffffeff
 8005814:	fffffdff 	.word	0xfffffdff

08005818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	2210      	movs	r2, #16
 8005828:	4393      	bics	r3, r2
 800582a:	001a      	movs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <TIM_OC2_SetConfig+0xe0>)
 8005846:	4013      	ands	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a2b      	ldr	r2, [pc, #172]	; (80058fc <TIM_OC2_SetConfig+0xe4>)
 800584e:	4013      	ands	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2220      	movs	r2, #32
 8005862:	4393      	bics	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a22      	ldr	r2, [pc, #136]	; (8005900 <TIM_OC2_SetConfig+0xe8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d10d      	bne.n	8005896 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2280      	movs	r2, #128	; 0x80
 800587e:	4393      	bics	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2240      	movs	r2, #64	; 0x40
 8005892:	4393      	bics	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a19      	ldr	r2, [pc, #100]	; (8005900 <TIM_OC2_SetConfig+0xe8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d007      	beq.n	80058ae <TIM_OC2_SetConfig+0x96>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a18      	ldr	r2, [pc, #96]	; (8005904 <TIM_OC2_SetConfig+0xec>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_OC2_SetConfig+0x96>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a17      	ldr	r2, [pc, #92]	; (8005908 <TIM_OC2_SetConfig+0xf0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d113      	bne.n	80058d6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4a16      	ldr	r2, [pc, #88]	; (800590c <TIM_OC2_SetConfig+0xf4>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4a15      	ldr	r2, [pc, #84]	; (8005910 <TIM_OC2_SetConfig+0xf8>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b006      	add	sp, #24
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	feff8fff 	.word	0xfeff8fff
 80058fc:	fffffcff 	.word	0xfffffcff
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	fffffbff 	.word	0xfffffbff
 8005910:	fffff7ff 	.word	0xfffff7ff

08005914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	4a33      	ldr	r2, [pc, #204]	; (80059f0 <TIM_OC3_SetConfig+0xdc>)
 8005924:	401a      	ands	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a2d      	ldr	r2, [pc, #180]	; (80059f4 <TIM_OC3_SetConfig+0xe0>)
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2203      	movs	r2, #3
 8005948:	4393      	bics	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4a27      	ldr	r2, [pc, #156]	; (80059f8 <TIM_OC3_SetConfig+0xe4>)
 800595a:	4013      	ands	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a23      	ldr	r2, [pc, #140]	; (80059fc <TIM_OC3_SetConfig+0xe8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10d      	bne.n	800598e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <TIM_OC3_SetConfig+0xec>)
 8005976:	4013      	ands	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <TIM_OC3_SetConfig+0xf0>)
 800598a:	4013      	ands	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1a      	ldr	r2, [pc, #104]	; (80059fc <TIM_OC3_SetConfig+0xe8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d007      	beq.n	80059a6 <TIM_OC3_SetConfig+0x92>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <TIM_OC3_SetConfig+0xf4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <TIM_OC3_SetConfig+0x92>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a1a      	ldr	r2, [pc, #104]	; (8005a0c <TIM_OC3_SetConfig+0xf8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d113      	bne.n	80059ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <TIM_OC3_SetConfig+0xfc>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <TIM_OC3_SetConfig+0x100>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	621a      	str	r2, [r3, #32]
}
 80059e8:	46c0      	nop			; (mov r8, r8)
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b006      	add	sp, #24
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	fffffeff 	.word	0xfffffeff
 80059f4:	fffeff8f 	.word	0xfffeff8f
 80059f8:	fffffdff 	.word	0xfffffdff
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	fffff7ff 	.word	0xfffff7ff
 8005a04:	fffffbff 	.word	0xfffffbff
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800
 8005a10:	ffffefff 	.word	0xffffefff
 8005a14:	ffffdfff 	.word	0xffffdfff

08005a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	4a26      	ldr	r2, [pc, #152]	; (8005ac0 <TIM_OC4_SetConfig+0xa8>)
 8005a28:	401a      	ands	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <TIM_OC4_SetConfig+0xac>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <TIM_OC4_SetConfig+0xb0>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <TIM_OC4_SetConfig+0xb4>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	031b      	lsls	r3, r3, #12
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a17      	ldr	r2, [pc, #92]	; (8005ad0 <TIM_OC4_SetConfig+0xb8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_OC4_SetConfig+0x70>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a16      	ldr	r2, [pc, #88]	; (8005ad4 <TIM_OC4_SetConfig+0xbc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC4_SetConfig+0x70>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <TIM_OC4_SetConfig+0xc0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d109      	bne.n	8005a9c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4a14      	ldr	r2, [pc, #80]	; (8005adc <TIM_OC4_SetConfig+0xc4>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	019b      	lsls	r3, r3, #6
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b006      	add	sp, #24
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	ffffefff 	.word	0xffffefff
 8005ac4:	feff8fff 	.word	0xfeff8fff
 8005ac8:	fffffcff 	.word	0xfffffcff
 8005acc:	ffffdfff 	.word	0xffffdfff
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800
 8005adc:	ffffbfff 	.word	0xffffbfff

08005ae0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4a23      	ldr	r2, [pc, #140]	; (8005b7c <TIM_OC5_SetConfig+0x9c>)
 8005af0:	401a      	ands	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <TIM_OC5_SetConfig+0xa0>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <TIM_OC5_SetConfig+0xa4>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <TIM_OC5_SetConfig+0xa8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_OC5_SetConfig+0x66>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a14      	ldr	r2, [pc, #80]	; (8005b8c <TIM_OC5_SetConfig+0xac>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC5_SetConfig+0x66>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a13      	ldr	r2, [pc, #76]	; (8005b90 <TIM_OC5_SetConfig+0xb0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d109      	bne.n	8005b5a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <TIM_OC5_SetConfig+0x9c>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b006      	add	sp, #24
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	fffeffff 	.word	0xfffeffff
 8005b80:	fffeff8f 	.word	0xfffeff8f
 8005b84:	fffdffff 	.word	0xfffdffff
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800

08005b94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	4a24      	ldr	r2, [pc, #144]	; (8005c34 <TIM_OC6_SetConfig+0xa0>)
 8005ba4:	401a      	ands	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <TIM_OC6_SetConfig+0xa4>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4a1a      	ldr	r2, [pc, #104]	; (8005c3c <TIM_OC6_SetConfig+0xa8>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	051b      	lsls	r3, r3, #20
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <TIM_OC6_SetConfig+0xac>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d007      	beq.n	8005bfc <TIM_OC6_SetConfig+0x68>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <TIM_OC6_SetConfig+0xb0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC6_SetConfig+0x68>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <TIM_OC6_SetConfig+0xb4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d109      	bne.n	8005c10 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <TIM_OC6_SetConfig+0xb8>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b006      	add	sp, #24
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	ffefffff 	.word	0xffefffff
 8005c38:	feff8fff 	.word	0xfeff8fff
 8005c3c:	ffdfffff 	.word	0xffdfffff
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40014400 	.word	0x40014400
 8005c48:	40014800 	.word	0x40014800
 8005c4c:	fffbffff 	.word	0xfffbffff

08005c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	2201      	movs	r2, #1
 8005c68:	4393      	bics	r3, r2
 8005c6a:	001a      	movs	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	22f0      	movs	r2, #240	; 0xf0
 8005c7a:	4393      	bics	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	220a      	movs	r2, #10
 8005c8c:	4393      	bics	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	46c0      	nop			; (mov r8, r8)
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b006      	add	sp, #24
 8005caa:	bd80      	pop	{r7, pc}

08005cac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	001a      	movs	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	4a0d      	ldr	r2, [pc, #52]	; (8005d0c <TIM_TI2_ConfigInputStage+0x60>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	031b      	lsls	r3, r3, #12
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	22a0      	movs	r2, #160	; 0xa0
 8005ce8:	4393      	bics	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b006      	add	sp, #24
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	ffff0fff 	.word	0xffff0fff

08005d10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a08      	ldr	r2, [pc, #32]	; (8005d44 <TIM_ITRx_SetConfig+0x34>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	2207      	movs	r2, #7
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b004      	add	sp, #16
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	ffcfff8f 	.word	0xffcfff8f

08005d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <TIM_ETR_SetConfig+0x3c>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	021a      	lsls	r2, r3, #8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	46c0      	nop			; (mov r8, r8)
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b006      	add	sp, #24
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	ffff00ff 	.word	0xffff00ff

08005d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	221f      	movs	r2, #31
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	0013      	movs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	43d2      	mvns	r2, r2
 8005daa:	401a      	ands	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	211f      	movs	r1, #31
 8005db8:	400b      	ands	r3, r1
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	4099      	lsls	r1, r3
 8005dbe:	000b      	movs	r3, r1
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	b006      	add	sp, #24
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	223c      	movs	r2, #60	; 0x3c
 8005dde:	5c9b      	ldrb	r3, [r3, r2]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e04a      	b.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	223c      	movs	r2, #60	; 0x3c
 8005dec:	2101      	movs	r1, #1
 8005dee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	223d      	movs	r2, #61	; 0x3d
 8005df4:	2102      	movs	r1, #2
 8005df6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a1d      	ldr	r2, [pc, #116]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2270      	movs	r2, #112	; 0x70
 8005e28:	4393      	bics	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a11      	ldr	r2, [pc, #68]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d004      	beq.n	8005e52 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d10c      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2280      	movs	r2, #128	; 0x80
 8005e56:	4393      	bics	r3, r2
 8005e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	223d      	movs	r2, #61	; 0x3d
 8005e70:	2101      	movs	r1, #1
 8005e72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	223c      	movs	r2, #60	; 0x3c
 8005e78:	2100      	movs	r1, #0
 8005e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	0018      	movs	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b004      	add	sp, #16
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	ff0fffff 	.word	0xff0fffff
 8005e90:	40000400 	.word	0x40000400

08005e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e046      	b.n	8005f34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2288      	movs	r2, #136	; 0x88
 8005eaa:	589b      	ldr	r3, [r3, r2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2284      	movs	r2, #132	; 0x84
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7fb fc44 	bl	8001748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2288      	movs	r2, #136	; 0x88
 8005ec4:	2124      	movs	r1, #36	; 0x24
 8005ec6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	438a      	bics	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	0018      	movs	r0, r3
 8005edc:	f000 f8cc 	bl	8006078 <UART_SetConfig>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e024      	b.n	8005f34 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f000 fa29 	bl	800634c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	490d      	ldr	r1, [pc, #52]	; (8005f3c <HAL_UART_Init+0xa8>)
 8005f06:	400a      	ands	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	212a      	movs	r1, #42	; 0x2a
 8005f16:	438a      	bics	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2101      	movs	r1, #1
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 fac1 	bl	80064b4 <UART_CheckIdleState>
 8005f32:	0003      	movs	r3, r0
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b002      	add	sp, #8
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	ffffb7ff 	.word	0xffffb7ff

08005f40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	1dbb      	adds	r3, r7, #6
 8005f4e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2288      	movs	r2, #136	; 0x88
 8005f54:	589b      	ldr	r3, [r3, r2]
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d000      	beq.n	8005f5c <HAL_UART_Transmit+0x1c>
 8005f5a:	e088      	b.n	800606e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_UART_Transmit+0x2a>
 8005f62:	1dbb      	adds	r3, r7, #6
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e080      	b.n	8006070 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	015b      	lsls	r3, r3, #5
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d109      	bne.n	8005f8e <HAL_UART_Transmit+0x4e>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2201      	movs	r2, #1
 8005f86:	4013      	ands	r3, r2
 8005f88:	d001      	beq.n	8005f8e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e070      	b.n	8006070 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2290      	movs	r2, #144	; 0x90
 8005f92:	2100      	movs	r1, #0
 8005f94:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2288      	movs	r2, #136	; 0x88
 8005f9a:	2121      	movs	r1, #33	; 0x21
 8005f9c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f9e:	f7fb fcf7 	bl	8001990 <HAL_GetTick>
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	1dba      	adds	r2, r7, #6
 8005faa:	2154      	movs	r1, #84	; 0x54
 8005fac:	8812      	ldrh	r2, [r2, #0]
 8005fae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	1dba      	adds	r2, r7, #6
 8005fb4:	2156      	movs	r1, #86	; 0x56
 8005fb6:	8812      	ldrh	r2, [r2, #0]
 8005fb8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	015b      	lsls	r3, r3, #5
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d108      	bne.n	8005fd8 <HAL_UART_Transmit+0x98>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e003      	b.n	8005fe0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe0:	e02c      	b.n	800603c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	0013      	movs	r3, r2
 8005fec:	2200      	movs	r2, #0
 8005fee:	2180      	movs	r1, #128	; 0x80
 8005ff0:	f000 faae 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 8005ff4:	1e03      	subs	r3, r0, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e039      	b.n	8006070 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	001a      	movs	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	05d2      	lsls	r2, r2, #23
 800600e:	0dd2      	lsrs	r2, r2, #23
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	3302      	adds	r3, #2
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	e007      	b.n	800602a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	3301      	adds	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2256      	movs	r2, #86	; 0x56
 800602e:	5a9b      	ldrh	r3, [r3, r2]
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b299      	uxth	r1, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2256      	movs	r2, #86	; 0x56
 800603a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2256      	movs	r2, #86	; 0x56
 8006040:	5a9b      	ldrh	r3, [r3, r2]
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1cc      	bne.n	8005fe2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	0013      	movs	r3, r2
 8006052:	2200      	movs	r2, #0
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	f000 fa7b 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 800605a:	1e03      	subs	r3, r0, #0
 800605c:	d001      	beq.n	8006062 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e006      	b.n	8006070 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2288      	movs	r2, #136	; 0x88
 8006066:	2120      	movs	r1, #32
 8006068:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b008      	add	sp, #32
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006080:	231a      	movs	r3, #26
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	4313      	orrs	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4aa1      	ldr	r2, [pc, #644]	; (800632c <UART_SetConfig+0x2b4>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	0019      	movs	r1, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	4a9c      	ldr	r2, [pc, #624]	; (8006330 <UART_SetConfig+0x2b8>)
 80060be:	4013      	ands	r3, r2
 80060c0:	0019      	movs	r1, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	4313      	orrs	r3, r2
 80060dc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4a93      	ldr	r2, [pc, #588]	; (8006334 <UART_SetConfig+0x2bc>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	0019      	movs	r1, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	220f      	movs	r2, #15
 80060fc:	4393      	bics	r3, r2
 80060fe:	0019      	movs	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a89      	ldr	r2, [pc, #548]	; (8006338 <UART_SetConfig+0x2c0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d127      	bne.n	8006166 <UART_SetConfig+0xee>
 8006116:	4b89      	ldr	r3, [pc, #548]	; (800633c <UART_SetConfig+0x2c4>)
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	2203      	movs	r2, #3
 800611c:	4013      	ands	r3, r2
 800611e:	2b03      	cmp	r3, #3
 8006120:	d017      	beq.n	8006152 <UART_SetConfig+0xda>
 8006122:	d81b      	bhi.n	800615c <UART_SetConfig+0xe4>
 8006124:	2b02      	cmp	r3, #2
 8006126:	d00a      	beq.n	800613e <UART_SetConfig+0xc6>
 8006128:	d818      	bhi.n	800615c <UART_SetConfig+0xe4>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <UART_SetConfig+0xbc>
 800612e:	2b01      	cmp	r3, #1
 8006130:	d00a      	beq.n	8006148 <UART_SetConfig+0xd0>
 8006132:	e013      	b.n	800615c <UART_SetConfig+0xe4>
 8006134:	231b      	movs	r3, #27
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e021      	b.n	8006182 <UART_SetConfig+0x10a>
 800613e:	231b      	movs	r3, #27
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	2202      	movs	r2, #2
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e01c      	b.n	8006182 <UART_SetConfig+0x10a>
 8006148:	231b      	movs	r3, #27
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2204      	movs	r2, #4
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	e017      	b.n	8006182 <UART_SetConfig+0x10a>
 8006152:	231b      	movs	r3, #27
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	2208      	movs	r2, #8
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	e012      	b.n	8006182 <UART_SetConfig+0x10a>
 800615c:	231b      	movs	r3, #27
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	2210      	movs	r2, #16
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e00d      	b.n	8006182 <UART_SetConfig+0x10a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a75      	ldr	r2, [pc, #468]	; (8006340 <UART_SetConfig+0x2c8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d104      	bne.n	800617a <UART_SetConfig+0x102>
 8006170:	231b      	movs	r3, #27
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	e003      	b.n	8006182 <UART_SetConfig+0x10a>
 800617a:	231b      	movs	r3, #27
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	2210      	movs	r2, #16
 8006180:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	429a      	cmp	r2, r3
 800618c:	d000      	beq.n	8006190 <UART_SetConfig+0x118>
 800618e:	e065      	b.n	800625c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8006190:	231b      	movs	r3, #27
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b08      	cmp	r3, #8
 8006198:	d015      	beq.n	80061c6 <UART_SetConfig+0x14e>
 800619a:	dc18      	bgt.n	80061ce <UART_SetConfig+0x156>
 800619c:	2b04      	cmp	r3, #4
 800619e:	d00d      	beq.n	80061bc <UART_SetConfig+0x144>
 80061a0:	dc15      	bgt.n	80061ce <UART_SetConfig+0x156>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <UART_SetConfig+0x134>
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d005      	beq.n	80061b6 <UART_SetConfig+0x13e>
 80061aa:	e010      	b.n	80061ce <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ac:	f7fe fda6 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 80061b0:	0003      	movs	r3, r0
 80061b2:	617b      	str	r3, [r7, #20]
        break;
 80061b4:	e012      	b.n	80061dc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b6:	4b63      	ldr	r3, [pc, #396]	; (8006344 <UART_SetConfig+0x2cc>)
 80061b8:	617b      	str	r3, [r7, #20]
        break;
 80061ba:	e00f      	b.n	80061dc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061bc:	f7fe fd12 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 80061c0:	0003      	movs	r3, r0
 80061c2:	617b      	str	r3, [r7, #20]
        break;
 80061c4:	e00a      	b.n	80061dc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c6:	2380      	movs	r3, #128	; 0x80
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	617b      	str	r3, [r7, #20]
        break;
 80061cc:	e006      	b.n	80061dc <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061d2:	231a      	movs	r3, #26
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	2201      	movs	r2, #1
 80061d8:	701a      	strb	r2, [r3, #0]
        break;
 80061da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d100      	bne.n	80061e4 <UART_SetConfig+0x16c>
 80061e2:	e08d      	b.n	8006300 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e8:	4b57      	ldr	r3, [pc, #348]	; (8006348 <UART_SetConfig+0x2d0>)
 80061ea:	0052      	lsls	r2, r2, #1
 80061ec:	5ad3      	ldrh	r3, [r2, r3]
 80061ee:	0019      	movs	r1, r3
 80061f0:	6978      	ldr	r0, [r7, #20]
 80061f2:	f7f9 ff85 	bl	8000100 <__udivsi3>
 80061f6:	0003      	movs	r3, r0
 80061f8:	005a      	lsls	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	18d2      	adds	r2, r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	0019      	movs	r1, r3
 8006208:	0010      	movs	r0, r2
 800620a:	f7f9 ff79 	bl	8000100 <__udivsi3>
 800620e:	0003      	movs	r3, r0
 8006210:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d91c      	bls.n	8006252 <UART_SetConfig+0x1da>
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	025b      	lsls	r3, r3, #9
 800621e:	429a      	cmp	r2, r3
 8006220:	d217      	bcs.n	8006252 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	b29a      	uxth	r2, r3
 8006226:	200e      	movs	r0, #14
 8006228:	183b      	adds	r3, r7, r0
 800622a:	210f      	movs	r1, #15
 800622c:	438a      	bics	r2, r1
 800622e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	b29b      	uxth	r3, r3
 8006236:	2207      	movs	r2, #7
 8006238:	4013      	ands	r3, r2
 800623a:	b299      	uxth	r1, r3
 800623c:	183b      	adds	r3, r7, r0
 800623e:	183a      	adds	r2, r7, r0
 8006240:	8812      	ldrh	r2, [r2, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	183a      	adds	r2, r7, r0
 800624c:	8812      	ldrh	r2, [r2, #0]
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e056      	b.n	8006300 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006252:	231a      	movs	r3, #26
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	e051      	b.n	8006300 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800625c:	231b      	movs	r3, #27
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b08      	cmp	r3, #8
 8006264:	d015      	beq.n	8006292 <UART_SetConfig+0x21a>
 8006266:	dc18      	bgt.n	800629a <UART_SetConfig+0x222>
 8006268:	2b04      	cmp	r3, #4
 800626a:	d00d      	beq.n	8006288 <UART_SetConfig+0x210>
 800626c:	dc15      	bgt.n	800629a <UART_SetConfig+0x222>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <UART_SetConfig+0x200>
 8006272:	2b02      	cmp	r3, #2
 8006274:	d005      	beq.n	8006282 <UART_SetConfig+0x20a>
 8006276:	e010      	b.n	800629a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006278:	f7fe fd40 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 800627c:	0003      	movs	r3, r0
 800627e:	617b      	str	r3, [r7, #20]
        break;
 8006280:	e012      	b.n	80062a8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006282:	4b30      	ldr	r3, [pc, #192]	; (8006344 <UART_SetConfig+0x2cc>)
 8006284:	617b      	str	r3, [r7, #20]
        break;
 8006286:	e00f      	b.n	80062a8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006288:	f7fe fcac 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 800628c:	0003      	movs	r3, r0
 800628e:	617b      	str	r3, [r7, #20]
        break;
 8006290:	e00a      	b.n	80062a8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	617b      	str	r3, [r7, #20]
        break;
 8006298:	e006      	b.n	80062a8 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800629e:	231a      	movs	r3, #26
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	2201      	movs	r2, #1
 80062a4:	701a      	strb	r2, [r3, #0]
        break;
 80062a6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d028      	beq.n	8006300 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062b2:	4b25      	ldr	r3, [pc, #148]	; (8006348 <UART_SetConfig+0x2d0>)
 80062b4:	0052      	lsls	r2, r2, #1
 80062b6:	5ad3      	ldrh	r3, [r2, r3]
 80062b8:	0019      	movs	r1, r3
 80062ba:	6978      	ldr	r0, [r7, #20]
 80062bc:	f7f9 ff20 	bl	8000100 <__udivsi3>
 80062c0:	0003      	movs	r3, r0
 80062c2:	001a      	movs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	18d2      	adds	r2, r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	0019      	movs	r1, r3
 80062d2:	0010      	movs	r0, r2
 80062d4:	f7f9 ff14 	bl	8000100 <__udivsi3>
 80062d8:	0003      	movs	r3, r0
 80062da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d90a      	bls.n	80062f8 <UART_SetConfig+0x280>
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	025b      	lsls	r3, r3, #9
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d205      	bcs.n	80062f8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	e003      	b.n	8006300 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80062f8:	231a      	movs	r3, #26
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	226a      	movs	r2, #106	; 0x6a
 8006304:	2101      	movs	r1, #1
 8006306:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2268      	movs	r2, #104	; 0x68
 800630c:	2101      	movs	r1, #1
 800630e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800631c:	231a      	movs	r3, #26
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	781b      	ldrb	r3, [r3, #0]
}
 8006322:	0018      	movs	r0, r3
 8006324:	46bd      	mov	sp, r7
 8006326:	b008      	add	sp, #32
 8006328:	bd80      	pop	{r7, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	cfff69f3 	.word	0xcfff69f3
 8006330:	ffffcfff 	.word	0xffffcfff
 8006334:	11fff4ff 	.word	0x11fff4ff
 8006338:	40013800 	.word	0x40013800
 800633c:	40021000 	.word	0x40021000
 8006340:	40004400 	.word	0x40004400
 8006344:	00f42400 	.word	0x00f42400
 8006348:	08006a14 	.word	0x08006a14

0800634c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	2201      	movs	r2, #1
 800635a:	4013      	ands	r3, r2
 800635c:	d00b      	beq.n	8006376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4a4a      	ldr	r2, [pc, #296]	; (8006490 <UART_AdvFeatureConfig+0x144>)
 8006366:	4013      	ands	r3, r2
 8006368:	0019      	movs	r1, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	2202      	movs	r2, #2
 800637c:	4013      	ands	r3, r2
 800637e:	d00b      	beq.n	8006398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4a43      	ldr	r2, [pc, #268]	; (8006494 <UART_AdvFeatureConfig+0x148>)
 8006388:	4013      	ands	r3, r2
 800638a:	0019      	movs	r1, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	2204      	movs	r2, #4
 800639e:	4013      	ands	r3, r2
 80063a0:	d00b      	beq.n	80063ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4a3b      	ldr	r2, [pc, #236]	; (8006498 <UART_AdvFeatureConfig+0x14c>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	2208      	movs	r2, #8
 80063c0:	4013      	ands	r3, r2
 80063c2:	d00b      	beq.n	80063dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4a34      	ldr	r2, [pc, #208]	; (800649c <UART_AdvFeatureConfig+0x150>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	0019      	movs	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	2210      	movs	r2, #16
 80063e2:	4013      	ands	r3, r2
 80063e4:	d00b      	beq.n	80063fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <UART_AdvFeatureConfig+0x154>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	0019      	movs	r1, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	2220      	movs	r2, #32
 8006404:	4013      	ands	r3, r2
 8006406:	d00b      	beq.n	8006420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	4a25      	ldr	r2, [pc, #148]	; (80064a4 <UART_AdvFeatureConfig+0x158>)
 8006410:	4013      	ands	r3, r2
 8006412:	0019      	movs	r1, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006424:	2240      	movs	r2, #64	; 0x40
 8006426:	4013      	ands	r3, r2
 8006428:	d01d      	beq.n	8006466 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <UART_AdvFeatureConfig+0x15c>)
 8006432:	4013      	ands	r3, r2
 8006434:	0019      	movs	r1, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006446:	2380      	movs	r3, #128	; 0x80
 8006448:	035b      	lsls	r3, r3, #13
 800644a:	429a      	cmp	r2, r3
 800644c:	d10b      	bne.n	8006466 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4a15      	ldr	r2, [pc, #84]	; (80064ac <UART_AdvFeatureConfig+0x160>)
 8006456:	4013      	ands	r3, r2
 8006458:	0019      	movs	r1, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	2280      	movs	r2, #128	; 0x80
 800646c:	4013      	ands	r3, r2
 800646e:	d00b      	beq.n	8006488 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4a0e      	ldr	r2, [pc, #56]	; (80064b0 <UART_AdvFeatureConfig+0x164>)
 8006478:	4013      	ands	r3, r2
 800647a:	0019      	movs	r1, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	605a      	str	r2, [r3, #4]
  }
}
 8006488:	46c0      	nop			; (mov r8, r8)
 800648a:	46bd      	mov	sp, r7
 800648c:	b002      	add	sp, #8
 800648e:	bd80      	pop	{r7, pc}
 8006490:	fffdffff 	.word	0xfffdffff
 8006494:	fffeffff 	.word	0xfffeffff
 8006498:	fffbffff 	.word	0xfffbffff
 800649c:	ffff7fff 	.word	0xffff7fff
 80064a0:	ffffefff 	.word	0xffffefff
 80064a4:	ffffdfff 	.word	0xffffdfff
 80064a8:	ffefffff 	.word	0xffefffff
 80064ac:	ff9fffff 	.word	0xff9fffff
 80064b0:	fff7ffff 	.word	0xfff7ffff

080064b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2290      	movs	r2, #144	; 0x90
 80064c0:	2100      	movs	r1, #0
 80064c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064c4:	f7fb fa64 	bl	8001990 <HAL_GetTick>
 80064c8:	0003      	movs	r3, r0
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2208      	movs	r2, #8
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d10c      	bne.n	80064f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2280      	movs	r2, #128	; 0x80
 80064de:	0391      	lsls	r1, r2, #14
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	4a1a      	ldr	r2, [pc, #104]	; (800654c <UART_CheckIdleState+0x98>)
 80064e4:	9200      	str	r2, [sp, #0]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f000 f832 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 80064ec:	1e03      	subs	r3, r0, #0
 80064ee:	d001      	beq.n	80064f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e026      	b.n	8006542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2204      	movs	r2, #4
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d10c      	bne.n	800651c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2280      	movs	r2, #128	; 0x80
 8006506:	03d1      	lsls	r1, r2, #15
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4a10      	ldr	r2, [pc, #64]	; (800654c <UART_CheckIdleState+0x98>)
 800650c:	9200      	str	r2, [sp, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	f000 f81e 	bl	8006550 <UART_WaitOnFlagUntilTimeout>
 8006514:	1e03      	subs	r3, r0, #0
 8006516:	d001      	beq.n	800651c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e012      	b.n	8006542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2288      	movs	r2, #136	; 0x88
 8006520:	2120      	movs	r1, #32
 8006522:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	228c      	movs	r2, #140	; 0x8c
 8006528:	2120      	movs	r1, #32
 800652a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2284      	movs	r2, #132	; 0x84
 800653c:	2100      	movs	r1, #0
 800653e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	0018      	movs	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	b004      	add	sp, #16
 8006548:	bd80      	pop	{r7, pc}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	01ffffff 	.word	0x01ffffff

08006550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b094      	sub	sp, #80	; 0x50
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	1dfb      	adds	r3, r7, #7
 800655e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006560:	e0a7      	b.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006564:	3301      	adds	r3, #1
 8006566:	d100      	bne.n	800656a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006568:	e0a3      	b.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656a:	f7fb fa11 	bl	8001990 <HAL_GetTick>
 800656e:	0002      	movs	r2, r0
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006576:	429a      	cmp	r2, r3
 8006578:	d302      	bcc.n	8006580 <UART_WaitOnFlagUntilTimeout+0x30>
 800657a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800657c:	2b00      	cmp	r3, #0
 800657e:	d13f      	bne.n	8006600 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006580:	f3ef 8310 	mrs	r3, PRIMASK
 8006584:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006588:	647b      	str	r3, [r7, #68]	; 0x44
 800658a:	2301      	movs	r3, #1
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	f383 8810 	msr	PRIMASK, r3
}
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	494e      	ldr	r1, [pc, #312]	; (80066dc <UART_WaitOnFlagUntilTimeout+0x18c>)
 80065a2:	400a      	ands	r2, r1
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	f383 8810 	msr	PRIMASK, r3
}
 80065b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b2:	f3ef 8310 	mrs	r3, PRIMASK
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
 80065bc:	2301      	movs	r3, #1
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	f383 8810 	msr	PRIMASK, r3
}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2101      	movs	r1, #1
 80065d4:	438a      	bics	r2, r1
 80065d6:	609a      	str	r2, [r3, #8]
 80065d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065de:	f383 8810 	msr	PRIMASK, r3
}
 80065e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2288      	movs	r2, #136	; 0x88
 80065e8:	2120      	movs	r1, #32
 80065ea:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	228c      	movs	r2, #140	; 0x8c
 80065f0:	2120      	movs	r1, #32
 80065f2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2284      	movs	r2, #132	; 0x84
 80065f8:	2100      	movs	r1, #0
 80065fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e069      	b.n	80066d4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2204      	movs	r2, #4
 8006608:	4013      	ands	r3, r2
 800660a:	d052      	beq.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69da      	ldr	r2, [r3, #28]
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	401a      	ands	r2, r3
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	429a      	cmp	r2, r3
 800661e:	d148      	bne.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	0112      	lsls	r2, r2, #4
 8006628:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662a:	f3ef 8310 	mrs	r3, PRIMASK
 800662e:	613b      	str	r3, [r7, #16]
  return(result);
 8006630:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006634:	2301      	movs	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f383 8810 	msr	PRIMASK, r3
}
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4924      	ldr	r1, [pc, #144]	; (80066dc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800664c:	400a      	ands	r2, r1
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006652:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f383 8810 	msr	PRIMASK, r3
}
 800665a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665c:	f3ef 8310 	mrs	r3, PRIMASK
 8006660:	61fb      	str	r3, [r7, #28]
  return(result);
 8006662:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48
 8006666:	2301      	movs	r3, #1
 8006668:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f383 8810 	msr	PRIMASK, r3
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2101      	movs	r1, #1
 800667e:	438a      	bics	r2, r1
 8006680:	609a      	str	r2, [r3, #8]
 8006682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	f383 8810 	msr	PRIMASK, r3
}
 800668c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2288      	movs	r2, #136	; 0x88
 8006692:	2120      	movs	r1, #32
 8006694:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	228c      	movs	r2, #140	; 0x8c
 800669a:	2120      	movs	r1, #32
 800669c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2290      	movs	r2, #144	; 0x90
 80066a2:	2120      	movs	r1, #32
 80066a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2284      	movs	r2, #132	; 0x84
 80066aa:	2100      	movs	r1, #0
 80066ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e010      	b.n	80066d4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	4013      	ands	r3, r2
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	425a      	negs	r2, r3
 80066c2:	4153      	adcs	r3, r2
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	001a      	movs	r2, r3
 80066c8:	1dfb      	adds	r3, r7, #7
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d100      	bne.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x182>
 80066d0:	e747      	b.n	8006562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	0018      	movs	r0, r3
 80066d6:	46bd      	mov	sp, r7
 80066d8:	b014      	add	sp, #80	; 0x50
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	fffffe5f 	.word	0xfffffe5f

080066e0 <__libc_init_array>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	2600      	movs	r6, #0
 80066e4:	4d0c      	ldr	r5, [pc, #48]	; (8006718 <__libc_init_array+0x38>)
 80066e6:	4c0d      	ldr	r4, [pc, #52]	; (800671c <__libc_init_array+0x3c>)
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	d109      	bne.n	8006704 <__libc_init_array+0x24>
 80066f0:	2600      	movs	r6, #0
 80066f2:	f000 f821 	bl	8006738 <_init>
 80066f6:	4d0a      	ldr	r5, [pc, #40]	; (8006720 <__libc_init_array+0x40>)
 80066f8:	4c0a      	ldr	r4, [pc, #40]	; (8006724 <__libc_init_array+0x44>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	42a6      	cmp	r6, r4
 8006700:	d105      	bne.n	800670e <__libc_init_array+0x2e>
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	00b3      	lsls	r3, r6, #2
 8006706:	58eb      	ldr	r3, [r5, r3]
 8006708:	4798      	blx	r3
 800670a:	3601      	adds	r6, #1
 800670c:	e7ee      	b.n	80066ec <__libc_init_array+0xc>
 800670e:	00b3      	lsls	r3, r6, #2
 8006710:	58eb      	ldr	r3, [r5, r3]
 8006712:	4798      	blx	r3
 8006714:	3601      	adds	r6, #1
 8006716:	e7f2      	b.n	80066fe <__libc_init_array+0x1e>
 8006718:	08006a2c 	.word	0x08006a2c
 800671c:	08006a2c 	.word	0x08006a2c
 8006720:	08006a2c 	.word	0x08006a2c
 8006724:	08006a30 	.word	0x08006a30

08006728 <memset>:
 8006728:	0003      	movs	r3, r0
 800672a:	1882      	adds	r2, r0, r2
 800672c:	4293      	cmp	r3, r2
 800672e:	d100      	bne.n	8006732 <memset+0xa>
 8006730:	4770      	bx	lr
 8006732:	7019      	strb	r1, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	e7f9      	b.n	800672c <memset+0x4>

08006738 <_init>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr

08006744 <_fini>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr
